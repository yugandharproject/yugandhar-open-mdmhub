set lines 1000;
set pages 2000;
set scan off;
set serveroutput on;

spool 'FullSchema.log'
-----------------------------------------------------------------------

CREATE TABLE MDM_OWNER.ACCOUNT
(
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  CONTRACT_SIGNED_LANG_REFKEY   VARCHAR2(50 BYTE),
  CURRENCY_REFKEY               VARCHAR2(50 BYTE),
  BILLING_MODE_TYPE_REFKEY      VARCHAR2(50 BYTE),
  FREQUENCY_OF_PAYMENT          NUMBER(19),
  LOBTYPE_REFKEY                VARCHAR2(50 BYTE),
  LOB_DESCRIPTION               VARCHAR2(100 BYTE),
  SOURCE_SYSTEM_REFKEY          VARCHAR2(50 BYTE),
  SOURCE_ACCOUNT_ID             VARCHAR2(50 BYTE),
  MANAGEDBY_BU_CODE             VARCHAR2(30 BYTE),
  MANAGEDBY_BU_ID               VARCHAR2(30 BYTE),
  BRANCH_CODE_REFKEY            VARCHAR2(50 BYTE),
  ACCOUNT_NAME                  VARCHAR2(50 BYTE) NOT NULL,
  ACCOUNT_NAME2                 VARCHAR2(50 BYTE),
  ACCOUNT_DESCRIPTION           VARCHAR2(100 BYTE),
  ACCOUNT_SOURCE_STATUS_REFKEY  VARCHAR2(50 BYTE),
  ACCOUNT_MDM_STATUS_REFKEY     VARCHAR2(50 BYTE),
  SIGNED_DATE                   DATE,
  SIGNED_PLACE                  DATE,
  EXECUTED_DATE                 DATE,
  TERMINATED_DATE               DATE,
  TERMINATION_REASON_REFKEY     VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.ACCOUNT IS 'The account information is stored in this table.';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.ID_PK IS 'MDM Account ID to uniquely identify an account in the system';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.CONTRACT_SIGNED_LANG_REFKEY IS 'The laguage code in which the contract is signed';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.CURRENCY_REFKEY IS 'The currency in which the account is operated';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.BILLING_MODE_TYPE_REFKEY IS 'The mode of billing';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.FREQUENCY_OF_PAYMENT IS 'Frequency of the payment (e.g. monthly, Annualy etc)';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.LOBTYPE_REFKEY IS 'The Line of Business in which the account belong';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.LOB_DESCRIPTION IS 'The Line of business description';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.SOURCE_SYSTEM_REFKEY IS 'The source system id from where the legal entity is aquired in MDM. MDM itself can be a source for the record and if it’s the case then make an entry in source system reference table for MDM and use the FK for this attribute.';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.SOURCE_ACCOUNT_ID IS 'The account number in the source system';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.MANAGEDBY_BU_CODE IS 'The BU code in which the account is managed';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.MANAGEDBY_BU_ID IS 'The BU ID in which account is managed';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.BRANCH_CODE_REFKEY IS 'Branch code where account belongs';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.ACCOUNT_NAME IS 'The primary name of the account ';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.ACCOUNT_NAME2 IS 'The name of the account ';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.ACCOUNT_DESCRIPTION IS 'The description of the account';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.ACCOUNT_SOURCE_STATUS_REFKEY IS 'The status of the account source system (ACTIVE, INACTIVE, DELETED etc)';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.ACCOUNT_MDM_STATUS_REFKEY IS 'The status of the account in MDM (ACTIVE, INACTIVE, DELETED etc)';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.SIGNED_DATE IS 'The date when contract is signed to open the account';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.SIGNED_PLACE IS 'The place where contract is signed to open the account';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.EXECUTED_DATE IS 'The date when the contract is executed';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.TERMINATED_DATE IS 'The date whenn contract is terminated';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT.TERMINATION_REASON_REFKEY IS 'The reason why the account is inactivated';



CREATE TABLE MDM_OWNER.ACCOUNT_ADDRESS_ASSOC
(
  ID_PK                   VARCHAR2(50 BYTE),
  VERSION                 NUMBER                NOT NULL,
  CREATED_TS              TIMESTAMP(6)          NOT NULL,
  DELETED_TS              TIMESTAMP(6),
  UPDATED_TS              TIMESTAMP(6)          NOT NULL,
  UPDATED_BY_USER         VARCHAR2(50 BYTE)     NOT NULL,
  UPDATED_BY_TXN_ID       VARCHAR2(100 BYTE),
  ACCOUNT_IDPK            VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_IDPK            VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_TYPE_REFKEY     VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_SUBTYPE_REFKEY  VARCHAR2(50 BYTE)     NOT NULL,
  PREFERRED_FLAG          VARCHAR2(1 BYTE),
  SOLICITATION_FLAG       VARCHAR2(1 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.ACCOUNT_ADDRESS_ASSOC IS 'The table is used to link the account with address. Account idpk, address idpk and address type forms a unique key.';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.ACCOUNT_IDPK IS 'PK of the ACCOUNT table as FK to be used to associate account with address';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.ADDRESS_IDPK IS 'PK of the ADDRESS table as FK to be used to associate account with address';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.ADDRESS_TYPE_REFKEY IS 'The type of the address (e.g. summer address, winter address, general address etc)';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.ADDRESS_SUBTYPE_REFKEY IS 'The subtype of the address  (e.g. postal address, communication address etc.)';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.PREFERRED_FLAG IS 'Flag to indicate if this address is prefered by Legal entity';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_ADDRESS_ASSOC.SOLICITATION_FLAG IS 'Flag to indicate if the LE can be contacted on this address';



CREATE TABLE MDM_OWNER.ACCOUNT_PHONE_ASSOC
(
  ID_PK                    VARCHAR2(50 BYTE),
  VERSION                  NUMBER               NOT NULL,
  CREATED_TS               TIMESTAMP(6)         NOT NULL,
  DELETED_TS               TIMESTAMP(6),
  UPDATED_TS               TIMESTAMP(6)         NOT NULL,
  UPDATED_BY_USER          VARCHAR2(50 BYTE)    NOT NULL,
  UPDATED_BY_TXN_ID        VARCHAR2(100 BYTE),
  ACCOUNT_IDPK             VARCHAR2(50 BYTE)    NOT NULL,
  PHONE_TYPE_REFKEY        VARCHAR2(50 BYTE)    NOT NULL,
  PHONE_SUBTYPE_REFKEY     VARCHAR2(50 BYTE),
  PREFERRED_FLAG           VARCHAR2(1 BYTE),
  PHONE_NUMBER             VARCHAR2(30 BYTE)    NOT NULL,
  PHONE_STANDARDIZED_IDPK  VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.ACCOUNT_PHONE_ASSOC IS 'This table is used to link Account with phone number. Account idpk and Phone Type forms a uniqueue key.';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.ACCOUNT_IDPK IS 'PK of the ACCOUNT table as FK to be used to associate account with phone number';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.PHONE_TYPE_REFKEY IS 'Phone type category  (office number, personal phone etc)';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.PHONE_SUBTYPE_REFKEY IS 'Phone subtype (e.g. Mobile number, landline, fax, pager etc)';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.PREFERRED_FLAG IS 'Flag to indicate if this phone number is prefered by customer';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.PHONE_NUMBER IS 'Phone number';

COMMENT ON COLUMN MDM_OWNER.ACCOUNT_PHONE_ASSOC.PHONE_STANDARDIZED_IDPK IS 'IDPK of PHONE_STANDARDIZED table as FK if the phone number is standardized';



CREATE TABLE MDM_OWNER.ADDRESS
(
  ID_PK                        VARCHAR2(50 BYTE),
  VERSION                      NUMBER           NOT NULL,
  CREATED_TS                   TIMESTAMP(6)     NOT NULL,
  DELETED_TS                   TIMESTAMP(6),
  UPDATED_TS                   TIMESTAMP(6)     NOT NULL,
  UPDATED_BY_USER              VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID            VARCHAR2(100 BYTE),
  ADDRESS_LINE_ONE             VARCHAR2(100 BYTE) NOT NULL,
  ADDRESS_LINE_TWO             VARCHAR2(100 BYTE),
  ADDRESS_LINE_THREE           VARCHAR2(100 BYTE),
  ADDRESS_LINE_FOUR            VARCHAR2(100 BYTE),
  STREET_NUMBER                VARCHAR2(30 BYTE),
  STREET_NAME                  VARCHAR2(50 BYTE),
  HOUSE_NUMBER                 VARCHAR2(30 BYTE),
  BUILDING_NUMBER              VARCHAR2(30 BYTE),
  COUNTY                       VARCHAR2(50 BYTE),
  CITY                         VARCHAR2(100 BYTE) NOT NULL,
  DISTRICT_ZONE                VARCHAR2(100 BYTE),
  STATE_PROVINCE_REFKEY        VARCHAR2(50 BYTE),
  COUNTRY_REFKEY               VARCHAR2(50 BYTE) NOT NULL,
  POSTAL_CODE                  VARCHAR2(30 BYTE),
  NEAREST_LANDMARK             VARCHAR2(50 BYTE),
  BOX_DESIGNATOR               VARCHAR2(50 BYTE),
  BOX_IDENTIFIER               VARCHAR2(50 BYTE),
  NEAREST_RAILWAY_STATION      VARCHAR2(50 BYTE),
  NEAREST_AIRPORT              VARCHAR2(50 BYTE),
  PHONETIC_ADDRESS_LINE_ONE    VARCHAR2(50 BYTE),
  PHONETIC_ADDRESS_LINE_TWO    VARCHAR2(50 BYTE),
  PHONETIC_ADDRESS_LINE_THREE  VARCHAR2(50 BYTE),
  PHONETIC_ADDRESS_LINE_FOUR   VARCHAR2(50 BYTE),
  PHONETIC_STREET_NAME         VARCHAR2(50 BYTE),
  PHONETIC_COUNTY              VARCHAR2(50 BYTE),
  PHONETIC_CITY                VARCHAR2(100 BYTE),
  PHONETIC_DISTRICT_ZONE       VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.ADDRESS IS 'This table stores the complete address details.';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.ID_PK IS 'Primary key of the address table. Uniquely identifies an address in the system';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.ADDRESS_LINE_ONE IS 'Address line one';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.ADDRESS_LINE_TWO IS 'Address line two';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.ADDRESS_LINE_THREE IS 'Address line three';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.ADDRESS_LINE_FOUR IS 'Address line four';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.STREET_NUMBER IS 'Street number';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.STREET_NAME IS 'Street name';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.HOUSE_NUMBER IS 'House number or flat number';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.BUILDING_NUMBER IS 'Building name or building number';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.COUNTY IS 'County or village ';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.CITY IS 'City or town name';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.DISTRICT_ZONE IS 'District or zone';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.STATE_PROVINCE_REFKEY IS 'Province or the state of the address';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.COUNTRY_REFKEY IS 'Country code';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.POSTAL_CODE IS 'Postal code or zip number';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.NEAREST_LANDMARK IS 'Nearest landmark';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.BOX_DESIGNATOR IS 'Box designator';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.BOX_IDENTIFIER IS 'Box id /number';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.NEAREST_RAILWAY_STATION IS 'Nearest railway station';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.NEAREST_AIRPORT IS 'Nearest airport';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.PHONETIC_ADDRESS_LINE_ONE IS 'Phonetic value of ADDRESS_LINE_ONE Column';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.PHONETIC_ADDRESS_LINE_TWO IS 'Phonetic value of ADDRESS_LINE_TWO Column';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.PHONETIC_ADDRESS_LINE_THREE IS 'Phonetic value of ADDRESS_LINE_THREE Column';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.PHONETIC_ADDRESS_LINE_FOUR IS 'Phonetic value of ADDRESS_LINE_FOUR Column';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.PHONETIC_STREET_NAME IS 'Phonetic value of STREET_NAME Column';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.PHONETIC_COUNTY IS 'Phonetic value of COUNTY Column';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.PHONETIC_CITY IS 'Phonetic value of CITY Column';

COMMENT ON COLUMN MDM_OWNER.ADDRESS.PHONETIC_DISTRICT_ZONE IS 'Phonetic value of DISTRICT_ZONE Column';



CREATE TABLE MDM_OWNER.AL_ACCOUNT
(
  AUDITLOG_ID_PK                VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS           TIMESTAMP(6)    NOT NULL,
  AUDITLOG_ACTION_CODE          CHAR(1 BYTE)    NOT NULL,
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  CONTRACT_SIGNED_LANG_REFKEY   VARCHAR2(50 BYTE),
  CURRENCY_REFKEY               VARCHAR2(50 BYTE),
  BILLING_MODE_TYPE_REFKEY      VARCHAR2(50 BYTE),
  FREQUENCY_OF_PAYMENT          NUMBER(19),
  LOBTYPE_REFKEY                VARCHAR2(50 BYTE),
  LOB_DESCRIPTION               VARCHAR2(100 BYTE),
  SOURCE_SYSTEM_REFKEY          VARCHAR2(50 BYTE),
  SOURCE_ACCOUNT_ID             VARCHAR2(50 BYTE),
  MANAGEDBY_BU_CODE             VARCHAR2(30 BYTE),
  MANAGEDBY_BU_ID               VARCHAR2(30 BYTE),
  BRANCH_CODE_REFKEY            VARCHAR2(50 BYTE),
  ACCOUNT_NAME                  VARCHAR2(50 BYTE) NOT NULL,
  ACCOUNT_NAME2                 VARCHAR2(50 BYTE),
  ACCOUNT_DESCRIPTION           VARCHAR2(100 BYTE),
  ACCOUNT_SOURCE_STATUS_REFKEY  VARCHAR2(50 BYTE),
  ACCOUNT_MDM_STATUS_REFKEY     VARCHAR2(50 BYTE),
  SIGNED_DATE                   DATE,
  SIGNED_PLACE                  DATE,
  EXECUTED_DATE                 DATE,
  TERMINATED_DATE               DATE,
  TERMINATION_REASON_REFKEY     VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_ACCOUNT_ADDRESS_ASSOC
(
  AUDITLOG_ID_PK          VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS     TIMESTAMP(6)          NOT NULL,
  AUDITLOG_ACTION_CODE    CHAR(1 BYTE)          NOT NULL,
  ID_PK                   VARCHAR2(50 BYTE),
  VERSION                 NUMBER                NOT NULL,
  CREATED_TS              TIMESTAMP(6)          NOT NULL,
  DELETED_TS              TIMESTAMP(6),
  UPDATED_TS              TIMESTAMP(6)          NOT NULL,
  UPDATED_BY_USER         VARCHAR2(50 BYTE)     NOT NULL,
  UPDATED_BY_TXN_ID       VARCHAR2(100 BYTE),
  ACCOUNT_IDPK            VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_IDPK            VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_TYPE_REFKEY     VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_SUBTYPE_REFKEY  VARCHAR2(50 BYTE)     NOT NULL,
  PREFERRED_FLAG          VARCHAR2(1 BYTE),
  SOLICITATION_FLAG       VARCHAR2(1 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_ACCOUNT_PHONE_ASSOC
(
  AUDITLOG_ID_PK           VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS      TIMESTAMP(6)         NOT NULL,
  AUDITLOG_ACTION_CODE     CHAR(1 BYTE)         NOT NULL,
  ID_PK                    VARCHAR2(50 BYTE),
  VERSION                  NUMBER               NOT NULL,
  CREATED_TS               TIMESTAMP(6)         NOT NULL,
  DELETED_TS               TIMESTAMP(6),
  UPDATED_TS               TIMESTAMP(6)         NOT NULL,
  UPDATED_BY_USER          VARCHAR2(50 BYTE)    NOT NULL,
  UPDATED_BY_TXN_ID        VARCHAR2(100 BYTE),
  ACCOUNT_IDPK             VARCHAR2(50 BYTE)    NOT NULL,
  PHONE_TYPE_REFKEY        VARCHAR2(50 BYTE)    NOT NULL,
  PHONE_SUBTYPE_REFKEY     VARCHAR2(50 BYTE),
  PREFERRED_FLAG           VARCHAR2(1 BYTE),
  PHONE_NUMBER             VARCHAR2(30 BYTE)    NOT NULL,
  PHONE_STANDARDIZED_IDPK  VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_ADDRESS
(
  AUDITLOG_ID_PK               VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS          TIMESTAMP(6)     NOT NULL,
  AUDITLOG_ACTION_CODE         CHAR(1 BYTE)     NOT NULL,
  ID_PK                        VARCHAR2(50 BYTE),
  VERSION                      NUMBER           NOT NULL,
  CREATED_TS                   TIMESTAMP(6)     NOT NULL,
  DELETED_TS                   TIMESTAMP(6),
  UPDATED_TS                   TIMESTAMP(6)     NOT NULL,
  UPDATED_BY_USER              VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID            VARCHAR2(100 BYTE),
  ADDRESS_LINE_ONE             VARCHAR2(100 BYTE) NOT NULL,
  ADDRESS_LINE_TWO             VARCHAR2(100 BYTE),
  ADDRESS_LINE_THREE           VARCHAR2(100 BYTE),
  ADDRESS_LINE_FOUR            VARCHAR2(100 BYTE),
  STREET_NUMBER                VARCHAR2(30 BYTE),
  STREET_NAME                  VARCHAR2(50 BYTE),
  HOUSE_NUMBER                 VARCHAR2(30 BYTE),
  BUILDING_NUMBER              VARCHAR2(30 BYTE),
  COUNTY                       VARCHAR2(50 BYTE),
  CITY                         VARCHAR2(100 BYTE) NOT NULL,
  DISTRICT_ZONE                VARCHAR2(100 BYTE),
  STATE_PROVINCE_REFKEY        VARCHAR2(50 BYTE),
  COUNTRY_REFKEY               VARCHAR2(50 BYTE) NOT NULL,
  POSTAL_CODE                  VARCHAR2(30 BYTE),
  NEAREST_LANDMARK             VARCHAR2(50 BYTE),
  BOX_DESIGNATOR               VARCHAR2(50 BYTE),
  BOX_IDENTIFIER               VARCHAR2(50 BYTE),
  NEAREST_RAILWAY_STATION      VARCHAR2(50 BYTE),
  NEAREST_AIRPORT              VARCHAR2(50 BYTE),
  PHONETIC_ADDRESS_LINE_ONE    VARCHAR2(50 BYTE),
  PHONETIC_ADDRESS_LINE_TWO    VARCHAR2(50 BYTE),
  PHONETIC_ADDRESS_LINE_THREE  VARCHAR2(50 BYTE),
  PHONETIC_ADDRESS_LINE_FOUR   VARCHAR2(50 BYTE),
  PHONETIC_STREET_NAME         VARCHAR2(50 BYTE),
  PHONETIC_COUNTY              VARCHAR2(50 BYTE),
  PHONETIC_CITY                VARCHAR2(100 BYTE),
  PHONETIC_DISTRICT_ZONE       VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_AUTH_ROLES_REGISTRY
(
  AUDITLOG_ID_PK        VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS   TIMESTAMP(6)            NOT NULL,
  AUDITLOG_ACTION_CODE  CHAR(1 BYTE)            NOT NULL,
  ID_PK                 VARCHAR2(50 BYTE),
  VERSION               NUMBER                  NOT NULL,
  CREATED_TS            TIMESTAMP(6)            NOT NULL,
  DELETED_TS            TIMESTAMP(6),
  UPDATED_TS            TIMESTAMP(6)            NOT NULL,
  UPDATED_BY_USER       VARCHAR2(50 BYTE)       NOT NULL,
  UPDATED_BY_TXN_ID     VARCHAR2(100 BYTE),
  ROLE_NAME             VARCHAR2(100 CHAR)      NOT NULL,
  DESCRIPTION           VARCHAR2(150 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_AUTH_USERROLE_ACCESSCONTROL
(
  AUDITLOG_ID_PK                VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS           TIMESTAMP(6)    NOT NULL,
  AUDITLOG_ACTION_CODE          CHAR(1 BYTE)    NOT NULL,
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  PROFILE_TYPE                  VARCHAR2(20 CHAR) NOT NULL,
  AUTH_USER_ROLE_REGISTRY_IDPK  VARCHAR2(50 CHAR) NOT NULL,
  CONFIG_TXN_REGISTRY_IDPK      VARCHAR2(50 CHAR) NOT NULL,
  DESCRIPTION                   VARCHAR2(150 CHAR)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_AUTH_USER_REGISTRY
(
  AUDITLOG_ID_PK        VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS   TIMESTAMP(6)            NOT NULL,
  AUDITLOG_ACTION_CODE  CHAR(1 BYTE)            NOT NULL,
  ID_PK                 VARCHAR2(50 BYTE),
  VERSION               NUMBER                  NOT NULL,
  CREATED_TS            TIMESTAMP(6)            NOT NULL,
  DELETED_TS            TIMESTAMP(6),
  UPDATED_TS            TIMESTAMP(6)            NOT NULL,
  UPDATED_BY_USER       VARCHAR2(50 BYTE)       NOT NULL,
  UPDATED_BY_TXN_ID     VARCHAR2(100 BYTE),
  USER_NAME             VARCHAR2(100 CHAR)      NOT NULL,
  DESCRIPTION           VARCHAR2(150 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_AUTH_USER_ROLE_ASSOC
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  AUTH_USER_REGISTRY_IDPK   VARCHAR2(50 BYTE)   NOT NULL,
  AUTH_ROLES_REGISTRY_IDPK  VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(150 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_BATCH_ENTITY_TO_PROCESS
(
  AUDITLOG_ID_PK                VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS           TIMESTAMP(6)    NOT NULL,
  AUDITLOG_ACTION_CODE          CHAR(1 BYTE)    NOT NULL,
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  ENTITY_OBJECT_TYPE_REFKEY     VARCHAR2(50 BYTE) NOT NULL,
  ENTITY_IDPK                   VARCHAR2(50 BYTE) NOT NULL,
  BATCH_PROPOSED_ACTION_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  BATCH_ACTION_STATUS_REFKEY    VARCHAR2(50 BYTE) NOT NULL,
  PROCESS_AFTER_TIMESTAMP       TIMESTAMP(6),
  PROCESS_BEFORE_TIMESTAMP      TIMESTAMP(6),
  ENTRY_MADE_BY_SUBSYSTEM_NAME  VARCHAR2(50 BYTE) NOT NULL,
  COMMENTS                      VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_CONFIG_APP_PROPERTIES
(
  AUDITLOG_ID_PK        VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS   TIMESTAMP(6)            NOT NULL,
  AUDITLOG_ACTION_CODE  CHAR(1 BYTE)            NOT NULL,
  ID_PK                 VARCHAR2(50 BYTE),
  VERSION               NUMBER                  NOT NULL,
  CREATED_TS            TIMESTAMP(6)            NOT NULL,
  DELETED_TS            TIMESTAMP(6),
  UPDATED_TS            TIMESTAMP(6)            NOT NULL,
  UPDATED_BY_USER       VARCHAR2(50 BYTE)       NOT NULL,
  UPDATED_BY_TXN_ID     VARCHAR2(100 BYTE),
  KEY                   VARCHAR2(150 BYTE)      NOT NULL,
  VALUE                 VARCHAR2(150 BYTE)      NOT NULL,
  VALUE_DEFAULT         VARCHAR2(150 BYTE),
  DESCRIPTION           VARCHAR2(250 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_CONFIG_ERRORCODE_REGISTRY
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE),
  ERROR_CODE                VARCHAR2(50 BYTE),
  ERROR_MESSAGE             VARCHAR2(200 BYTE),
  DESCRIPTION               VARCHAR2(200 BYTE),
  CREATED_TS                TIMESTAMP(6),
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_CONFIG_INQUIRY_LEVELS
(
  AUDITLOG_ID_PK        VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS   TIMESTAMP(6)            NOT NULL,
  AUDITLOG_ACTION_CODE  CHAR(1 BYTE)            NOT NULL,
  ID_PK                 VARCHAR2(50 BYTE),
  VERSION               NUMBER                  NOT NULL,
  CREATED_TS            TIMESTAMP(6)            NOT NULL,
  DELETED_TS            TIMESTAMP(6),
  UPDATED_TS            TIMESTAMP(6)            NOT NULL,
  UPDATED_BY_USER       VARCHAR2(50 BYTE)       NOT NULL,
  UPDATED_BY_TXN_ID     VARCHAR2(100 BYTE),
  INQUIRY_LEVEL         VARCHAR2(20 BYTE)       NOT NULL,
  APPLICABLE_DOBJ       VARCHAR2(100 BYTE)      NOT NULL,
  CHILD_DOBJ            VARCHAR2(100 BYTE)      NOT NULL,
  DESCRIPTION           VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_CONFIG_LANGUAGE_CODE
(
  AUDITLOG_ID_PK        VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS   TIMESTAMP(6)            NOT NULL,
  AUDITLOG_ACTION_CODE  CHAR(1 BYTE)            NOT NULL,
  ID_PK                 VARCHAR2(50 BYTE),
  VERSION               NUMBER                  NOT NULL,
  CREATED_TS            TIMESTAMP(6)            NOT NULL,
  DELETED_TS            TIMESTAMP(6),
  UPDATED_TS            TIMESTAMP(6)            NOT NULL,
  UPDATED_BY_USER       VARCHAR2(50 BYTE)       NOT NULL,
  UPDATED_BY_TXN_ID     VARCHAR2(100 BYTE),
  KEY                   VARCHAR2(50 BYTE),
  VALUE                 VARCHAR2(50 BYTE),
  DESCRIPTION           VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_CONFIG_TXN_REGISTRY
(
  AUDITLOG_ID_PK          VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS     TIMESTAMP(6)          NOT NULL,
  AUDITLOG_ACTION_CODE    CHAR(1 BYTE)          NOT NULL,
  ID_PK                   VARCHAR2(50 BYTE),
  VERSION                 NUMBER                NOT NULL,
  TXNSERVICE_NAME         VARCHAR2(50 BYTE),
  TXNSERVICE_CLASS        VARCHAR2(200 BYTE),
  TXNSERVICE_CLASSMETHOD  VARCHAR2(100 BYTE),
  DESCRIPTION             VARCHAR2(200 BYTE),
  CREATED_TS              TIMESTAMP(6)          NOT NULL,
  DELETED_TS              TIMESTAMP(6),
  UPDATED_TS              TIMESTAMP(6)          NOT NULL,
  UPDATED_BY_USER         VARCHAR2(50 BYTE)     NOT NULL,
  UPDATED_TXN_REF_ID      VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_CORPORATIONNAMES
(
  AUDITLOG_ID_PK                VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS           TIMESTAMP(6)    NOT NULL,
  AUDITLOG_ACTION_CODE          CHAR(1 BYTE)    NOT NULL,
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK              VARCHAR2(50 BYTE) NOT NULL,
  CORPORATION_NAME_TYPE_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  CORPORATION_NAME              VARCHAR2(100 BYTE) NOT NULL,
  SOURCE_SYSTEM_REFKEY          VARCHAR2(50 BYTE),
  PHONETIC_CORPORATION_NAME     VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_ENTITY_GROUP
(
  AUDITLOG_ID_PK        VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS   TIMESTAMP(6)            NOT NULL,
  AUDITLOG_ACTION_CODE  CHAR(1 BYTE)            NOT NULL,
  ID_PK                 VARCHAR2(50 BYTE),
  VERSION               NUMBER                  NOT NULL,
  CREATED_TS            TIMESTAMP(6)            NOT NULL,
  DELETED_TS            TIMESTAMP(6),
  UPDATED_TS            TIMESTAMP(6)            NOT NULL,
  UPDATED_BY_USER       VARCHAR2(50 BYTE)       NOT NULL,
  UPDATED_BY_TXN_ID     VARCHAR2(100 BYTE),
  GROUP_TYPE_REFKEY     VARCHAR2(50 BYTE)       NOT NULL,
  GROUP_SUBTYPE_REFKEY  VARCHAR2(50 BYTE),
  GROUP_NAME            VARCHAR2(50 BYTE)       NOT NULL,
  DESCRIPTION           VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_ENTITY_GROUP_ASSOC
(
  AUDITLOG_ID_PK             VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS        TIMESTAMP(6)       NOT NULL,
  AUDITLOG_ACTION_CODE       CHAR(1 BYTE)       NOT NULL,
  ID_PK                      VARCHAR2(50 BYTE),
  VERSION                    NUMBER             NOT NULL,
  CREATED_TS                 TIMESTAMP(6)       NOT NULL,
  DELETED_TS                 TIMESTAMP(6),
  UPDATED_TS                 TIMESTAMP(6)       NOT NULL,
  UPDATED_BY_USER            VARCHAR2(50 BYTE)  NOT NULL,
  UPDATED_BY_TXN_ID          VARCHAR2(100 BYTE),
  ENTITY_OBJECT_TYPE_REFKEY  VARCHAR2(50 BYTE)  NOT NULL,
  ENTITY_IDPK                VARCHAR2(50 BYTE)  NOT NULL,
  ENTITY_GROUP_IDPK          VARCHAR2(50 BYTE)  NOT NULL,
  ASSOC_TYPE_REFKEY          VARCHAR2(50 BYTE)  NOT NULL,
  DESCRIPTION                VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_INACTIVE_LE_REGISTRY
(
  AUDITLOG_ID_PK              VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS         TIMESTAMP(6)      NOT NULL,
  AUDITLOG_ACTION_CODE        CHAR(1 BYTE)      NOT NULL,
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK            VARCHAR2(50 BYTE) NOT NULL,
  INACTIVATED_TS              TIMESTAMP(6)      NOT NULL,
  INACTIVATION_REASON_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  COMMENTS                    VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LEGALENTITY
(
  AUDITLOG_ID_PK              VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS         TIMESTAMP(6)      NOT NULL,
  AUDITLOG_ACTION_CODE        CHAR(1 BYTE)      NOT NULL,
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  DISPLAY_NAME                VARCHAR2(100 BYTE) NOT NULL,
  ENTITY_OBJECT_TYPE_REFKEY   VARCHAR2(50 BYTE) NOT NULL,
  CLASSIFICATION_CODE_REFKEY  VARCHAR2(50 BYTE),
  IMPORTANCE_TYPE_REFKEY      VARCHAR2(50 BYTE),
  LE_RATING_REFKEY            VARCHAR2(50 BYTE),
  STATUS_TYPE_REFKEY          VARCHAR2(50 BYTE),
  SOURCE_SYSTEM_REFKEY        VARCHAR2(50 BYTE),
  ONBOARDING_DATE             DATE,
  OFFBOARDING_DATE            DATE,
  KYC_VERIFICATION_FLAG       VARCHAR2(1 BYTE),
  DESCRIPTION                 VARCHAR2(100 BYTE),
  PHONETIC_DISPLAY_NAME       VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LE_ACCOUNT_ASSOC
(
  AUDITLOG_ID_PK              VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS         TIMESTAMP(6)      NOT NULL,
  AUDITLOG_ACTION_CODE        CHAR(1 BYTE)      NOT NULL,
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK            VARCHAR2(50 BYTE) NOT NULL,
  LE_ROLETYPE_REFKEY          VARCHAR2(50 BYTE) NOT NULL,
  ACCOUNT_IDPK                VARCHAR2(50 BYTE) NOT NULL,
  ROLE_ACTIVATION_DATE        DATE,
  ROLE_DEACTIVATION_DATE      DATE,
  DEACTIVATION_REASON_REFKEY  VARCHAR2(50 BYTE),
  AGREEMENT_TYPE_REFKEY       VARCHAR2(50 BYTE),
  AGREEMENT_TYPE_DESCRIPTION  VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LE_ADDRESS_ASSOC
(
  AUDITLOG_ID_PK          VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS     TIMESTAMP(6)          NOT NULL,
  AUDITLOG_ACTION_CODE    CHAR(1 BYTE)          NOT NULL,
  ID_PK                   VARCHAR2(50 BYTE),
  VERSION                 NUMBER                NOT NULL,
  CREATED_TS              TIMESTAMP(6)          NOT NULL,
  DELETED_TS              TIMESTAMP(6),
  UPDATED_TS              TIMESTAMP(6)          NOT NULL,
  UPDATED_BY_USER         VARCHAR2(50 BYTE)     NOT NULL,
  UPDATED_BY_TXN_ID       VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK        VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_IDPK            VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_TYPE_REFKEY     VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_SUBTYPE_REFKEY  VARCHAR2(50 BYTE)     NOT NULL,
  PREFERRED_FLAG          VARCHAR2(1 BYTE),
  SOLICITATION_FLAG       VARCHAR2(1 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LE_CORPORATION
(
  AUDITLOG_ID_PK               VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS          TIMESTAMP(6)     NOT NULL,
  AUDITLOG_ACTION_CODE         CHAR(1 BYTE)     NOT NULL,
  LEGALENTITY_IDPK             VARCHAR2(50 BYTE) NOT NULL,
  VERSION                      NUMBER           NOT NULL,
  CREATED_TS                   TIMESTAMP(6)     NOT NULL,
  DELETED_TS                   TIMESTAMP(6),
  UPDATED_TS                   TIMESTAMP(6)     NOT NULL,
  UPDATED_BY_USER              VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID            VARCHAR2(100 BYTE),
  CLASSIFICATION_CODE_REFKEY   VARCHAR2(50 BYTE),
  INDUSTRY_CODE_REFKEY         VARCHAR2(50 BYTE),
  GOVT_REGISTRATION_DATE       DATE,
  COUNTRY_REGISTRATION_REFKEY  VARCHAR2(50 BYTE),
  NOTPROFIT_FLAG               VARCHAR2(1 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LE_IDENTIFIER_KYC_REGISTRY
(
  AUDITLOG_ID_PK              VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS         TIMESTAMP(6)      NOT NULL,
  AUDITLOG_ACTION_CODE        CHAR(1 BYTE)      NOT NULL,
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  IDENTIFICATION_TYPE_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  IDENTIFICATION_NUMBER       VARCHAR2(50 BYTE) NOT NULL,
  LEGALENTITY_IDPK            VARCHAR2(50 BYTE) NOT NULL,
  DOCUMENT                    VARCHAR2(50 BYTE),
  ISSUED_BY                   VARCHAR2(50 BYTE),
  ID_CONSIDERED_FOR_KYC_FLAG  VARCHAR2(50 BYTE),
  ISSUED_DATE                 DATE,
  SOURCE_SYSTEM_REFKEY        VARCHAR2(50 BYTE),
  IDENTITY_DESCRIPTION        VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LE_PERSON
(
  AUDITLOG_ID_PK               VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS          TIMESTAMP(6)     NOT NULL,
  AUDITLOG_ACTION_CODE         CHAR(1 BYTE)     NOT NULL,
  LEGALENTITY_IDPK             VARCHAR2(50 BYTE) NOT NULL,
  VERSION                      NUMBER           NOT NULL,
  CREATED_TS                   TIMESTAMP(6)     NOT NULL,
  DELETED_TS                   TIMESTAMP(6),
  UPDATED_TS                   TIMESTAMP(6)     NOT NULL,
  UPDATED_BY_USER              VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID            VARCHAR2(100 BYTE),
  PERSON_TYPE_REFKEY           VARCHAR2(50 BYTE),
  GENDER_REFKEY                VARCHAR2(50 BYTE),
  DATE_OF_BIRTH                DATE,
  COUNTRY_OF_BIRTH__REFKEY     VARCHAR2(50 BYTE),
  COUNTRY_CITIZENSHIP_REFKEY   VARCHAR2(50 BYTE),
  COUNTRY_OF_DOMICILE__REFKEY  VARCHAR2(50 BYTE),
  MARITAL_STATUS               VARCHAR2(30 BYTE),
  HIGHEST_EDU_QUAL_REFKEY      VARCHAR2(50 BYTE),
  IS_DECEASED_FLAG             VARCHAR2(1 BYTE),
  DECEASED_DATE                DATE,
  IS_HANDICAPPED_FLAG          VARCHAR2(1 BYTE),
  HANDICAPPED_SINCE_DATE       DATE,
  NUMBER_OF_DEPENDENTS         NUMBER,
  NUMBER_OF_CHILDREN           NUMBER,
  PREFERRED_LANGUAGE_REFKEY    VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LE_PHONE_ASSOC
(
  AUDITLOG_ID_PK           VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS      TIMESTAMP(6)         NOT NULL,
  AUDITLOG_ACTION_CODE     CHAR(1 BYTE)         NOT NULL,
  ID_PK                    VARCHAR2(50 BYTE),
  VERSION                  NUMBER               NOT NULL,
  CREATED_TS               TIMESTAMP(6)         NOT NULL,
  DELETED_TS               TIMESTAMP(6),
  UPDATED_TS               TIMESTAMP(6)         NOT NULL,
  UPDATED_BY_USER          VARCHAR2(50 BYTE)    NOT NULL,
  UPDATED_BY_TXN_ID        VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK         VARCHAR2(50 BYTE)    NOT NULL,
  PHONE_TYPE_REFKEY        VARCHAR2(50 BYTE)    NOT NULL,
  PHONE_SUBTYPE_REFKEY     VARCHAR2(50 BYTE),
  PREFERRED_FLAG           VARCHAR2(1 BYTE),
  PHONE_NUMBER             VARCHAR2(30 BYTE)    NOT NULL,
  PHONE_STANDARDIZED_IDPK  VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LE_PREFERENCES
(
  AUDITLOG_ID_PK          VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS     TIMESTAMP(6)          NOT NULL,
  AUDITLOG_ACTION_CODE    CHAR(1 BYTE)          NOT NULL,
  ID_PK                   VARCHAR2(50 BYTE),
  VERSION                 NUMBER                NOT NULL,
  CREATED_TS              TIMESTAMP(6)          NOT NULL,
  DELETED_TS              TIMESTAMP(6),
  UPDATED_TS              TIMESTAMP(6)          NOT NULL,
  UPDATED_BY_USER         VARCHAR2(50 BYTE)     NOT NULL,
  UPDATED_BY_TXN_ID       VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK        VARCHAR2(50 BYTE)     NOT NULL,
  PREFERENCE_TYPE_REFKEY  VARCHAR2(50 BYTE)     NOT NULL,
  PREF_FLAG               VARCHAR2(1 BYTE),
  PREF_DESCRIPTION        VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LE_PROPERTY_ASSOC
(
  AUDITLOG_ID_PK              VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS         TIMESTAMP(6)      NOT NULL,
  AUDITLOG_ACTION_CODE        CHAR(1 BYTE)      NOT NULL,
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  PROPERTY_IDPK               VARCHAR2(50 BYTE) NOT NULL,
  LEGALENTITY_IDPK            VARCHAR2(50 BYTE) NOT NULL,
  PROPERTY_LE_RELTYPE_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  DESCRIPTION                 VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LE_SYSTEM_KEYS_REGISTRY
(
  AUDITLOG_ID_PK           VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS      TIMESTAMP(6)         NOT NULL,
  AUDITLOG_ACTION_CODE     CHAR(1 BYTE)         NOT NULL,
  ID_PK                    VARCHAR2(50 BYTE),
  VERSION                  NUMBER               NOT NULL,
  CREATED_TS               TIMESTAMP(6)         NOT NULL,
  DELETED_TS               TIMESTAMP(6),
  UPDATED_TS               TIMESTAMP(6)         NOT NULL,
  UPDATED_BY_USER          VARCHAR2(50 BYTE)    NOT NULL,
  UPDATED_BY_TXN_ID        VARCHAR2(100 BYTE),
  SOURCE_SYSTEM_REFKEY     VARCHAR2(50 BYTE)    NOT NULL,
  REFERENCE_ID             VARCHAR2(50 BYTE)    NOT NULL,
  LEGALENTITY_IDPK         VARCHAR2(50 BYTE)    NOT NULL,
  STATUS_IN_SOURCE_REFKEY  VARCHAR2(50 BYTE),
  DESCRIPTION              VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LE_TO_LE_RELATIONSHIP
(
  AUDITLOG_ID_PK               VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS          TIMESTAMP(6)     NOT NULL,
  AUDITLOG_ACTION_CODE         CHAR(1 BYTE)     NOT NULL,
  ID_PK                        VARCHAR2(50 BYTE),
  VERSION                      NUMBER           NOT NULL,
  CREATED_TS                   TIMESTAMP(6)     NOT NULL,
  DELETED_TS                   TIMESTAMP(6),
  UPDATED_TS                   TIMESTAMP(6)     NOT NULL,
  UPDATED_BY_USER              VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID            VARCHAR2(100 BYTE),
  FROM_LEGALENTITY_IDPK        VARCHAR2(50 BYTE) NOT NULL,
  TO_LEGALENTITY_IDPK          VARCHAR2(50 BYTE) NOT NULL,
  LE_RELATIONSHIP_TYPE_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  RELATIONSHIP_STATUS_REFKEY   VARCHAR2(50 BYTE),
  RELATIONSHIP_DESCRIPTION     VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_LE_VEHICLE_ASSOC
(
  AUDITLOG_ID_PK              VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS         TIMESTAMP(6)      NOT NULL,
  AUDITLOG_ACTION_CODE        CHAR(1 BYTE)      NOT NULL,
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK            VARCHAR2(50 BYTE) NOT NULL,
  LE_ROLETYPE_REFKEY          VARCHAR2(50 BYTE) NOT NULL,
  ACCOUNT_IDPK                VARCHAR2(50 BYTE),
  ROLE_ACTIVATION_DATE        DATE,
  ROLE_DEACTIVATION_DATE      DATE,
  DEACTIVATION_REASON_REFKEY  VARCHAR2(50 BYTE),
  AGREEMENT_TYPE_REFKEY       VARCHAR2(50 BYTE),
  AGREEMENT_TYPE_DESCRIPTION  VARCHAR2(100 BYTE),
  VEHICLE_IDPK                VARCHAR2(50 BYTE) NOT NULL
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_MATCH_CANDIDATE_LE_REGISTRY
(
  AUDITLOG_ID_PK                VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS           TIMESTAMP(6)    NOT NULL,
  AUDITLOG_ACTION_CODE          CHAR(1 BYTE)    NOT NULL,
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK              VARCHAR2(50 BYTE) NOT NULL,
  CANDIDATE_LEGALENTITYIDPK     VARCHAR2(50 BYTE) NOT NULL,
  MATCH_PATTERN                 VARCHAR2(50 BYTE) NOT NULL,
  MATCH_PROPOSED_ACTION_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  MATCH_ACTIONSTATUS_REFKEY     VARCHAR2(50 BYTE) NOT NULL,
  MATCH_PERCENTAGE_DESCRIPTION  VARCHAR2(500 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_MATCH_MERGED_LE_ASSOC
(
  AUDITLOG_ID_PK             VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS        TIMESTAMP(6)       NOT NULL,
  AUDITLOG_ACTION_CODE       CHAR(1 BYTE)       NOT NULL,
  ID_PK                      VARCHAR2(50 BYTE),
  VERSION                    NUMBER             NOT NULL,
  CREATED_TS                 TIMESTAMP(6)       NOT NULL,
  DELETED_TS                 TIMESTAMP(6),
  UPDATED_TS                 TIMESTAMP(6)       NOT NULL,
  UPDATED_BY_USER            VARCHAR2(50 BYTE)  NOT NULL,
  UPDATED_BY_TXN_ID          VARCHAR2(100 BYTE),
  SURVIVOR_LEGALENTITY_IDPK  VARCHAR2(50 BYTE)  NOT NULL,
  MERGED_LEGALENTITY_IDPK    VARCHAR2(50 BYTE)  NOT NULL,
  MERGE_REASON_REFKEY        VARCHAR2(50 BYTE)  NOT NULL,
  COMMENTS                   VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_MISCELLANEOUS_INFO
(
  AUDITLOG_ID_PK             VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS        TIMESTAMP(6)       NOT NULL,
  AUDITLOG_ACTION_CODE       CHAR(1 BYTE)       NOT NULL,
  ID_PK                      VARCHAR2(50 BYTE),
  VERSION                    NUMBER             NOT NULL,
  CREATED_TS                 TIMESTAMP(6)       NOT NULL,
  DELETED_TS                 TIMESTAMP(6),
  UPDATED_TS                 TIMESTAMP(6)       NOT NULL,
  UPDATED_BY_USER            VARCHAR2(50 BYTE)  NOT NULL,
  UPDATED_BY_TXN_ID          VARCHAR2(100 BYTE),
  ENTITY_OBJECT_TYPE_REFKEY  VARCHAR2(50 BYTE)  NOT NULL,
  ENTITY_IDPK                VARCHAR2(50 BYTE)  NOT NULL,
  NAME1                      VARCHAR2(50 BYTE)  NOT NULL,
  VALUE1                     VARCHAR2(50 BYTE)  NOT NULL,
  NAME2                      VARCHAR2(50 BYTE),
  VALUE2                     VARCHAR2(50 BYTE),
  NAME3                      VARCHAR2(50 BYTE),
  VALUE3                     VARCHAR2(50 BYTE),
  NAME4                      VARCHAR2(50 BYTE),
  VALUE4                     VARCHAR2(50 BYTE),
  NAME5                      VARCHAR2(50 BYTE),
  VALUE5                     VARCHAR2(50 BYTE),
  NAME6                      VARCHAR2(50 BYTE),
  VALUE6                     VARCHAR2(50 BYTE),
  NAME7                      VARCHAR2(50 BYTE),
  VALUE7                     VARCHAR2(50 BYTE),
  NAME8                      VARCHAR2(50 BYTE),
  VALUE8                     VARCHAR2(50 BYTE),
  NAME9                      VARCHAR2(50 BYTE),
  VALUE9                     VARCHAR2(50 BYTE),
  NAME10                     VARCHAR2(50 BYTE),
  VALUE10                    VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_PERSONNAMES
(
  AUDITLOG_ID_PK          VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS     TIMESTAMP(6)          NOT NULL,
  AUDITLOG_ACTION_CODE    CHAR(1 BYTE)          NOT NULL,
  ID_PK                   VARCHAR2(50 BYTE),
  VERSION                 NUMBER                NOT NULL,
  CREATED_TS              TIMESTAMP(6)          NOT NULL,
  DELETED_TS              TIMESTAMP(6),
  UPDATED_TS              TIMESTAMP(6)          NOT NULL,
  UPDATED_BY_USER         VARCHAR2(50 BYTE)     NOT NULL,
  UPDATED_BY_TXN_ID       VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK        VARCHAR2(50 BYTE)     NOT NULL,
  PERSONNAME_TYPE_REFKEY  VARCHAR2(50 BYTE)     NOT NULL,
  PREFIX_NAME_REFKEY      VARCHAR2(50 BYTE),
  PREFIX_MISC             VARCHAR2(30 BYTE),
  NAME_ONE                VARCHAR2(50 BYTE)     NOT NULL,
  NAME_TWO                VARCHAR2(50 BYTE),
  NAME_THREE              VARCHAR2(50 BYTE),
  NAME_FOUR               VARCHAR2(50 BYTE),
  LAST_NAME               VARCHAR2(50 BYTE),
  NICK_NAME               VARCHAR2(50 BYTE),
  POPULAR_NAME            VARCHAR2(50 BYTE),
  SUFFIX_NAME_REFKEY      VARCHAR2(50 BYTE),
  SUFFIX_MISC             VARCHAR2(30 BYTE),
  NAME_STANDARDISED_FLAG  VARCHAR2(1 BYTE),
  SOURCE_SYSTEM_REFKEY    VARCHAR2(50 BYTE),
  PHONETIC_NAME_ONE       VARCHAR2(50 BYTE),
  PHONETIC_NAME_TWO       VARCHAR2(50 BYTE),
  PHONETIC_NAME_THREE     VARCHAR2(50 BYTE),
  PHONETIC_LAST_NAME      VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_PHONE_STANDARDIZED
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  ITU_COUNTRY_CALLING_CODE  VARCHAR2(4 BYTE),
  AREA_CODE                 VARCHAR2(6 BYTE),
  EXCHANGE                  VARCHAR2(6 BYTE),
  PHONE_NUMBER              VARCHAR2(20 BYTE),
  EXTENSION                 VARCHAR2(8 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_PROPERTY
(
  AUDITLOG_ID_PK        VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS   TIMESTAMP(6)            NOT NULL,
  AUDITLOG_ACTION_CODE  CHAR(1 BYTE)            NOT NULL,
  ID_PK                 VARCHAR2(50 BYTE),
  VERSION               NUMBER                  NOT NULL,
  CREATED_TS            TIMESTAMP(6)            NOT NULL,
  DELETED_TS            TIMESTAMP(6),
  UPDATED_TS            TIMESTAMP(6)            NOT NULL,
  UPDATED_BY_USER       VARCHAR2(50 BYTE)       NOT NULL,
  UPDATED_BY_TXN_ID     VARCHAR2(100 BYTE),
  PROPERTY_NAME         VARCHAR2(100 BYTE)      NOT NULL,
  ADDRESS_IDPK          VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_ACCOUNT_MDM_STATUS
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_ACCOUNT_SOURCE_STATUS
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_ADDRESS_SUBTYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_ADDRESS_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_AGREEMENT_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_ASSOC_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_BATCH_ACTION_STATUS
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_BATCH_PROPOSED_ACTION
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_BILLING_MODE_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_BRANCH_CODE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_CLASSIFICATION_CODE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_CORPORATION_NAME_TYP
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_CORPORATION_NAME_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_CORPORATION_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_COUNTRY_ISO
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_CURRENCY
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_DEACTIVATION_REASON
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_ENTITY_OBJECT_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_GENDER
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_GROUP_SUBTYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_GROUP_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_HIGHEST_EDU_QUAL
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_IDENTIFICATION_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_IMPORTANCE_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_INACTIVATION_REASON
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_INDUSTRY_CODE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_LANGUAGE_CODE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE),
  VALUE                     VARCHAR2(50 BYTE),
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_LE_RATING
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_LE_RELATIONSHIP_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_LE_ROLETYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_LOBTYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_MATCH_ACTIONSTATUS
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_MATCH_PROPOSED_ACTION
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_MATCH_RESULT
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_MATCH_SCORE
(
  AUDITLOG_ID_PK                VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS           TIMESTAMP(6)    NOT NULL,
  AUDITLOG_ACTION_CODE          CHAR(1 BYTE)    NOT NULL,
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  MATCH_ENTITY_OBJECT_NAME      VARCHAR2(100 BYTE) NOT NULL,
  MATCH_ATTR_PATTERN            VARCHAR2(50 BYTE) NOT NULL,
  MATCH_RESULT_REFKEY           VARCHAR2(50 BYTE) NOT NULL,
  MATCH_PROPOSED_ACTION_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  MATCH_ATTR_PATTERN_DESCR      VARCHAR2(500 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_MATCH_THRESHOLD
(
  AUDITLOG_ID_PK           VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS      TIMESTAMP(6)         NOT NULL,
  AUDITLOG_ACTION_CODE     CHAR(1 BYTE)         NOT NULL,
  ID_PK                    VARCHAR2(50 BYTE),
  VERSION                  NUMBER               NOT NULL,
  CREATED_TS               TIMESTAMP(6)         NOT NULL,
  DELETED_TS               TIMESTAMP(6),
  UPDATED_TS               TIMESTAMP(6)         NOT NULL,
  UPDATED_BY_USER          VARCHAR2(50 BYTE)    NOT NULL,
  UPDATED_BY_TXN_ID        VARCHAR2(100 BYTE),
  ATTR_BLOCK_NAME          VARCHAR2(100 BYTE)   NOT NULL,
  MATCH_THRESHOLD          NUMBER               NOT NULL,
  DECAY_THRESHOLD_IN_DAYS  NUMBER               NOT NULL,
  DECAY_PERCENTAGE         NUMBER(11,8)         NOT NULL,
  MAX_DECAY_PERCENTAGE     NUMBER               NOT NULL
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_MERGE_REASON
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_PERSONNAME_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_PERSON_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_PHONE_SUBTYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_PHONE_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_PREFERENCE_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_PREFIX_NAME
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_PROPERTY_LE_RELTYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_RELATIONSHIP_STATUS
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_SOURCE_SYSTEM
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_STATE_PROVINCE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE),
  COUNTRY_ISO_REFKEY        VARCHAR2(50 BYTE)   NOT NULL
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_STATUS_IN_SOURCE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_STATUS_TYPE
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_SUFFIX_NAME
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_REF_TERMINATION_REASON
(
  AUDITLOG_ID_PK            VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS       TIMESTAMP(6)        NOT NULL,
  AUDITLOG_ACTION_CODE      CHAR(1 BYTE)        NOT NULL,
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AL_VEHICLE
(
  AUDITLOG_ID_PK                  VARCHAR2(50 BYTE),
  AUDITLOG_CREATED_TS             TIMESTAMP(6)  NOT NULL,
  AUDITLOG_ACTION_CODE            CHAR(1 BYTE)  NOT NULL,
  ID_PK                           VARCHAR2(50 BYTE),
  VERSION                         NUMBER        NOT NULL,
  CREATED_TS                      TIMESTAMP(6)  NOT NULL,
  DELETED_TS                      TIMESTAMP(6),
  UPDATED_TS                      TIMESTAMP(6)  NOT NULL,
  UPDATED_BY_USER                 VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID               VARCHAR2(100 BYTE),
  VIN_NUMBER                      VARCHAR2(100 BYTE) NOT NULL,
  CHASSIS_NUMBER                  VARCHAR2(100 BYTE),
  MAKE                            VARCHAR2(30 BYTE),
  MODEL                           VARCHAR2(30 BYTE),
  YEAR                            VARCHAR2(30 BYTE),
  INTERIOR_COLOR                  VARCHAR2(30 BYTE),
  EXTERIOR_COLOR                  VARCHAR2(30 BYTE),
  REGISTRATION_NUMBER             VARCHAR2(30 BYTE),
  COUNTRY_OF_REGISTRATION_REFKEY  VARCHAR2(30 BYTE),
  INSURANCE_ISSUED_BY             VARCHAR2(50 BYTE),
  INSURANCE_ISSUED_DATE           DATE,
  INSURANCE_EXPIRY_DATE           DATE
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.AUTH_ROLES_REGISTRY
(
  ID_PK              VARCHAR2(50 BYTE),
  VERSION            NUMBER                     NOT NULL,
  CREATED_TS         TIMESTAMP(6)               NOT NULL,
  DELETED_TS         TIMESTAMP(6),
  UPDATED_TS         TIMESTAMP(6)               NOT NULL,
  UPDATED_BY_USER    VARCHAR2(50 BYTE)          NOT NULL,
  UPDATED_BY_TXN_ID  VARCHAR2(100 BYTE),
  ROLE_NAME          VARCHAR2(100 CHAR)         NOT NULL,
  DESCRIPTION        VARCHAR2(150 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.AUTH_ROLES_REGISTRY IS 'This Table stores the Authorization roles';

COMMENT ON COLUMN MDM_OWNER.AUTH_ROLES_REGISTRY.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.AUTH_ROLES_REGISTRY.VERSION IS 'VERSION attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.AUTH_ROLES_REGISTRY.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_ROLES_REGISTRY.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_ROLES_REGISTRY.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.AUTH_ROLES_REGISTRY.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.AUTH_ROLES_REGISTRY.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_ROLES_REGISTRY.ROLE_NAME IS 'Name of the role';

COMMENT ON COLUMN MDM_OWNER.AUTH_ROLES_REGISTRY.DESCRIPTION IS 'description of the role';



CREATE TABLE MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL
(
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  PROFILE_TYPE                  VARCHAR2(20 CHAR) NOT NULL,
  AUTH_USER_ROLE_REGISTRY_IDPK  VARCHAR2(50 CHAR) NOT NULL,
  CONFIG_TXN_REGISTRY_IDPK      VARCHAR2(50 CHAR) NOT NULL,
  DESCRIPTION                   VARCHAR2(150 CHAR)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL IS 'This table stores the user/role to txn mapping so that execution of the transaction is controlled based on the transaction being invoked from the request. PROFILE_TYPE can be either USER or ROLE, mention the IDPK of the AUTH_ROLES_REGISTRY if PROFILE_TYPE is role else mention the IDPK of AUTH_USER_REGISTRY if PROFILE_TYPE is USER';

COMMENT ON COLUMN MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL.VERSION IS 'VERSION attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL.PROFILE_TYPE IS 'Type of profile, can be either USER or ROLE';

COMMENT ON COLUMN MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL.AUTH_USER_ROLE_REGISTRY_IDPK IS ' mention the IDPK of the AUTH_ROLES_REGISTRY if PROFILE_TYPE is role else mention the IDPK of AUTH_USER_REGISTRY if PROFILE_TYPE is USER';

COMMENT ON COLUMN MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL.CONFIG_TXN_REGISTRY_IDPK IS 'IDPK of the CONFIG_TXN_REGISTRY table';

COMMENT ON COLUMN MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL.DESCRIPTION IS 'description';



CREATE TABLE MDM_OWNER.AUTH_USER_REGISTRY
(
  ID_PK              VARCHAR2(50 BYTE),
  VERSION            NUMBER                     NOT NULL,
  CREATED_TS         TIMESTAMP(6)               NOT NULL,
  DELETED_TS         TIMESTAMP(6),
  UPDATED_TS         TIMESTAMP(6)               NOT NULL,
  UPDATED_BY_USER    VARCHAR2(50 BYTE)          NOT NULL,
  UPDATED_BY_TXN_ID  VARCHAR2(100 BYTE),
  USER_NAME          VARCHAR2(100 CHAR)         NOT NULL,
  DESCRIPTION        VARCHAR2(150 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.AUTH_USER_REGISTRY IS 'This table stores the user names';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_REGISTRY.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_REGISTRY.VERSION IS 'VERSION attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_REGISTRY.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_REGISTRY.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_REGISTRY.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_REGISTRY.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_REGISTRY.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_REGISTRY.USER_NAME IS 'user name';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_REGISTRY.DESCRIPTION IS 'description of the user';



CREATE TABLE MDM_OWNER.AUTH_USER_ROLE_ASSOC
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  AUTH_USER_REGISTRY_IDPK   VARCHAR2(50 BYTE)   NOT NULL,
  AUTH_ROLES_REGISTRY_IDPK  VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(150 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.AUTH_USER_ROLE_ASSOC IS 'This table stores the user to role association.';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_ROLE_ASSOC.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_ROLE_ASSOC.VERSION IS 'VERSION attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_ROLE_ASSOC.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_ROLE_ASSOC.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_ROLE_ASSOC.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_ROLE_ASSOC.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_ROLE_ASSOC.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_ROLE_ASSOC.AUTH_USER_REGISTRY_IDPK IS 'IDPK of AUTH_USER_REGISTRY table to identify the user';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_ROLE_ASSOC.AUTH_ROLES_REGISTRY_IDPK IS 'IDPK of AUTH_ROLES_REGISTRY table to identify the role';

COMMENT ON COLUMN MDM_OWNER.AUTH_USER_ROLE_ASSOC.DESCRIPTION IS 'description of the association if any';



CREATE TABLE MDM_OWNER.BATCH_ENTITY_TO_PROCESS
(
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  ENTITY_OBJECT_TYPE_REFKEY     VARCHAR2(50 BYTE) NOT NULL,
  ENTITY_IDPK                   VARCHAR2(50 BYTE) NOT NULL,
  BATCH_PROPOSED_ACTION_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  BATCH_ACTION_STATUS_REFKEY    VARCHAR2(50 BYTE) NOT NULL,
  PROCESS_AFTER_TIMESTAMP       TIMESTAMP(6),
  PROCESS_BEFORE_TIMESTAMP      TIMESTAMP(6),
  ENTRY_MADE_BY_SUBSYSTEM_NAME  VARCHAR2(50 BYTE) NOT NULL,
  COMMENTS                      VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.BATCH_ENTITY_TO_PROCESS IS 'This table stores the list of entities to be processed by batch processor. TheBATCH_PROPOSED_ACTION_REFKEY attribute defines the action to be taken on the record. BATCH_ACTION_STATUS_REFKEY defines the action taken on the record and this attribute must be updated with latest status after batch process pick up and process the record.';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.VERSION IS 'attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.ENTITY_OBJECT_TYPE_REFKEY IS 'This attribute defines the type of entity, FK of REF_ENTITY_OBJECT_TYPE table';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.ENTITY_IDPK IS 'The ID_PK of the specified entity';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.BATCH_PROPOSED_ACTION_REFKEY IS 'The action proposed on the entity, this is FK referring to REF_BATCH_PROPOSED_ACTION';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.BATCH_ACTION_STATUS_REFKEY IS 'The status of the action taken,  this is FK referring to REF_BATCH_ACTION_STATUS';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.PROCESS_AFTER_TIMESTAMP IS 'The timestamp which is used to define if this record must be processed after perticular date-time. i.e. This record should not be picked up for processing only after specifc date-time';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.PROCESS_BEFORE_TIMESTAMP IS 'The timestamp which is used to define if this record must be processed before perticular date-timei.e. This record should not be picked if the specifc date-time is reached';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.ENTRY_MADE_BY_SUBSYSTEM_NAME IS 'The name of the subsusystem which made an entry of this perticular record. It may be user, Match and Merge framework, batch load utility etc';

COMMENT ON COLUMN MDM_OWNER.BATCH_ENTITY_TO_PROCESS.COMMENTS IS 'This attribute is used to store any generic comment for the record';



CREATE TABLE MDM_OWNER.CONFIG_APP_PROPERTIES
(
  ID_PK              VARCHAR2(50 BYTE),
  VERSION            NUMBER                     NOT NULL,
  CREATED_TS         TIMESTAMP(6)               NOT NULL,
  DELETED_TS         TIMESTAMP(6),
  UPDATED_TS         TIMESTAMP(6)               NOT NULL,
  UPDATED_BY_USER    VARCHAR2(50 BYTE)          NOT NULL,
  UPDATED_BY_TXN_ID  VARCHAR2(100 BYTE),
  KEY                VARCHAR2(150 BYTE)         NOT NULL,
  VALUE              VARCHAR2(150 BYTE)         NOT NULL,
  VALUE_DEFAULT      VARCHAR2(150 BYTE),
  DESCRIPTION        VARCHAR2(250 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.CONFIG_APP_PROPERTIES IS 'The table stores the application properties, should not be changed unless needed';

COMMENT ON COLUMN MDM_OWNER.CONFIG_APP_PROPERTIES.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.CONFIG_APP_PROPERTIES.VERSION IS 'VERSION attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.CONFIG_APP_PROPERTIES.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_APP_PROPERTIES.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_APP_PROPERTIES.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.CONFIG_APP_PROPERTIES.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.CONFIG_APP_PROPERTIES.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_APP_PROPERTIES.KEY IS 'The name of the property';

COMMENT ON COLUMN MDM_OWNER.CONFIG_APP_PROPERTIES.VALUE IS 'The value of the property';

COMMENT ON COLUMN MDM_OWNER.CONFIG_APP_PROPERTIES.VALUE_DEFAULT IS 'The default value of the property';

COMMENT ON COLUMN MDM_OWNER.CONFIG_APP_PROPERTIES.DESCRIPTION IS 'Description of the property';



CREATE TABLE MDM_OWNER.CONFIG_ERRORCODE_REGISTRY
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE),
  ERROR_CODE                VARCHAR2(50 BYTE),
  ERROR_MESSAGE             VARCHAR2(200 BYTE),
  DESCRIPTION               VARCHAR2(200 BYTE),
  CREATED_TS                TIMESTAMP(6),
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.CONFIG_ERRORCODE_REGISTRY IS 'This table stores all the error code and error messages being referred in MDM application';

COMMENT ON COLUMN MDM_OWNER.CONFIG_ERRORCODE_REGISTRY.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.CONFIG_ERRORCODE_REGISTRY.VERSION IS 'attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.CONFIG_ERRORCODE_REGISTRY.CONFIG_LANGUAGE_CODE_KEY IS 'The key of the CONFIG_LANGUAGE_CODE table, used for multilingual support';

COMMENT ON COLUMN MDM_OWNER.CONFIG_ERRORCODE_REGISTRY.ERROR_CODE IS 'The key value of the error code defined';

COMMENT ON COLUMN MDM_OWNER.CONFIG_ERRORCODE_REGISTRY.ERROR_MESSAGE IS 'The message of the perticular error code';

COMMENT ON COLUMN MDM_OWNER.CONFIG_ERRORCODE_REGISTRY.DESCRIPTION IS 'The description of the error code';

COMMENT ON COLUMN MDM_OWNER.CONFIG_ERRORCODE_REGISTRY.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_ERRORCODE_REGISTRY.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_ERRORCODE_REGISTRY.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.CONFIG_ERRORCODE_REGISTRY.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.CONFIG_ERRORCODE_REGISTRY.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';



CREATE TABLE MDM_OWNER.CONFIG_INQUIRY_LEVELS
(
  ID_PK              VARCHAR2(50 BYTE),
  VERSION            NUMBER                     NOT NULL,
  CREATED_TS         TIMESTAMP(6)               NOT NULL,
  DELETED_TS         TIMESTAMP(6),
  UPDATED_TS         TIMESTAMP(6)               NOT NULL,
  UPDATED_BY_USER    VARCHAR2(50 BYTE)          NOT NULL,
  UPDATED_BY_TXN_ID  VARCHAR2(100 BYTE),
  INQUIRY_LEVEL      VARCHAR2(20 BYTE)          NOT NULL,
  APPLICABLE_DOBJ    VARCHAR2(100 BYTE)         NOT NULL,
  CHILD_DOBJ         VARCHAR2(100 BYTE)         NOT NULL,
  DESCRIPTION        VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.CONFIG_INQUIRY_LEVELS IS 'The table is used to configure the inquiry level related to any transaction.';

COMMENT ON COLUMN MDM_OWNER.CONFIG_INQUIRY_LEVELS.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.CONFIG_INQUIRY_LEVELS.VERSION IS 'VERSION attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.CONFIG_INQUIRY_LEVELS.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_INQUIRY_LEVELS.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_INQUIRY_LEVELS.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.CONFIG_INQUIRY_LEVELS.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.CONFIG_INQUIRY_LEVELS.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_INQUIRY_LEVELS.INQUIRY_LEVEL IS 'The inquiry level';

COMMENT ON COLUMN MDM_OWNER.CONFIG_INQUIRY_LEVELS.APPLICABLE_DOBJ IS 'The name of the Data Object to which respective inquiry level is applicable';

COMMENT ON COLUMN MDM_OWNER.CONFIG_INQUIRY_LEVELS.CHILD_DOBJ IS 'The child  Data Object of the applicable Data Object ';

COMMENT ON COLUMN MDM_OWNER.CONFIG_INQUIRY_LEVELS.DESCRIPTION IS 'Description if any';



CREATE TABLE MDM_OWNER.CONFIG_LANGUAGE_CODE
(
  ID_PK              VARCHAR2(50 BYTE),
  VERSION            NUMBER                     NOT NULL,
  CREATED_TS         TIMESTAMP(6)               NOT NULL,
  DELETED_TS         TIMESTAMP(6),
  UPDATED_TS         TIMESTAMP(6)               NOT NULL,
  UPDATED_BY_USER    VARCHAR2(50 BYTE)          NOT NULL,
  UPDATED_BY_TXN_ID  VARCHAR2(100 BYTE),
  KEY                VARCHAR2(50 BYTE),
  VALUE              VARCHAR2(50 BYTE),
  DESCRIPTION        VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.CONFIG_LANGUAGE_CODE IS 'Configuration Language Codes supported by Application';

COMMENT ON COLUMN MDM_OWNER.CONFIG_LANGUAGE_CODE.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.CONFIG_LANGUAGE_CODE.VERSION IS 'attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.CONFIG_LANGUAGE_CODE.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_LANGUAGE_CODE.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_LANGUAGE_CODE.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.CONFIG_LANGUAGE_CODE.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.CONFIG_LANGUAGE_CODE.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_LANGUAGE_CODE.KEY IS 'The key of the key-value pair';

COMMENT ON COLUMN MDM_OWNER.CONFIG_LANGUAGE_CODE.VALUE IS 'The Value of the key-value pair';

COMMENT ON COLUMN MDM_OWNER.CONFIG_LANGUAGE_CODE.DESCRIPTION IS 'Description associed with key-value pair';



CREATE TABLE MDM_OWNER.CONFIG_TXN_REGISTRY
(
  ID_PK                   VARCHAR2(50 BYTE),
  VERSION                 NUMBER                NOT NULL,
  TXNSERVICE_NAME         VARCHAR2(50 BYTE),
  TXNSERVICE_CLASS        VARCHAR2(200 BYTE),
  TXNSERVICE_CLASSMETHOD  VARCHAR2(100 BYTE),
  DESCRIPTION             VARCHAR2(200 BYTE),
  CREATED_TS              TIMESTAMP(6)          NOT NULL,
  DELETED_TS              TIMESTAMP(6),
  UPDATED_TS              TIMESTAMP(6)          NOT NULL,
  UPDATED_BY_USER         VARCHAR2(50 BYTE)     NOT NULL,
  UPDATED_TXN_REF_ID      VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.CONFIG_TXN_REGISTRY IS 'The table is reference list storing the list of all the services available for Yugandhar MDM';

COMMENT ON COLUMN MDM_OWNER.CONFIG_TXN_REGISTRY.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.CONFIG_TXN_REGISTRY.VERSION IS 'VERSION attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.CONFIG_TXN_REGISTRY.TXNSERVICE_NAME IS 'Name of the transaction service';

COMMENT ON COLUMN MDM_OWNER.CONFIG_TXN_REGISTRY.TXNSERVICE_CLASS IS 'The java class to invoke the service';

COMMENT ON COLUMN MDM_OWNER.CONFIG_TXN_REGISTRY.TXNSERVICE_CLASSMETHOD IS 'The method of the java class to be invoked';

COMMENT ON COLUMN MDM_OWNER.CONFIG_TXN_REGISTRY.DESCRIPTION IS 'The description of the service';

COMMENT ON COLUMN MDM_OWNER.CONFIG_TXN_REGISTRY.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_TXN_REGISTRY.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CONFIG_TXN_REGISTRY.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.CONFIG_TXN_REGISTRY.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.CONFIG_TXN_REGISTRY.UPDATED_TXN_REF_ID IS 'The reference id of the transaction which updated the record';



CREATE TABLE MDM_OWNER.CORPORATIONNAMES
(
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK              VARCHAR2(50 BYTE) NOT NULL,
  CORPORATION_NAME_TYPE_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  CORPORATION_NAME              VARCHAR2(100 BYTE) NOT NULL,
  SOURCE_SYSTEM_REFKEY          VARCHAR2(50 BYTE),
  PHONETIC_CORPORATION_NAME     VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.CORPORATIONNAMES IS 'The different names of the Corporation e.g. Registered Name, Legal Name etc. It has one to many relationship with CORPORATION table but Name type should be unique.';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.ID_PK IS 'Primary key of the Corporation name table';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.LEGALENTITY_IDPK IS 'PK of the LEGALENTITY table as FK to be used to associate names to a personal LE';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.CORPORATION_NAME_TYPE_REFKEY IS 'The type of corporation name (e.g. registered name, contract name)';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.CORPORATION_NAME IS 'The name of the Corporation';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.SOURCE_SYSTEM_REFKEY IS 'The source system id from where the legal entity is aquired in MDM. MDM itself can be a source for the record and if it’s the case then make an entry in source system reference table for MDM and use the FK for this attribute.';

COMMENT ON COLUMN MDM_OWNER.CORPORATIONNAMES.PHONETIC_CORPORATION_NAME IS 'Phonetic coded value of the value in CORPORATION_NAME column';



CREATE TABLE MDM_OWNER.ENTITY_GROUP
(
  ID_PK                 VARCHAR2(50 BYTE),
  VERSION               NUMBER                  NOT NULL,
  CREATED_TS            TIMESTAMP(6)            NOT NULL,
  DELETED_TS            TIMESTAMP(6),
  UPDATED_TS            TIMESTAMP(6)            NOT NULL,
  UPDATED_BY_USER       VARCHAR2(50 BYTE)       NOT NULL,
  UPDATED_BY_TXN_ID     VARCHAR2(100 BYTE),
  GROUP_TYPE_REFKEY     VARCHAR2(50 BYTE)       NOT NULL,
  GROUP_SUBTYPE_REFKEY  VARCHAR2(50 BYTE),
  GROUP_NAME            VARCHAR2(50 BYTE)       NOT NULL,
  DESCRIPTION           VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.ENTITY_GROUP IS 'This table is used to group together the Entities. E.g. Legal entities can be grouped to present an offer or Account can be grouped together for billing etc. ';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP.GROUP_TYPE_REFKEY IS 'The grouping type code';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP.GROUP_SUBTYPE_REFKEY IS 'The grouping subtype code';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP.GROUP_NAME IS 'The name of the group';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP.DESCRIPTION IS 'Description of the group';



CREATE TABLE MDM_OWNER.ENTITY_GROUP_ASSOC
(
  ID_PK                      VARCHAR2(50 BYTE),
  VERSION                    NUMBER             NOT NULL,
  CREATED_TS                 TIMESTAMP(6)       NOT NULL,
  DELETED_TS                 TIMESTAMP(6),
  UPDATED_TS                 TIMESTAMP(6)       NOT NULL,
  UPDATED_BY_USER            VARCHAR2(50 BYTE)  NOT NULL,
  UPDATED_BY_TXN_ID          VARCHAR2(100 BYTE),
  ENTITY_OBJECT_TYPE_REFKEY  VARCHAR2(50 BYTE)  NOT NULL,
  ENTITY_IDPK                VARCHAR2(50 BYTE)  NOT NULL,
  ENTITY_GROUP_IDPK          VARCHAR2(50 BYTE)  NOT NULL,
  ASSOC_TYPE_REFKEY          VARCHAR2(50 BYTE)  NOT NULL,
  DESCRIPTION                VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.ENTITY_GROUP_ASSOC IS 'This table is used to link Entities to the group defined in ENTITY_GROUP table. entity_object_type_refkey, entity_idpk, entity_group_idpk and assoc_type_refkey forms the unique key';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.ENTITY_OBJECT_TYPE_REFKEY IS 'The type of the object (e.g. PERSON, CORPORATION, ACCOUNT etc)';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.ENTITY_IDPK IS 'PK of the table as mentioned in  ENTITY_OBJECT_TYPE_REFKEY as FK to be used to associate group to entity';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.ENTITY_GROUP_IDPK IS 'PK  of ENTITYGROUP  table as FK to associate LE to groups';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.ASSOC_TYPE_REFKEY IS 'The association type';

COMMENT ON COLUMN MDM_OWNER.ENTITY_GROUP_ASSOC.DESCRIPTION IS 'The description of the association';



CREATE TABLE MDM_OWNER.FACILITYDEMO
(
  ID_PK              VARCHAR2(50 BYTE),
  VERSION            NUMBER                     NOT NULL,
  CREATED_TS         TIMESTAMP(6)               NOT NULL,
  DELETED_TS         TIMESTAMP(6),
  UPDATED_TS         TIMESTAMP(6)               NOT NULL,
  UPDATED_BY_USER    VARCHAR2(50 BYTE)          NOT NULL,
  UPDATED_BY_TXN_ID  VARCHAR2(100 BYTE),
  FACILITY_NAME      VARCHAR2(100 BYTE)         NOT NULL,
  LOCATION           VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE MDM_OWNER.INACTIVE_LE_REGISTRY
(
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK            VARCHAR2(50 BYTE) NOT NULL,
  INACTIVATED_TS              TIMESTAMP(6)      NOT NULL,
  INACTIVATION_REASON_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  COMMENTS                    VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.INACTIVE_LE_REGISTRY IS 'This table stores the list of legalentities being inactivates due to any reason';

COMMENT ON COLUMN MDM_OWNER.INACTIVE_LE_REGISTRY.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.INACTIVE_LE_REGISTRY.VERSION IS 'attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.INACTIVE_LE_REGISTRY.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.INACTIVE_LE_REGISTRY.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.INACTIVE_LE_REGISTRY.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.INACTIVE_LE_REGISTRY.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.INACTIVE_LE_REGISTRY.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.INACTIVE_LE_REGISTRY.LEGALENTITY_IDPK IS 'The ID_PK of the LEGALENTITY being deactivated';

COMMENT ON COLUMN MDM_OWNER.INACTIVE_LE_REGISTRY.INACTIVATED_TS IS 'The timestamp when the Legalentity is inactivated';

COMMENT ON COLUMN MDM_OWNER.INACTIVE_LE_REGISTRY.INACTIVATION_REASON_REFKEY IS 'The inactivation reason of the legalentity. This attribute is FK of REF_INACTIVATION_REASON table';

COMMENT ON COLUMN MDM_OWNER.INACTIVE_LE_REGISTRY.COMMENTS IS 'The comments about the inactivation if any';



CREATE TABLE MDM_OWNER.LEGALENTITY
(
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  DISPLAY_NAME                VARCHAR2(100 BYTE) NOT NULL,
  ENTITY_OBJECT_TYPE_REFKEY   VARCHAR2(50 BYTE) NOT NULL,
  CLASSIFICATION_CODE_REFKEY  VARCHAR2(50 BYTE),
  IMPORTANCE_TYPE_REFKEY      VARCHAR2(50 BYTE),
  LE_RATING_REFKEY            VARCHAR2(50 BYTE),
  STATUS_TYPE_REFKEY          VARCHAR2(50 BYTE),
  SOURCE_SYSTEM_REFKEY        VARCHAR2(50 BYTE),
  ONBOARDING_DATE             DATE,
  OFFBOARDING_DATE            DATE,
  KYC_VERIFICATION_FLAG       VARCHAR2(1 BYTE),
  DESCRIPTION                 VARCHAR2(100 BYTE),
  PHONETIC_DISPLAY_NAME       VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LEGALENTITY IS 'This is the primary table for registering Legal entity in MDM.';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.ID_PK IS 'MDM ID of legal entity which uniquely identify the LE in the system';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.DISPLAY_NAME IS 'Legal entity display name';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.ENTITY_OBJECT_TYPE_REFKEY IS 'Object type of the legal entity (e.g. PERSON or CORPORATION';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.CLASSIFICATION_CODE_REFKEY IS 'LE Classification code (e.g. prospect, customer etc)';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.IMPORTANCE_TYPE_REFKEY IS 'Importance of the LE (e.g. high value, prime or high, medium, low)';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.LE_RATING_REFKEY IS 'The internal or external rating of the customer (e.g. 5 star, 4 star etc.)';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.STATUS_TYPE_REFKEY IS 'Legal entity status (e.g. ACTIVE, INACTIVE, DELETED etc.)';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.SOURCE_SYSTEM_REFKEY IS 'The source system id from where the legal entity is aquired in MDM. MDM itself can be a source for the record and if it’s the case then make an entry in source system reference table for MDM and use the FK for this attribute.';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.ONBOARDING_DATE IS 'The date on which LE is aquired in the source system';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.OFFBOARDING_DATE IS 'The offboarding date if customer is in INACTIVE or DELETED state';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.KYC_VERIFICATION_FLAG IS 'Flag to indicate if this legal entity is KYC verified';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.DESCRIPTION IS 'Any additional information about the legal entity';

COMMENT ON COLUMN MDM_OWNER.LEGALENTITY.PHONETIC_DISPLAY_NAME IS 'Phonetic value of DISPLAY_NAME column';



CREATE TABLE MDM_OWNER.LE_ACCOUNT_ASSOC
(
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK            VARCHAR2(50 BYTE) NOT NULL,
  LE_ROLETYPE_REFKEY          VARCHAR2(50 BYTE) NOT NULL,
  ACCOUNT_IDPK                VARCHAR2(50 BYTE) NOT NULL,
  ROLE_ACTIVATION_DATE        DATE,
  ROLE_DEACTIVATION_DATE      DATE,
  DEACTIVATION_REASON_REFKEY  VARCHAR2(50 BYTE),
  AGREEMENT_TYPE_REFKEY       VARCHAR2(50 BYTE),
  AGREEMENT_TYPE_DESCRIPTION  VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LE_ACCOUNT_ASSOC IS 'This table is used to link the Legal Entity with Account. Legal entity idpk, role and account forms a unique key.';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.LEGALENTITY_IDPK IS 'PK of the LEGALENTITY table as FK to be used to associate accounts with legal entity';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.LE_ROLETYPE_REFKEY IS 'The roletype of the Legal Entity for the account';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.ACCOUNT_IDPK IS 'PK of the ACCOUNT table as FK to be used to associated account with Legal entity';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.ROLE_ACTIVATION_DATE IS 'The date when the role is activated';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.ROLE_DEACTIVATION_DATE IS 'The date when role is deactivated ';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.DEACTIVATION_REASON_REFKEY IS 'The reason why a role or association is removed';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.AGREEMENT_TYPE_REFKEY IS 'The type of the agreement/contract legal entity had signed for getting associated with the account (e.g. Loan agreement guardian agreement etc)';

COMMENT ON COLUMN MDM_OWNER.LE_ACCOUNT_ASSOC.AGREEMENT_TYPE_DESCRIPTION IS 'Description or additional comment of the agreement type';



CREATE TABLE MDM_OWNER.LE_ADDRESS_ASSOC
(
  ID_PK                   VARCHAR2(50 BYTE),
  VERSION                 NUMBER                NOT NULL,
  CREATED_TS              TIMESTAMP(6)          NOT NULL,
  DELETED_TS              TIMESTAMP(6),
  UPDATED_TS              TIMESTAMP(6)          NOT NULL,
  UPDATED_BY_USER         VARCHAR2(50 BYTE)     NOT NULL,
  UPDATED_BY_TXN_ID       VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK        VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_IDPK            VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_TYPE_REFKEY     VARCHAR2(50 BYTE)     NOT NULL,
  ADDRESS_SUBTYPE_REFKEY  VARCHAR2(50 BYTE)     NOT NULL,
  PREFERRED_FLAG          VARCHAR2(1 BYTE),
  SOLICITATION_FLAG       VARCHAR2(1 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LE_ADDRESS_ASSOC IS 'This table links the Legal entity to address. One Legal Entity may have multiple addresses but the address type would be unique.';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.ID_PK IS 'Primary key of the LE and address association table';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.LEGALENTITY_IDPK IS 'PK of the LEGALENTITY table as FK to be used to associate names to a personal LE';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.ADDRESS_IDPK IS 'FK of the address table';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.ADDRESS_TYPE_REFKEY IS 'The type of the address (e.g. summer address, winter address, general address etc)';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.ADDRESS_SUBTYPE_REFKEY IS 'The subtype of the address  (e.g. postal address, communication address etc.)';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.PREFERRED_FLAG IS 'Flag to indicate if this address is prefered by Legal entity';

COMMENT ON COLUMN MDM_OWNER.LE_ADDRESS_ASSOC.SOLICITATION_FLAG IS 'Flag to indicate if the LE can be contacted on this address';



CREATE TABLE MDM_OWNER.LE_CORPORATION
(
  LEGALENTITY_IDPK             VARCHAR2(50 BYTE) NOT NULL,
  VERSION                      NUMBER           NOT NULL,
  CREATED_TS                   TIMESTAMP(6)     NOT NULL,
  DELETED_TS                   TIMESTAMP(6),
  UPDATED_TS                   TIMESTAMP(6)     NOT NULL,
  UPDATED_BY_USER              VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID            VARCHAR2(100 BYTE),
  CLASSIFICATION_CODE_REFKEY   VARCHAR2(50 BYTE),
  INDUSTRY_CODE_REFKEY         VARCHAR2(50 BYTE),
  GOVT_REGISTRATION_DATE       DATE,
  COUNTRY_REGISTRATION_REFKEY  VARCHAR2(50 BYTE),
  NOTPROFIT_FLAG               VARCHAR2(1 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LE_CORPORATION IS 'This table stores the non-personal customers e.g. business customers, vendors etc. It has one-to-one relationship with LEGALENTITY table.';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.LEGALENTITY_IDPK IS 'This is the foreign key of LEGALENTITY table used as primary key to uniquely identify the Corporation type LE in the system.';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.CLASSIFICATION_CODE_REFKEY IS 'Identifies the oganization type e.g. company, institute, trust etc';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.INDUSTRY_CODE_REFKEY IS 'Industry code of the corporation';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.GOVT_REGISTRATION_DATE IS 'Registration date on which the corporation is registred with govenement';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.COUNTRY_REGISTRATION_REFKEY IS 'Country in which the corporation is registered. ';

COMMENT ON COLUMN MDM_OWNER.LE_CORPORATION.NOTPROFIT_FLAG IS 'Flag to indicate if the corporation is a charitable trust or not-for-profit community etc.';



CREATE TABLE MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY
(
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  IDENTIFICATION_TYPE_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  IDENTIFICATION_NUMBER       VARCHAR2(50 BYTE) NOT NULL,
  LEGALENTITY_IDPK            VARCHAR2(50 BYTE) NOT NULL,
  DOCUMENT                    VARCHAR2(50 BYTE),
  ISSUED_BY                   VARCHAR2(50 BYTE),
  ID_CONSIDERED_FOR_KYC_FLAG  VARCHAR2(50 BYTE),
  ISSUED_DATE                 DATE,
  SOURCE_SYSTEM_REFKEY        VARCHAR2(50 BYTE),
  IDENTITY_DESCRIPTION        VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY IS 'This table is used to store different idpkentifiers of the Legal entity which can also be used for KYC varification. E.g. SSN number, driving license Number, Aadhar card number etc. Identification Type and Legal Entity Idpk forms the unique key.';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.IDENTIFICATION_TYPE_REFKEY IS 'The type of the identification (e.g. SSN number, Driver licence number etc)';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.IDENTIFICATION_NUMBER IS 'The Identity card number';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.LEGALENTITY_IDPK IS 'PK of the LEGALENTITY table as FK to be used to associate identifiers to the legal entity';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.DOCUMENT IS 'The document for verification';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.ISSUED_BY IS 'The issueing authority of the document';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.ID_CONSIDERED_FOR_KYC_FLAG IS 'Flag to indicate if this document considered for KYC';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.ISSUED_DATE IS 'Issue date';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.SOURCE_SYSTEM_REFKEY IS 'The source system id from where the legal entity is aquired in MDM. MDM itself can be a source for the record and if it’s the case then make an entry in source system reference table for MDM and use the FK for this attribute.';

COMMENT ON COLUMN MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY.IDENTITY_DESCRIPTION IS 'The description of the identity';



CREATE TABLE MDM_OWNER.LE_PERSON
(
  LEGALENTITY_IDPK             VARCHAR2(50 BYTE) NOT NULL,
  VERSION                      NUMBER           NOT NULL,
  CREATED_TS                   TIMESTAMP(6)     NOT NULL,
  DELETED_TS                   TIMESTAMP(6),
  UPDATED_TS                   TIMESTAMP(6)     NOT NULL,
  UPDATED_BY_USER              VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID            VARCHAR2(100 BYTE),
  PERSON_TYPE_REFKEY           VARCHAR2(50 BYTE),
  GENDER_REFKEY                VARCHAR2(50 BYTE),
  DATE_OF_BIRTH                DATE,
  COUNTRY_OF_BIRTH__REFKEY     VARCHAR2(50 BYTE),
  COUNTRY_CITIZENSHIP_REFKEY   VARCHAR2(50 BYTE),
  COUNTRY_OF_DOMICILE__REFKEY  VARCHAR2(50 BYTE),
  MARITAL_STATUS               VARCHAR2(30 BYTE),
  HIGHEST_EDU_QUAL_REFKEY      VARCHAR2(50 BYTE),
  IS_DECEASED_FLAG             VARCHAR2(1 BYTE),
  DECEASED_DATE                DATE,
  IS_HANDICAPPED_FLAG          VARCHAR2(1 BYTE),
  HANDICAPPED_SINCE_DATE       DATE,
  NUMBER_OF_DEPENDENTS         NUMBER,
  NUMBER_OF_CHILDREN           NUMBER,
  PREFERRED_LANGUAGE_REFKEY    VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LE_PERSON IS 'This table stores the person type of Legal entities e.g. Individpkual customers, employees, saving bank account holder etc. It has one-to-one relationship with LEGALENTITY table';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.LEGALENTITY_IDPK IS 'This is the foreign key of LEGALENTITY table used as primary key to uniquely identify the Personal LE in the system.';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.PERSON_TYPE_REFKEY IS 'Like employee, customer, point of contact, manager etc';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.GENDER_REFKEY IS 'Gender of the person';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.DATE_OF_BIRTH IS 'Date of birth';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.COUNTRY_OF_BIRTH__REFKEY IS 'Country of birth';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.COUNTRY_CITIZENSHIP_REFKEY IS 'Country of citizenship';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.COUNTRY_OF_DOMICILE__REFKEY IS 'Country of domicile';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.MARITAL_STATUS IS 'Marital status of the LE';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.HIGHEST_EDU_QUAL_REFKEY IS 'Highest educational qualification of the person';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.IS_DECEASED_FLAG IS 'Flag to indicate if the person is deceased';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.DECEASED_DATE IS 'If person is deceased then the date of the death';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.IS_HANDICAPPED_FLAG IS 'Flag to indicate if the person is specially able/disabled/physically handicapped';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.HANDICAPPED_SINCE_DATE IS 'If the person is physically handicapped then the date since person is handicapped. ';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.NUMBER_OF_DEPENDENTS IS 'Number of dependents in the family';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.NUMBER_OF_CHILDREN IS 'Number of childrens the person has';

COMMENT ON COLUMN MDM_OWNER.LE_PERSON.PREFERRED_LANGUAGE_REFKEY IS 'Prefered language of communication';



CREATE TABLE MDM_OWNER.LE_PHONE_ASSOC
(
  ID_PK                    VARCHAR2(50 BYTE),
  VERSION                  NUMBER               NOT NULL,
  CREATED_TS               TIMESTAMP(6)         NOT NULL,
  DELETED_TS               TIMESTAMP(6),
  UPDATED_TS               TIMESTAMP(6)         NOT NULL,
  UPDATED_BY_USER          VARCHAR2(50 BYTE)    NOT NULL,
  UPDATED_BY_TXN_ID        VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK         VARCHAR2(50 BYTE)    NOT NULL,
  PHONE_TYPE_REFKEY        VARCHAR2(50 BYTE)    NOT NULL,
  PHONE_SUBTYPE_REFKEY     VARCHAR2(50 BYTE),
  PREFERRED_FLAG           VARCHAR2(1 BYTE),
  PHONE_NUMBER             VARCHAR2(30 BYTE)    NOT NULL,
  PHONE_STANDARDIZED_IDPK  VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LE_PHONE_ASSOC IS 'This table links the Legal Entity with Phone Number. A LE can have multiple phone numbers but phone type must be unique.';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.LEGALENTITY_IDPK IS 'PK of the LEGALENTITY table as FK to be used to associate names to a personal LE';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.PHONE_TYPE_REFKEY IS 'Phone type category  (office number, personal phone etc)';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.PHONE_SUBTYPE_REFKEY IS 'Phone subtype (e.g. Mobile number, landline, fax, pager etc)';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.PREFERRED_FLAG IS 'Flag to indicate if this phone number is prefered by customer';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.PHONE_NUMBER IS 'Phone number';

COMMENT ON COLUMN MDM_OWNER.LE_PHONE_ASSOC.PHONE_STANDARDIZED_IDPK IS 'IDPK of PHONE_STANDARDIZED table as FK if the phone number is standardized';



CREATE TABLE MDM_OWNER.LE_PREFERENCES
(
  ID_PK                   VARCHAR2(50 BYTE),
  VERSION                 NUMBER                NOT NULL,
  CREATED_TS              TIMESTAMP(6)          NOT NULL,
  DELETED_TS              TIMESTAMP(6),
  UPDATED_TS              TIMESTAMP(6)          NOT NULL,
  UPDATED_BY_USER         VARCHAR2(50 BYTE)     NOT NULL,
  UPDATED_BY_TXN_ID       VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK        VARCHAR2(50 BYTE)     NOT NULL,
  PREFERENCE_TYPE_REFKEY  VARCHAR2(50 BYTE)     NOT NULL,
  PREF_FLAG               VARCHAR2(1 BYTE),
  PREF_DESCRIPTION        VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LE_PREFERENCES IS 'This table is used to store the different preferences Legal Entity have expressed. Preference Type and Legal Entity Idpk forms the unique key';

COMMENT ON COLUMN MDM_OWNER.LE_PREFERENCES.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.LE_PREFERENCES.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_PREFERENCES.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_PREFERENCES.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_PREFERENCES.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LE_PREFERENCES.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LE_PREFERENCES.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LE_PREFERENCES.LEGALENTITY_IDPK IS 'PK of the LEGALENTITY table as FK to be used to add preference for the LE';

COMMENT ON COLUMN MDM_OWNER.LE_PREFERENCES.PREFERENCE_TYPE_REFKEY IS 'The type of the privacy preference (e.g. do not call me, do not mail me etc)(';

COMMENT ON COLUMN MDM_OWNER.LE_PREFERENCES.PREF_FLAG IS 'The flag for the preference (Y/N)';

COMMENT ON COLUMN MDM_OWNER.LE_PREFERENCES.PREF_DESCRIPTION IS 'The description of the preference';



CREATE TABLE MDM_OWNER.LE_PROPERTY_ASSOC
(
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  PROPERTY_IDPK               VARCHAR2(50 BYTE) NOT NULL,
  LEGALENTITY_IDPK            VARCHAR2(50 BYTE) NOT NULL,
  PROPERTY_LE_RELTYPE_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  DESCRIPTION                 VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LE_PROPERTY_ASSOC IS 'This table links the Legal entity to property. The relationship type, Legal entity idpk and property idpk forms the unique key';

COMMENT ON COLUMN MDM_OWNER.LE_PROPERTY_ASSOC.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.LE_PROPERTY_ASSOC.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_PROPERTY_ASSOC.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_PROPERTY_ASSOC.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_PROPERTY_ASSOC.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LE_PROPERTY_ASSOC.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LE_PROPERTY_ASSOC.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LE_PROPERTY_ASSOC.PROPERTY_IDPK IS 'PK of the PROPERTY table as FK to be used to associate property to a LE';

COMMENT ON COLUMN MDM_OWNER.LE_PROPERTY_ASSOC.LEGALENTITY_IDPK IS 'PK of the LE table as FK to be used to associate property to a LE';

COMMENT ON COLUMN MDM_OWNER.LE_PROPERTY_ASSOC.PROPERTY_LE_RELTYPE_REFKEY IS 'Legalentity to Property relationship';

COMMENT ON COLUMN MDM_OWNER.LE_PROPERTY_ASSOC.DESCRIPTION IS 'Legal entity to property relationship description';



CREATE TABLE MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY
(
  ID_PK                    VARCHAR2(50 BYTE),
  VERSION                  NUMBER               NOT NULL,
  CREATED_TS               TIMESTAMP(6)         NOT NULL,
  DELETED_TS               TIMESTAMP(6),
  UPDATED_TS               TIMESTAMP(6)         NOT NULL,
  UPDATED_BY_USER          VARCHAR2(50 BYTE)    NOT NULL,
  UPDATED_BY_TXN_ID        VARCHAR2(100 BYTE),
  SOURCE_SYSTEM_REFKEY     VARCHAR2(50 BYTE)    NOT NULL,
  REFERENCE_ID             VARCHAR2(50 BYTE)    NOT NULL,
  LEGALENTITY_IDPK         VARCHAR2(50 BYTE)    NOT NULL,
  STATUS_IN_SOURCE_REFKEY  VARCHAR2(50 BYTE),
  DESCRIPTION              VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY IS 'This is a registry table which stores the link between legal entity MDM idpk with upstream or downstream application system keys. Source system refkey and Legal Entity Idpk forms the unique key.';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.CREATED_TS IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.SOURCE_SYSTEM_REFKEY IS 'The source system id from where the legal entity is aquired in MDM. MDM itself can be a source for the record and if it’s the case then make an entry in source system reference table for MDM and use the FK for this attribute.';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.REFERENCE_ID IS 'The unique identifier of the LE in the source system';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.LEGALENTITY_IDPK IS 'PK of the LEGALENTITY table as FK to be used to create registry of the keys';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.STATUS_IN_SOURCE_REFKEY IS 'Status of the Key in the source';

COMMENT ON COLUMN MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY.DESCRIPTION IS 'Description';



CREATE TABLE MDM_OWNER.LE_TO_LE_RELATIONSHIP
(
  ID_PK                        VARCHAR2(50 BYTE),
  VERSION                      NUMBER           NOT NULL,
  CREATED_TS                   TIMESTAMP(6)     NOT NULL,
  DELETED_TS                   TIMESTAMP(6),
  UPDATED_TS                   TIMESTAMP(6)     NOT NULL,
  UPDATED_BY_USER              VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID            VARCHAR2(100 BYTE),
  FROM_LEGALENTITY_IDPK        VARCHAR2(50 BYTE) NOT NULL,
  TO_LEGALENTITY_IDPK          VARCHAR2(50 BYTE) NOT NULL,
  LE_RELATIONSHIP_TYPE_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  RELATIONSHIP_STATUS_REFKEY   VARCHAR2(50 BYTE),
  RELATIONSHIP_DESCRIPTION     VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LE_TO_LE_RELATIONSHIP IS 'This table is used to create LE to LE relationship e.g. Parent-child, Husband-wife, manager - employee etc.';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.FROM_LEGALENTITY_IDPK IS 'PK of the LEGALENTITY table to create relationship between the LEs';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.TO_LEGALENTITY_IDPK IS 'PK of the LEGALENTITY table to create relationship between the LEs';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.LE_RELATIONSHIP_TYPE_REFKEY IS 'The relationship code of the LE (e.g. parent, child, manager etc)';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.RELATIONSHIP_STATUS_REFKEY IS 'The status of the relationship (e.g. ACTIVE, INACTIVE etc)';

COMMENT ON COLUMN MDM_OWNER.LE_TO_LE_RELATIONSHIP.RELATIONSHIP_DESCRIPTION IS 'Description of the relationship';



CREATE TABLE MDM_OWNER.LE_VEHICLE_ASSOC
(
  ID_PK                       VARCHAR2(50 BYTE),
  VERSION                     NUMBER            NOT NULL,
  CREATED_TS                  TIMESTAMP(6)      NOT NULL,
  DELETED_TS                  TIMESTAMP(6),
  UPDATED_TS                  TIMESTAMP(6)      NOT NULL,
  UPDATED_BY_USER             VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID           VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK            VARCHAR2(50 BYTE) NOT NULL,
  LE_ROLETYPE_REFKEY          VARCHAR2(50 BYTE) NOT NULL,
  ACCOUNT_IDPK                VARCHAR2(50 BYTE),
  ROLE_ACTIVATION_DATE        DATE,
  ROLE_DEACTIVATION_DATE      DATE,
  DEACTIVATION_REASON_REFKEY  VARCHAR2(50 BYTE),
  AGREEMENT_TYPE_REFKEY       VARCHAR2(50 BYTE),
  AGREEMENT_TYPE_DESCRIPTION  VARCHAR2(100 BYTE),
  VEHICLE_IDPK                VARCHAR2(50 BYTE) NOT NULL
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.LE_VEHICLE_ASSOC IS 'The Legal entity to vehicle link is created through this table.';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.LEGALENTITY_IDPK IS 'PK of the LEGALENTITY table as FK to be used to associate vehicle with Legal Entity';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.LE_ROLETYPE_REFKEY IS 'The role of the LE on the vehicle (e.g. owner, driver etc)';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.ACCOUNT_IDPK IS 'PK of the ACCOUNT table as FK to be used only if the vehicle is associated to legal entity through an account (e.g. A Vehicle loan  of LE may have account and vehicle associated to LE)';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.ROLE_ACTIVATION_DATE IS 'The date when the role is activated';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.ROLE_DEACTIVATION_DATE IS 'The date when the role is deactivated';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.DEACTIVATION_REASON_REFKEY IS 'The reason of deactivation';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.AGREEMENT_TYPE_REFKEY IS 'The type of the agreement/contract legal entity had signed for getting associated with the vehicle (e.g. Loan agreement or lease agreement etc)';

COMMENT ON COLUMN MDM_OWNER.LE_VEHICLE_ASSOC.AGREEMENT_TYPE_DESCRIPTION IS 'Description or additional comment of the agreement type';



CREATE TABLE MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY
(
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK              VARCHAR2(50 BYTE) NOT NULL,
  CANDIDATE_LEGALENTITYIDPK     VARCHAR2(50 BYTE) NOT NULL,
  MATCH_PATTERN                 VARCHAR2(50 BYTE) NOT NULL,
  MATCH_PROPOSED_ACTION_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  MATCH_ACTIONSTATUS_REFKEY     VARCHAR2(50 BYTE) NOT NULL,
  MATCH_PERCENTAGE_DESCRIPTION  VARCHAR2(500 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY IS 'This table stores the match results after performing matching on perticular legal entity. e.g. if legal entity A1 is being matched and identified to have A2 and A3 as candidate legal entities having match pattern with A2 as YYYNYY and with A3 as NYYYYN, identified to be manual reviewed before merging then two records would be created in this table with ID_PK of A1 legalentity to be mapped to LEGALENTITY_IDPK attribute and ID_PK of A2 being mapped to CANDIDATE_LEGALENTITYIDPK attribute. YYYNYY  being mapped to MATCH_PATTERN, MATCH_PROPOSED_ACTION_REFKEY as defined in REF_MATCH_PROPOSED_ACTION, MATCH_ACTIONSTATUS_REFKEY mapped as defined in REF_MATCH_ACTIONSTATUS tables. The percentage match after performing the matching is stored inMATCH_PERCENTAGE_DESCRIPTION attribute.';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.VERSION IS 'attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.LEGALENTITY_IDPK IS 'The ID_PK of the legalentity for which matching is performed';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.CANDIDATE_LEGALENTITYIDPK IS 'The ID_PK of the legalentity identified as a candidate match after matching is performed';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.MATCH_PATTERN IS 'The match pattern after performing the matching is stored in the attribute for future reference';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.MATCH_PROPOSED_ACTION_REFKEY IS 'The proposed action on the matched record';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.MATCH_ACTIONSTATUS_REFKEY IS 'The status of the action taken after performing matching';

COMMENT ON COLUMN MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY.MATCH_PERCENTAGE_DESCRIPTION IS 'The percentage match after performing the matching is stored in this attribute for future reference';



CREATE TABLE MDM_OWNER.MATCH_MERGED_LE_ASSOC
(
  ID_PK                      VARCHAR2(50 BYTE),
  VERSION                    NUMBER             NOT NULL,
  CREATED_TS                 TIMESTAMP(6)       NOT NULL,
  DELETED_TS                 TIMESTAMP(6),
  UPDATED_TS                 TIMESTAMP(6)       NOT NULL,
  UPDATED_BY_USER            VARCHAR2(50 BYTE)  NOT NULL,
  UPDATED_BY_TXN_ID          VARCHAR2(100 BYTE),
  SURVIVOR_LEGALENTITY_IDPK  VARCHAR2(50 BYTE)  NOT NULL,
  MERGED_LEGALENTITY_IDPK    VARCHAR2(50 BYTE)  NOT NULL,
  MERGE_REASON_REFKEY        VARCHAR2(50 BYTE)  NOT NULL,
  COMMENTS                   VARCHAR2(100 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.MATCH_MERGED_LE_ASSOC IS 'This table stores the legal entity relation after performing the matching. e.g. if Legalentity A1 is merged with A2 where A1 is survivor then the ID_PK of A1 legal entity should be stored in SURVIVOR_LEGALENTITY_IDPK and  ID_PK of A2 legal entity should be stored in MERGED_LEGALENTITY_IDPK attribute. The reason for the merge should be stored in MERGE_REASON_REFKEY attribute along with any comments in the COMMENTS column';

COMMENT ON COLUMN MDM_OWNER.MATCH_MERGED_LE_ASSOC.ID_PK IS 'Primary Key column for reference table';

COMMENT ON COLUMN MDM_OWNER.MATCH_MERGED_LE_ASSOC.VERSION IS 'attributes for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.MATCH_MERGED_LE_ASSOC.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.MATCH_MERGED_LE_ASSOC.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.MATCH_MERGED_LE_ASSOC.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.MATCH_MERGED_LE_ASSOC.UPDATED_BY_USER IS 'Last updated by user';

COMMENT ON COLUMN MDM_OWNER.MATCH_MERGED_LE_ASSOC.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.MATCH_MERGED_LE_ASSOC.SURVIVOR_LEGALENTITY_IDPK IS 'The ID_PK of the survivor legalentity';

COMMENT ON COLUMN MDM_OWNER.MATCH_MERGED_LE_ASSOC.MERGED_LEGALENTITY_IDPK IS 'The ID_PK of the legalentity being merged';

COMMENT ON COLUMN MDM_OWNER.MATCH_MERGED_LE_ASSOC.MERGE_REASON_REFKEY IS 'The merge reason of the survivor and merged legal entities';

COMMENT ON COLUMN MDM_OWNER.MATCH_MERGED_LE_ASSOC.COMMENTS IS 'comments if any';



CREATE TABLE MDM_OWNER.MISCELLANEOUS_INFO
(
  ID_PK                      VARCHAR2(50 BYTE),
  VERSION                    NUMBER             NOT NULL,
  CREATED_TS                 TIMESTAMP(6)       NOT NULL,
  DELETED_TS                 TIMESTAMP(6),
  UPDATED_TS                 TIMESTAMP(6)       NOT NULL,
  UPDATED_BY_USER            VARCHAR2(50 BYTE)  NOT NULL,
  UPDATED_BY_TXN_ID          VARCHAR2(100 BYTE),
  ENTITY_OBJECT_TYPE_REFKEY  VARCHAR2(50 BYTE)  NOT NULL,
  ENTITY_IDPK                VARCHAR2(50 BYTE)  NOT NULL,
  NAME1                      VARCHAR2(50 BYTE)  NOT NULL,
  VALUE1                     VARCHAR2(50 BYTE)  NOT NULL,
  NAME2                      VARCHAR2(50 BYTE),
  VALUE2                     VARCHAR2(50 BYTE),
  NAME3                      VARCHAR2(50 BYTE),
  VALUE3                     VARCHAR2(50 BYTE),
  NAME4                      VARCHAR2(50 BYTE),
  VALUE4                     VARCHAR2(50 BYTE),
  NAME5                      VARCHAR2(50 BYTE),
  VALUE5                     VARCHAR2(50 BYTE),
  NAME6                      VARCHAR2(50 BYTE),
  VALUE6                     VARCHAR2(50 BYTE),
  NAME7                      VARCHAR2(50 BYTE),
  VALUE7                     VARCHAR2(50 BYTE),
  NAME8                      VARCHAR2(50 BYTE),
  VALUE8                     VARCHAR2(50 BYTE),
  NAME9                      VARCHAR2(50 BYTE),
  VALUE9                     VARCHAR2(50 BYTE),
  NAME10                     VARCHAR2(50 BYTE),
  VALUE10                    VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.MISCELLANEOUS_INFO IS 'This table stores the miscellaneous information in the form of Name - value pairs';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.ENTITY_OBJECT_TYPE_REFKEY IS 'The type of the object (e.g. PERSON, CORPORATION, ACCOUNT etc)';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.ENTITY_IDPK IS 'PK of the table as mentioned in  ENTITY_OBJECT_TYPE_REFKEY as FK to be used to associated miscelleneous information';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.NAME1 IS 'Miscelleneous information attribute 1';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.VALUE1 IS 'Miscelleneous information attribute 1 value';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.NAME2 IS 'Miscelleneous information attribute 2';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.VALUE2 IS 'Miscelleneous information attribute 2 value';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.NAME3 IS 'Miscelleneous information attribute 3';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.VALUE3 IS 'Miscelleneous information attribute 3 value';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.NAME4 IS 'Miscelleneous information attribute 4';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.VALUE4 IS 'Miscelleneous information attribute 4 value';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.NAME5 IS 'Miscelleneous information attribute 5';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.VALUE5 IS 'Miscelleneous information attribute 5 value';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.NAME6 IS 'Miscelleneous information attribute 6';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.VALUE6 IS 'Miscelleneous information attribute 6 value';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.NAME7 IS 'Miscelleneous information attribute 7';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.VALUE7 IS 'Miscelleneous information attribute 7 value';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.NAME8 IS 'Miscelleneous information attribute 8';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.VALUE8 IS 'Miscelleneous information attribute 8 value';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.NAME9 IS 'Miscelleneous information attribute 9';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.VALUE9 IS 'Miscelleneous information attribute 9 value';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.NAME10 IS 'Miscelleneous information attribute 10';

COMMENT ON COLUMN MDM_OWNER.MISCELLANEOUS_INFO.VALUE10 IS 'Miscelleneous information attribute 10 value';



CREATE TABLE MDM_OWNER.PERSONNAMES
(
  ID_PK                   VARCHAR2(50 BYTE),
  VERSION                 NUMBER                NOT NULL,
  CREATED_TS              TIMESTAMP(6)          NOT NULL,
  DELETED_TS              TIMESTAMP(6),
  UPDATED_TS              TIMESTAMP(6)          NOT NULL,
  UPDATED_BY_USER         VARCHAR2(50 BYTE)     NOT NULL,
  UPDATED_BY_TXN_ID       VARCHAR2(100 BYTE),
  LEGALENTITY_IDPK        VARCHAR2(50 BYTE)     NOT NULL,
  PERSONNAME_TYPE_REFKEY  VARCHAR2(50 BYTE)     NOT NULL,
  PREFIX_NAME_REFKEY      VARCHAR2(50 BYTE),
  PREFIX_MISC             VARCHAR2(30 BYTE),
  NAME_ONE                VARCHAR2(50 BYTE)     NOT NULL,
  NAME_TWO                VARCHAR2(50 BYTE),
  NAME_THREE              VARCHAR2(50 BYTE),
  NAME_FOUR               VARCHAR2(50 BYTE),
  LAST_NAME               VARCHAR2(50 BYTE),
  NICK_NAME               VARCHAR2(50 BYTE),
  POPULAR_NAME            VARCHAR2(50 BYTE),
  SUFFIX_NAME_REFKEY      VARCHAR2(50 BYTE),
  SUFFIX_MISC             VARCHAR2(30 BYTE),
  NAME_STANDARDISED_FLAG  VARCHAR2(1 BYTE),
  SOURCE_SYSTEM_REFKEY    VARCHAR2(50 BYTE),
  PHONETIC_NAME_ONE       VARCHAR2(50 BYTE),
  PHONETIC_NAME_TWO       VARCHAR2(50 BYTE),
  PHONETIC_NAME_THREE     VARCHAR2(50 BYTE),
  PHONETIC_LAST_NAME      VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.PERSONNAMES IS 'This table stores the different names any personal Legal entity can posses. E.g. Registered name, Personal Name, trading name etc). It has one to many relationship with PERSON table but Person Name type should be unique.';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.ID_PK IS 'Primary key of the person name table';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.LEGALENTITY_IDPK IS 'PK of the LEGALENTITY table as FK to be used to associate names to a personal LE';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.PERSONNAME_TYPE_REFKEY IS 'The type of the name (e.g. legal name, registered name etc. )';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.PREFIX_NAME_REFKEY IS 'Prefix name of the person';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.PREFIX_MISC IS 'Prefix name if the prefix is not stored as LOV';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.NAME_ONE IS 'First name or given name one of the person';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.NAME_TWO IS 'Middle name or parent/guardians name of the person';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.NAME_THREE IS 'Middle name or parent/guardians name of the person';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.NAME_FOUR IS 'Middle name or parent/guardians name of the person';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.LAST_NAME IS 'The last name or surname of the person';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.NICK_NAME IS 'Nick name of the person';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.POPULAR_NAME IS 'Name by which person is popular in the world';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.SUFFIX_NAME_REFKEY IS 'Suffix name of the person';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.SUFFIX_MISC IS 'Miscelleneous Suffix name of the person if Suffix is not present in the suffix reference table';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.NAME_STANDARDISED_FLAG IS 'Flag to indicate if the name is standardized';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.SOURCE_SYSTEM_REFKEY IS 'The source system id from where the legal entity is aquired in MDM. MDM itself can be a source for the record and if it’s the case then make an entry in source system reference table for MDM and use the FK for this attribute.';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.PHONETIC_NAME_ONE IS 'Phonetic Coded Value of the value in NAME_ONE Column';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.PHONETIC_NAME_TWO IS 'Phonetic Coded Value of the value in NAME_TWO Column';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.PHONETIC_NAME_THREE IS 'Phonetic Coded Value of the value in NAME_THREE Column';

COMMENT ON COLUMN MDM_OWNER.PERSONNAMES.PHONETIC_LAST_NAME IS 'Phonetic Coded Value of the value in LAST_ONE Column';



CREATE TABLE MDM_OWNER.PHONE_STANDARDIZED
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  ITU_COUNTRY_CALLING_CODE  VARCHAR2(4 BYTE),
  AREA_CODE                 VARCHAR2(6 BYTE),
  EXCHANGE                  VARCHAR2(6 BYTE),
  PHONE_NUMBER              VARCHAR2(20 BYTE),
  EXTENSION                 VARCHAR2(8 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.PHONE_STANDARDIZED IS 'This table stores the Phone number in standardized format.';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.ITU_COUNTRY_CALLING_CODE IS 'Country calling code as defined by  International Telecommunication Union (e.g. +1 for USA, +91 for INDIA etc)';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.AREA_CODE IS 'Area code for landlane numbers';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.EXCHANGE IS 'Exchange number';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.PHONE_NUMBER IS 'Phone number';

COMMENT ON COLUMN MDM_OWNER.PHONE_STANDARDIZED.EXTENSION IS 'Extension';



CREATE TABLE MDM_OWNER.PROPERTY
(
  ID_PK              VARCHAR2(50 BYTE),
  VERSION            NUMBER                     NOT NULL,
  CREATED_TS         TIMESTAMP(6)               NOT NULL,
  DELETED_TS         TIMESTAMP(6),
  UPDATED_TS         TIMESTAMP(6)               NOT NULL,
  UPDATED_BY_USER    VARCHAR2(50 BYTE)          NOT NULL,
  UPDATED_BY_TXN_ID  VARCHAR2(100 BYTE),
  PROPERTY_NAME      VARCHAR2(100 BYTE)         NOT NULL,
  ADDRESS_IDPK       VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.PROPERTY IS 'This table stores the immovable property information like flat, farm house, office etc.';

COMMENT ON COLUMN MDM_OWNER.PROPERTY.ID_PK IS 'Primary key of the table';

COMMENT ON COLUMN MDM_OWNER.PROPERTY.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.PROPERTY.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.PROPERTY.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.PROPERTY.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.PROPERTY.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.PROPERTY.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.PROPERTY.PROPERTY_NAME IS 'The name of the property (e.g. xyz business park, xyz residency etc)';

COMMENT ON COLUMN MDM_OWNER.PROPERTY.ADDRESS_IDPK IS 'PK of the ADDRESS table as FK to be used to record the address of the property';



CREATE TABLE MDM_OWNER.REF_ACCOUNT_MDM_STATUS
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_ACCOUNT_MDM_STATUS IS 'Reference Account MDM Status Type LOV.';



CREATE TABLE MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS IS 'Reference Account Source Status Type LOV.';



CREATE TABLE MDM_OWNER.REF_ADDRESS_SUBTYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_ADDRESS_SUBTYPE IS 'Reference Address Subtype LOV.';



CREATE TABLE MDM_OWNER.REF_ADDRESS_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_ADDRESS_TYPE IS 'Reference Address Type LOV.';



CREATE TABLE MDM_OWNER.REF_AGREEMENT_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_AGREEMENT_TYPE IS 'Reference Agreement Type LOV.';



CREATE TABLE MDM_OWNER.REF_ASSOC_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_ASSOC_TYPE IS 'Reference Association Type LOV.';



CREATE TABLE MDM_OWNER.REF_BATCH_ACTION_STATUS
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_BATCH_ACTION_STATUS IS 'The batch action status LOV';



CREATE TABLE MDM_OWNER.REF_BATCH_PROPOSED_ACTION
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_BATCH_PROPOSED_ACTION IS 'The batch proposed action LOV';



CREATE TABLE MDM_OWNER.REF_BILLING_MODE_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_BILLING_MODE_TYPE IS 'Reference Billing Mode Type LOV.';



CREATE TABLE MDM_OWNER.REF_BRANCH_CODE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_BRANCH_CODE IS 'Reference Branch Code LOV.';



CREATE TABLE MDM_OWNER.REF_CLASSIFICATION_CODE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_CLASSIFICATION_CODE IS 'Reference Classification Code LOV.';



CREATE TABLE MDM_OWNER.REF_CORPORATION_NAME_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_CORPORATION_NAME_TYPE IS 'Reference Corporation Name Type LOV.';



CREATE TABLE MDM_OWNER.REF_CORPORATION_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_CORPORATION_TYPE IS 'Reference corpation Type LOV.';



CREATE TABLE MDM_OWNER.REF_COUNTRY_ISO
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_COUNTRY_ISO IS 'Reference Country Code LOV.';



CREATE TABLE MDM_OWNER.REF_CURRENCY
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_CURRENCY IS 'Reference Currency Type LOV.';



CREATE TABLE MDM_OWNER.REF_DEACTIVATION_REASON
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_DEACTIVATION_REASON IS 'Reference Deactivation Reason LOV.';



CREATE TABLE MDM_OWNER.REF_ENTITY_OBJECT_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_ENTITY_OBJECT_TYPE IS 'Reference Entity Object Type LOV.';



CREATE TABLE MDM_OWNER.REF_GENDER
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_GENDER IS 'Reference Gender Type LOV.';



CREATE TABLE MDM_OWNER.REF_GROUP_SUBTYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_GROUP_SUBTYPE IS 'Reference Group Subtype LOV.';



CREATE TABLE MDM_OWNER.REF_GROUP_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_GROUP_TYPE IS 'Reference Group Type LOV.';



CREATE TABLE MDM_OWNER.REF_HIGHEST_EDU_QUAL
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_HIGHEST_EDU_QUAL IS 'Reference Highest Education LOV.';



CREATE TABLE MDM_OWNER.REF_IDENTIFICATION_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_IDENTIFICATION_TYPE IS 'Reference Identification Type LOV.';



CREATE TABLE MDM_OWNER.REF_IMPORTANCE_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_IMPORTANCE_TYPE IS 'Reference Imporatance Type LOV.';



CREATE TABLE MDM_OWNER.REF_INACTIVATION_REASON
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_INACTIVATION_REASON IS 'The inactivation reason LOV';



CREATE TABLE MDM_OWNER.REF_INDUSTRY_CODE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_INDUSTRY_CODE IS 'Reference Industry Code LOV.';



CREATE TABLE MDM_OWNER.REF_LANGUAGE_CODE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE),
  VALUE                     VARCHAR2(50 BYTE),
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_LANGUAGE_CODE IS 'Reference Langauge Code LOV.';



CREATE TABLE MDM_OWNER.REF_LE_RATING
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_LE_RATING IS 'Reference LE Rating LOV.';



CREATE TABLE MDM_OWNER.REF_LE_RELATIONSHIP_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_LE_RELATIONSHIP_TYPE IS 'Reference LE Relationship Type LOV.';



CREATE TABLE MDM_OWNER.REF_LE_ROLETYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_LE_ROLETYPE IS 'Reference Legal Entity Role Type LOV.';



CREATE TABLE MDM_OWNER.REF_LOBTYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_LOBTYPE IS 'Reference Line Of Business (LOB) Type LOV.';



CREATE TABLE MDM_OWNER.REF_MATCH_ACTIONSTATUS
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_MATCH_ACTIONSTATUS IS 'The match action status LOV';



CREATE TABLE MDM_OWNER.REF_MATCH_PROPOSED_ACTION
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_MATCH_PROPOSED_ACTION IS 'The match Proposed action LOV';



CREATE TABLE MDM_OWNER.REF_MATCH_RESULT
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_MATCH_RESULT IS 'The match result LOV used to store if the match is exact match, close match etc';



CREATE TABLE MDM_OWNER.REF_MATCH_SCORE
(
  ID_PK                         VARCHAR2(50 BYTE),
  VERSION                       NUMBER          NOT NULL,
  CREATED_TS                    TIMESTAMP(6)    NOT NULL,
  DELETED_TS                    TIMESTAMP(6),
  UPDATED_TS                    TIMESTAMP(6)    NOT NULL,
  UPDATED_BY_USER               VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID             VARCHAR2(100 BYTE),
  MATCH_ENTITY_OBJECT_NAME      VARCHAR2(100 BYTE) NOT NULL,
  MATCH_ATTR_PATTERN            VARCHAR2(50 BYTE) NOT NULL,
  MATCH_RESULT_REFKEY           VARCHAR2(50 BYTE) NOT NULL,
  MATCH_PROPOSED_ACTION_REFKEY  VARCHAR2(50 BYTE) NOT NULL,
  MATCH_ATTR_PATTERN_DESCR      VARCHAR2(500 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_MATCH_SCORE IS 'The match score LOV used to store the match attribute pattern';



CREATE TABLE MDM_OWNER.REF_MATCH_THRESHOLD
(
  ID_PK                    VARCHAR2(50 BYTE),
  VERSION                  NUMBER               NOT NULL,
  CREATED_TS               TIMESTAMP(6)         NOT NULL,
  DELETED_TS               TIMESTAMP(6),
  UPDATED_TS               TIMESTAMP(6)         NOT NULL,
  UPDATED_BY_USER          VARCHAR2(50 BYTE)    NOT NULL,
  UPDATED_BY_TXN_ID        VARCHAR2(100 BYTE),
  ATTR_BLOCK_NAME          VARCHAR2(100 BYTE)   NOT NULL,
  MATCH_THRESHOLD          NUMBER               NOT NULL,
  DECAY_THRESHOLD_IN_DAYS  NUMBER               NOT NULL,
  DECAY_PERCENTAGE         NUMBER(11,8)         NOT NULL,
  MAX_DECAY_PERCENTAGE     NUMBER               NOT NULL
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_MATCH_THRESHOLD IS 'This LOV stores the threshold of the match e.g. if an attribute mathc 80% then only it should be considered a close match etc.';



CREATE TABLE MDM_OWNER.REF_MERGE_REASON
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_MERGE_REASON IS 'The reason of the merge';



CREATE TABLE MDM_OWNER.REF_PERSONNAME_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_PERSONNAME_TYPE IS 'Reference Person Name Type LOV.';



CREATE TABLE MDM_OWNER.REF_PERSON_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_PERSON_TYPE IS 'Reference Person Type LOV.';



CREATE TABLE MDM_OWNER.REF_PHONE_SUBTYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_PHONE_SUBTYPE IS 'Reference Phone Subtype LOV.';



CREATE TABLE MDM_OWNER.REF_PHONE_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_PHONE_TYPE IS 'Reference Phone Type LOV.';



CREATE TABLE MDM_OWNER.REF_PREFERENCE_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_PREFERENCE_TYPE IS 'Reference Privacy Preference Type LOV.';



CREATE TABLE MDM_OWNER.REF_PREFIX_NAME
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_PREFIX_NAME IS 'Reference Prefix Name Type LOV.';



CREATE TABLE MDM_OWNER.REF_PROPERTY_LE_RELTYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_PROPERTY_LE_RELTYPE IS 'Reference Property LE Relationship Type LOV.';



CREATE TABLE MDM_OWNER.REF_RELATIONSHIP_STATUS
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_RELATIONSHIP_STATUS IS 'Reference relationship Status Type LOV.';



CREATE TABLE MDM_OWNER.REF_SOURCE_SYSTEM
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_SOURCE_SYSTEM IS 'Reference Source system type LOV.';



CREATE TABLE MDM_OWNER.REF_STATE_PROVINCE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE),
  COUNTRY_ISO_REFKEY        VARCHAR2(50 BYTE)   NOT NULL
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_STATE_PROVINCE IS 'Reference State Province LOV.';



CREATE TABLE MDM_OWNER.REF_STATUS_IN_SOURCE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_STATUS_IN_SOURCE IS 'Reference Status In Source Type LOV.';



CREATE TABLE MDM_OWNER.REF_STATUS_TYPE
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_STATUS_TYPE IS 'Reference Status Type LOV.';



CREATE TABLE MDM_OWNER.REF_SUFFIX_NAME
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_SUFFIX_NAME IS 'Reference Suffix Name LOV.';



CREATE TABLE MDM_OWNER.REF_TERMINATION_REASON
(
  ID_PK                     VARCHAR2(50 BYTE),
  VERSION                   NUMBER              NOT NULL,
  CREATED_TS                TIMESTAMP(6)        NOT NULL,
  DELETED_TS                TIMESTAMP(6),
  UPDATED_TS                TIMESTAMP(6)        NOT NULL,
  UPDATED_BY_USER           VARCHAR2(50 BYTE)   NOT NULL,
  UPDATED_BY_TXN_ID         VARCHAR2(100 BYTE),
  CONFIG_LANGUAGE_CODE_KEY  VARCHAR2(50 BYTE)   NOT NULL,
  KEY                       VARCHAR2(50 BYTE)   NOT NULL,
  VALUE                     VARCHAR2(50 BYTE)   NOT NULL,
  DESCRIPTION               VARCHAR2(50 BYTE)
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.REF_TERMINATION_REASON IS 'Reference Termination Reason Type LOV.';



CREATE TABLE MDM_OWNER.VEHICLE
(
  ID_PK                           VARCHAR2(50 BYTE),
  VERSION                         NUMBER        NOT NULL,
  CREATED_TS                      TIMESTAMP(6)  NOT NULL,
  DELETED_TS                      TIMESTAMP(6),
  UPDATED_TS                      TIMESTAMP(6)  NOT NULL,
  UPDATED_BY_USER                 VARCHAR2(50 BYTE) NOT NULL,
  UPDATED_BY_TXN_ID               VARCHAR2(100 BYTE),
  VIN_NUMBER                      VARCHAR2(100 BYTE) NOT NULL,
  CHASSIS_NUMBER                  VARCHAR2(100 BYTE),
  MAKE                            VARCHAR2(30 BYTE),
  MODEL                           VARCHAR2(30 BYTE),
  YEAR                            VARCHAR2(30 BYTE),
  INTERIOR_COLOR                  VARCHAR2(30 BYTE),
  EXTERIOR_COLOR                  VARCHAR2(30 BYTE),
  REGISTRATION_NUMBER             VARCHAR2(30 BYTE),
  COUNTRY_OF_REGISTRATION_REFKEY  VARCHAR2(30 BYTE),
  INSURANCE_ISSUED_BY             VARCHAR2(50 BYTE),
  INSURANCE_ISSUED_DATE           DATE,
  INSURANCE_EXPIRY_DATE           DATE
)
TABLESPACE MDM_DATATS
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE MDM_OWNER.VEHICLE IS 'The vehicle information is stored in this table.';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.ID_PK IS 'primary key of the table';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.VERSION IS 'VERSION attribute used for optimistic lock';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.CREATED_TS IS 'Creation timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.DELETED_TS IS 'Soft-delete timestamp of the record';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.UPDATED_TS IS 'The timestamp when the record is last updated';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.UPDATED_BY_USER IS 'The userid which updated this record last';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.UPDATED_BY_TXN_ID IS 'The reference id of the transaction which updated the record';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.VIN_NUMBER IS 'Vehicle Identification Number';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.CHASSIS_NUMBER IS 'Chassis number of the vehicle';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.MAKE IS 'The make of the vehicle';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.MODEL IS 'The model of the vehicle';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.YEAR IS 'The year when the vehicle is manufactured';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.INTERIOR_COLOR IS 'Interior color';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.EXTERIOR_COLOR IS 'Exterior color';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.REGISTRATION_NUMBER IS 'Registration number';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.COUNTRY_OF_REGISTRATION_REFKEY IS 'Country of registration of the vehicle';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.INSURANCE_ISSUED_BY IS 'Insurance of the vehicle';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.INSURANCE_ISSUED_DATE IS 'Insurance issued date';

COMMENT ON COLUMN MDM_OWNER.VEHICLE.INSURANCE_EXPIRY_DATE IS 'Insurance expiry date';



CREATE UNIQUE INDEX MDM_OWNER.ACCOUNTADDRESSASSOC_UNIQUEKEY ON MDM_OWNER.ACCOUNT_ADDRESS_ASSOC
(ACCOUNT_IDPK, ADDRESS_IDPK, ADDRESS_TYPE_REFKEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.ACCOUNTPHONEASSOC_UNIQUEKEY ON MDM_OWNER.ACCOUNT_PHONE_ASSOC
(ACCOUNT_IDPK, PHONE_TYPE_REFKEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.ACCOUNT_ADDRESS_ASSOC_PK ON MDM_OWNER.ACCOUNT_ADDRESS_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.ACCOUNT_PHONE_ASSOC_PK ON MDM_OWNER.ACCOUNT_PHONE_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.ACCOUNT_PK ON MDM_OWNER.ACCOUNT
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.ADDRESS_PK ON MDM_OWNER.ADDRESS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_ACCOUNT_ADDRESS_ASSOC_PK ON MDM_OWNER.AL_ACCOUNT_ADDRESS_ASSOC
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_ACCOUNT_PHONE_ASSOC_PK ON MDM_OWNER.AL_ACCOUNT_PHONE_ASSOC
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_ACCOUNT_PK ON MDM_OWNER.AL_ACCOUNT
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_ADDRESS_PK ON MDM_OWNER.AL_ADDRESS
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_AUTH_ROLES_REGISTRY_PK ON MDM_OWNER.AL_AUTH_ROLES_REGISTRY
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_AUTH_USERROLE_ACCESSCONT_PK ON MDM_OWNER.AL_AUTH_USERROLE_ACCESSCONTROL
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_AUTH_USER_REGISTRY_PK ON MDM_OWNER.AL_AUTH_USER_REGISTRY
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_AUTH_USER_ROLE_ASSOC_PK ON MDM_OWNER.AL_AUTH_USER_ROLE_ASSOC
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_BATCH_ENTITY_TO_PROCESS_PK ON MDM_OWNER.AL_BATCH_ENTITY_TO_PROCESS
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_CONFIG_APP_PROPERTIES_PK ON MDM_OWNER.AL_CONFIG_APP_PROPERTIES
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_CONFIG_ERRCODE_REGISTRY_PK ON MDM_OWNER.AL_CONFIG_ERRORCODE_REGISTRY
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_CONFIG_INQUIRY_LEVELS_PK ON MDM_OWNER.AL_CONFIG_INQUIRY_LEVELS
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_CONFIG_LANGUAGE_CODE_PK ON MDM_OWNER.AL_CONFIG_LANGUAGE_CODE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_CONFIG_TXN_REGISTRY_PK ON MDM_OWNER.AL_CONFIG_TXN_REGISTRY
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_CORPORATIONNAMES_PK ON MDM_OWNER.AL_CORPORATIONNAMES
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_ENTITY_GROUP_ASSOC_PK ON MDM_OWNER.AL_ENTITY_GROUP_ASSOC
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_ENTITY_GROUP_PK ON MDM_OWNER.AL_ENTITY_GROUP
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_INACTIVE_LE_REGISTRY_PK ON MDM_OWNER.AL_INACTIVE_LE_REGISTRY
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_LE_ACCOUNT_ASSOC_PK ON MDM_OWNER.AL_LE_ACCOUNT_ASSOC
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_LE_ADDRESS_ASSOC_PK ON MDM_OWNER.AL_LE_ADDRESS_ASSOC
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_LE_CORPORATION_PK ON MDM_OWNER.AL_LE_CORPORATION
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_LE_IDENTIFIER_KYC_REGIST_PK ON MDM_OWNER.AL_LE_IDENTIFIER_KYC_REGISTRY
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_LE_PERSON_PK ON MDM_OWNER.AL_LE_PERSON
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_LE_PHONE_ASSOC_PK ON MDM_OWNER.AL_LE_PHONE_ASSOC
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_LE_PREFERENCES_PK ON MDM_OWNER.AL_LE_PREFERENCES
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_LE_PROPERTY_ASSOC_PK ON MDM_OWNER.AL_LE_PROPERTY_ASSOC
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_LE_SYSTEM_KEYS_REGISTRY_PK ON MDM_OWNER.AL_LE_SYSTEM_KEYS_REGISTRY
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_LE_TO_LE_RELATIONSHIP_PK ON MDM_OWNER.AL_LE_TO_LE_RELATIONSHIP
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_LE_VEHICLE_ASSOC_PK ON MDM_OWNER.AL_LE_VEHICLE_ASSOC
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_MATCH_CANDIDATE_LE_REGIS_PK ON MDM_OWNER.AL_MATCH_CANDIDATE_LE_REGISTRY
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_MATCH_MERGED_LE_ASSOC_PK ON MDM_OWNER.AL_MATCH_MERGED_LE_ASSOC
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_MISCELLANEOUS_INFO_PK ON MDM_OWNER.AL_MISCELLANEOUS_INFO
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_PERSONNAMES_PK ON MDM_OWNER.AL_PERSONNAMES
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_PHONE_STANDARDIZED_PK ON MDM_OWNER.AL_PHONE_STANDARDIZED
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_PROPERTY_PK ON MDM_OWNER.AL_PROPERTY
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_ACCOUNT_MDM_STATUS_PK ON MDM_OWNER.AL_REF_ACCOUNT_MDM_STATUS
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_ACCOUNT_SOURCE_STATUSPK ON MDM_OWNER.AL_REF_ACCOUNT_SOURCE_STATUS
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_ADDRESS_SUBTYPE_PK ON MDM_OWNER.AL_REF_ADDRESS_SUBTYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_ADDRESS_TYPE_PK ON MDM_OWNER.AL_REF_ADDRESS_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_AGREEMENT_TYPE_PK ON MDM_OWNER.AL_REF_AGREEMENT_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_ASSOC_TYPE_PK ON MDM_OWNER.AL_REF_ASSOC_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_BATCH_ACTION_STATUS_PK ON MDM_OWNER.AL_REF_BATCH_ACTION_STATUS
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_BATCH_PROPOSED_ACTIONPK ON MDM_OWNER.AL_REF_BATCH_PROPOSED_ACTION
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_BILLING_MODE_TYPE_PK ON MDM_OWNER.AL_REF_BILLING_MODE_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_BRANCH_CODE_PK ON MDM_OWNER.AL_REF_BRANCH_CODE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_CLASSIFICATION_CODE_PK ON MDM_OWNER.AL_REF_CLASSIFICATION_CODE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_CORPORATION_NAME_TYPEPK ON MDM_OWNER.AL_REF_CORPORATION_NAME_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_CORPORATION_NAME_TYP_PK ON MDM_OWNER.AL_REF_CORPORATION_NAME_TYP
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_CORPORATION_TYPE_PK ON MDM_OWNER.AL_REF_CORPORATION_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_COUNTRY_ISO_PK ON MDM_OWNER.AL_REF_COUNTRY_ISO
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_CURRENCY_PK ON MDM_OWNER.AL_REF_CURRENCY
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_DEACTIVATION_REASON_PK ON MDM_OWNER.AL_REF_DEACTIVATION_REASON
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_ENTITY_OBJECT_TYPE_PK ON MDM_OWNER.AL_REF_ENTITY_OBJECT_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_GENDER_PK ON MDM_OWNER.AL_REF_GENDER
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_GROUP_SUBTYPE_PK ON MDM_OWNER.AL_REF_GROUP_SUBTYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_GROUP_TYPE_PK ON MDM_OWNER.AL_REF_GROUP_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_HIGHEST_EDU_QUAL_PK ON MDM_OWNER.AL_REF_HIGHEST_EDU_QUAL
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_IDENTIFICATION_TYPE_PK ON MDM_OWNER.AL_REF_IDENTIFICATION_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_IMPORTANCE_TYPE_PK ON MDM_OWNER.AL_REF_IMPORTANCE_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_INACTIVATION_REASON_PK ON MDM_OWNER.AL_REF_INACTIVATION_REASON
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_INDUSTRY_CODE_PK ON MDM_OWNER.AL_REF_INDUSTRY_CODE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_LANGUAGE_CODE_PK ON MDM_OWNER.AL_REF_LANGUAGE_CODE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_LE_RATING_PK ON MDM_OWNER.AL_REF_LE_RATING
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_LE_RELATIONSHIP_TYPE_PK ON MDM_OWNER.AL_REF_LE_RELATIONSHIP_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_LE_ROLETYPE_PK ON MDM_OWNER.AL_REF_LE_ROLETYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_LOBTYPE_PK ON MDM_OWNER.AL_REF_LOBTYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_MATCH_ACTIONSTATUS_PK ON MDM_OWNER.AL_REF_MATCH_ACTIONSTATUS
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_MATCH_PROPOSED_ACTIONPK ON MDM_OWNER.AL_REF_MATCH_PROPOSED_ACTION
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_MATCH_RESULT_PK ON MDM_OWNER.AL_REF_MATCH_RESULT
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_MATCH_SCORE_PK ON MDM_OWNER.AL_REF_MATCH_SCORE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_MATCH_THRESHOLD_PK ON MDM_OWNER.AL_REF_MATCH_THRESHOLD
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_MERGE_REASON_PK ON MDM_OWNER.AL_REF_MERGE_REASON
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_PERSONNAME_TYPE_PK ON MDM_OWNER.AL_REF_PERSONNAME_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_PERSON_TYPE_PK ON MDM_OWNER.AL_REF_PERSON_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_PHONE_SUBTYPE_PK ON MDM_OWNER.AL_REF_PHONE_SUBTYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_PHONE_TYPE_PK ON MDM_OWNER.AL_REF_PHONE_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_PREFERENCE_TYPE_PK ON MDM_OWNER.AL_REF_PREFERENCE_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_PREFIX_NAME_PK ON MDM_OWNER.AL_REF_PREFIX_NAME
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_PROPERTY_LE_RELTYPE_PK ON MDM_OWNER.AL_REF_PROPERTY_LE_RELTYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_RELATIONSHIP_STATUS_PK ON MDM_OWNER.AL_REF_RELATIONSHIP_STATUS
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_SOURCE_SYSTEM_PK ON MDM_OWNER.AL_REF_SOURCE_SYSTEM
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_STATE_PROVINCE_PK ON MDM_OWNER.AL_REF_STATE_PROVINCE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_STATUS_IN_SOURCE_PK ON MDM_OWNER.AL_REF_STATUS_IN_SOURCE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_STATUS_TYPE_PK ON MDM_OWNER.AL_REF_STATUS_TYPE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_SUFFIX_NAME_PK ON MDM_OWNER.AL_REF_SUFFIX_NAME
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_REF_TERMINATION_REASON_PK ON MDM_OWNER.AL_REF_TERMINATION_REASON
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AL_VEHICLE_PK ON MDM_OWNER.AL_VEHICLE
(AUDITLOG_ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AUTH_ROLES_REGISTRY_PK ON MDM_OWNER.AUTH_ROLES_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AUTH_ROLES_REGISTRY_UKEYINDEX ON MDM_OWNER.AUTH_ROLES_REGISTRY
(UPPER("ROLE_NAME"))
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AUTH_ROLES_REGISTRY_UNIQUEKEY ON MDM_OWNER.AUTH_ROLES_REGISTRY
(ROLE_NAME)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL_PK ON MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AUTH_USER_REGISTRY_UKEYINDEX ON MDM_OWNER.AUTH_USER_REGISTRY
(UPPER("USER_NAME"))
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AUTH_USER_ROLE_ASSOC_PK ON MDM_OWNER.AUTH_USER_ROLE_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AUTH_USER_ROLE_ASSOC_UKEY ON MDM_OWNER.AUTH_USER_ROLE_ASSOC
(AUTH_USER_REGISTRY_IDPK, AUTH_ROLES_REGISTRY_IDPK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AUTH_USER_ROLE_REGISTRY_PK ON MDM_OWNER.AUTH_USER_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.AUTH_USER_ROLE_REGISTRY_UKEY ON MDM_OWNER.AUTH_USER_REGISTRY
(USER_NAME)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.BATCH_ENTITY_TO_PROCESS_PK ON MDM_OWNER.BATCH_ENTITY_TO_PROCESS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CONFERRCODEREG_UNIQUEKEY ON MDM_OWNER.CONFIG_ERRORCODE_REGISTRY
(CONFIG_LANGUAGE_CODE_KEY, ERROR_CODE)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CONFIGINQLEVELS_UNIQUEKEY ON MDM_OWNER.CONFIG_INQUIRY_LEVELS
(INQUIRY_LEVEL, APPLICABLE_DOBJ, CHILD_DOBJ)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CONFIG_APPPROPERTIES_PK ON MDM_OWNER.CONFIG_TXN_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CONFIG_APPPROP_UNIQUEKEY ON MDM_OWNER.CONFIG_APP_PROPERTIES
(KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CONFIG_APP_PROPERTIES_PK ON MDM_OWNER.CONFIG_APP_PROPERTIES
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CONFIG_ERRORCODE_REGISTRY_PK ON MDM_OWNER.CONFIG_ERRORCODE_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CONFIG_INQUIRY_LEVELS_PK ON MDM_OWNER.CONFIG_INQUIRY_LEVELS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CONFIG_LANGCODE_UNIQUEKEY ON MDM_OWNER.CONFIG_LANGUAGE_CODE
(KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CONFIG_LANGUAGE_CODE_PK ON MDM_OWNER.CONFIG_LANGUAGE_CODE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CORPORATIONNAMES_PK ON MDM_OWNER.CORPORATIONNAMES
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CORPORATIONNAMES_UNIQKEY ON MDM_OWNER.CORPORATIONNAMES
(LEGALENTITY_IDPK, CORPORATION_NAME_TYPE_REFKEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.CORPORATION_PK ON MDM_OWNER.LE_CORPORATION
(LEGALENTITY_IDPK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.ENTITYGROUPASSOC_UNIQUEKEY ON MDM_OWNER.ENTITY_GROUP_ASSOC
(ENTITY_OBJECT_TYPE_REFKEY, ENTITY_IDPK, ENTITY_GROUP_IDPK, ASSOC_TYPE_REFKEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.ENTITY_GROUP_ASSOC_PK ON MDM_OWNER.ENTITY_GROUP_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.ENTITY_GROUP_PK ON MDM_OWNER.ENTITY_GROUP
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_ACCOUNT ON MDM_OWNER.AL_ACCOUNT
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_ACCOUNT_ADDRESS_ASSOC ON MDM_OWNER.AL_ACCOUNT_ADDRESS_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_ACCOUNT_PHONE_ASSOC ON MDM_OWNER.AL_ACCOUNT_PHONE_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_ADDRESS ON MDM_OWNER.AL_ADDRESS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_AUTH_ROLES_REGISTRY ON MDM_OWNER.AL_AUTH_ROLES_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_AUTH_USERROLE_ACCESSCONT ON MDM_OWNER.AL_AUTH_USERROLE_ACCESSCONTROL
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_AUTH_USER_REGISTRY ON MDM_OWNER.AL_AUTH_USER_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_AUTH_USER_ROLE_ASSOC ON MDM_OWNER.AL_AUTH_USER_ROLE_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_BATCH_ENTITY_TO_PROCESS ON MDM_OWNER.AL_BATCH_ENTITY_TO_PROCESS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_CONFIG_APP_PROPERTIES ON MDM_OWNER.AL_CONFIG_APP_PROPERTIES
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_CONFIG_ERRORCODE_REGIS ON MDM_OWNER.AL_CONFIG_ERRORCODE_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_CONFIG_INQUIRY_LEVELS ON MDM_OWNER.AL_CONFIG_INQUIRY_LEVELS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_CONFIG_LANGUAGE_CODE ON MDM_OWNER.AL_CONFIG_LANGUAGE_CODE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_CONFIG_TXN_REGISTRY ON MDM_OWNER.AL_CONFIG_TXN_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_CORPORATIONNAMES ON MDM_OWNER.AL_CORPORATIONNAMES
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_ENTITY_GROUP ON MDM_OWNER.AL_ENTITY_GROUP
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_ENTITY_GROUP_ASSOC ON MDM_OWNER.AL_ENTITY_GROUP_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_INACTIVE_LE_REGISTRY ON MDM_OWNER.AL_INACTIVE_LE_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LEGALENTITY ON MDM_OWNER.AL_LEGALENTITY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LE_ACCOUNT_ASSOC ON MDM_OWNER.AL_LE_ACCOUNT_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LE_ADDRESS_ASSOC ON MDM_OWNER.AL_LE_ADDRESS_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LE_CORPORATION ON MDM_OWNER.AL_LE_CORPORATION
(LEGALENTITY_IDPK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LE_IDENTIFIER_KYC_REGIS ON MDM_OWNER.AL_LE_IDENTIFIER_KYC_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LE_PERSON ON MDM_OWNER.AL_LE_PERSON
(LEGALENTITY_IDPK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LE_PHONE_ASSOC ON MDM_OWNER.AL_LE_PHONE_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LE_PREFERENCES ON MDM_OWNER.AL_LE_PREFERENCES
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LE_PROPERTY_ASSOC ON MDM_OWNER.AL_LE_PROPERTY_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LE_SYSTEM_KEYS_REGISTRY ON MDM_OWNER.AL_LE_SYSTEM_KEYS_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LE_TO_LE_RELATIONSHIP ON MDM_OWNER.AL_LE_TO_LE_RELATIONSHIP
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_LE_VEHICLE_ASSOC ON MDM_OWNER.AL_LE_VEHICLE_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_MATCH_CANDIDATE_LE_REGIS ON MDM_OWNER.AL_MATCH_CANDIDATE_LE_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_MATCH_MERGED_LE_ASSOC ON MDM_OWNER.AL_MATCH_MERGED_LE_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_MISCELLANEOUS_INFO ON MDM_OWNER.AL_MISCELLANEOUS_INFO
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_PERSONNAMES ON MDM_OWNER.AL_PERSONNAMES
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_PHONE_STANDARDIZED ON MDM_OWNER.AL_PHONE_STANDARDIZED
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_PROPERTY ON MDM_OWNER.AL_PROPERTY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_ACCOUNT_MDM_STATUS ON MDM_OWNER.AL_REF_ACCOUNT_MDM_STATUS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_ACCOUNT_SOURCE_STA ON MDM_OWNER.AL_REF_ACCOUNT_SOURCE_STATUS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_ADDRESS_SUBTYPE ON MDM_OWNER.AL_REF_ADDRESS_SUBTYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_ADDRESS_TYPE ON MDM_OWNER.AL_REF_ADDRESS_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_AGREEMENT_TYPE ON MDM_OWNER.AL_REF_AGREEMENT_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_ASSOC_TYPE ON MDM_OWNER.AL_REF_ASSOC_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_BATCH_ACTION_STATUS ON MDM_OWNER.AL_REF_BATCH_ACTION_STATUS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_BATCH_PROPOSED_ACT ON MDM_OWNER.AL_REF_BATCH_PROPOSED_ACTION
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_BILLING_MODE_TYPE ON MDM_OWNER.AL_REF_BILLING_MODE_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_BRANCH_CODE ON MDM_OWNER.AL_REF_BRANCH_CODE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_CLASSIFICATION_CODE ON MDM_OWNER.AL_REF_CLASSIFICATION_CODE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_CORPORATION_NAME_T ON MDM_OWNER.AL_REF_CORPORATION_NAME_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_CORPORATION_NAME_TYP ON MDM_OWNER.AL_REF_CORPORATION_NAME_TYP
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_CORPORATION_TYPE ON MDM_OWNER.AL_REF_CORPORATION_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_COUNTRY_ISO ON MDM_OWNER.AL_REF_COUNTRY_ISO
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_CURRENCY ON MDM_OWNER.AL_REF_CURRENCY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_DEACTIVATION_REASON ON MDM_OWNER.AL_REF_DEACTIVATION_REASON
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_ENTITY_OBJECT_TYPE ON MDM_OWNER.AL_REF_ENTITY_OBJECT_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_GENDER ON MDM_OWNER.AL_REF_GENDER
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_GROUP_SUBTYPE ON MDM_OWNER.AL_REF_GROUP_SUBTYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_GROUP_TYPE ON MDM_OWNER.AL_REF_GROUP_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_HIGHEST_EDU_QUAL ON MDM_OWNER.AL_REF_HIGHEST_EDU_QUAL
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_IDENTIFICATION_TYPE ON MDM_OWNER.AL_REF_IDENTIFICATION_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_IMPORTANCE_TYPE ON MDM_OWNER.AL_REF_IMPORTANCE_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_INACTIVATION_REASON ON MDM_OWNER.AL_REF_INACTIVATION_REASON
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_INDUSTRY_CODE ON MDM_OWNER.AL_REF_INDUSTRY_CODE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_LANGUAGE_CODE ON MDM_OWNER.AL_REF_LANGUAGE_CODE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_LE_RATING ON MDM_OWNER.AL_REF_LE_RATING
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_LE_RELATIONSHIP_TYPE ON MDM_OWNER.AL_REF_LE_RELATIONSHIP_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_LE_ROLETYPE ON MDM_OWNER.AL_REF_LE_ROLETYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_LOBTYPE ON MDM_OWNER.AL_REF_LOBTYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_MATCH_ACTIONSTATUS ON MDM_OWNER.AL_REF_MATCH_ACTIONSTATUS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_MATCH_PROPOSED_ACT ON MDM_OWNER.AL_REF_MATCH_PROPOSED_ACTION
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_MATCH_RESULT ON MDM_OWNER.AL_REF_MATCH_RESULT
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_MATCH_SCORE ON MDM_OWNER.AL_REF_MATCH_SCORE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_MATCH_THRESHOLD ON MDM_OWNER.AL_REF_MATCH_THRESHOLD
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_MERGE_REASON ON MDM_OWNER.AL_REF_MERGE_REASON
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_PERSONNAME_TYPE ON MDM_OWNER.AL_REF_PERSONNAME_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_PERSON_TYPE ON MDM_OWNER.AL_REF_PERSON_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_PHONE_SUBTYPE ON MDM_OWNER.AL_REF_PHONE_SUBTYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_PHONE_TYPE ON MDM_OWNER.AL_REF_PHONE_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_PREFERENCE_TYPE ON MDM_OWNER.AL_REF_PREFERENCE_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_PREFIX_NAME ON MDM_OWNER.AL_REF_PREFIX_NAME
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_PROPERTY_LE_RELTYPE ON MDM_OWNER.AL_REF_PROPERTY_LE_RELTYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_RELATIONSHIP_STATUS ON MDM_OWNER.AL_REF_RELATIONSHIP_STATUS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_SOURCE_SYSTEM ON MDM_OWNER.AL_REF_SOURCE_SYSTEM
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_STATE_PROVINCE ON MDM_OWNER.AL_REF_STATE_PROVINCE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_STATUS_IN_SOURCE ON MDM_OWNER.AL_REF_STATUS_IN_SOURCE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_STATUS_TYPE ON MDM_OWNER.AL_REF_STATUS_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_SUFFIX_NAME ON MDM_OWNER.AL_REF_SUFFIX_NAME
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_REF_TERMINATION_REASON ON MDM_OWNER.AL_REF_TERMINATION_REASON
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.IDXAL_VEHICLE ON MDM_OWNER.AL_VEHICLE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.INACTIVE_LE_REGISTRY_PK ON MDM_OWNER.INACTIVE_LE_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_1 ON MDM_OWNER.ACCOUNT
(SOURCE_SYSTEM_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_2 ON MDM_OWNER.ACCOUNT
(ACCOUNT_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_3 ON MDM_OWNER.ACCOUNT
(ACCOUNT_NAME2)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_ADDRESS_ASSOC_1 ON MDM_OWNER.ACCOUNT_ADDRESS_ASSOC
(ACCOUNT_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_ADDRESS_ASSOC_2 ON MDM_OWNER.ACCOUNT_ADDRESS_ASSOC
(ADDRESS_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_ADDRESS_ASSOC_3 ON MDM_OWNER.ACCOUNT_ADDRESS_ASSOC
(ADDRESS_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_ADDRESS_ASSOC_4 ON MDM_OWNER.ACCOUNT_ADDRESS_ASSOC
(ADDRESS_SUBTYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_PHONE_ASSOC_1 ON MDM_OWNER.ACCOUNT_PHONE_ASSOC
(ACCOUNT_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_PHONE_ASSOC_2 ON MDM_OWNER.ACCOUNT_PHONE_ASSOC
(PHONE_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_PHONE_ASSOC_3 ON MDM_OWNER.ACCOUNT_PHONE_ASSOC
(PHONE_SUBTYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_PHONE_ASSOC_4 ON MDM_OWNER.ACCOUNT_PHONE_ASSOC
(PHONE_NUMBER)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ACCOUNT_PHONE_ASSOC_5 ON MDM_OWNER.ACCOUNT_PHONE_ASSOC
(PHONE_STANDARDIZED_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_1 ON MDM_OWNER.ADDRESS
(ADDRESS_LINE_ONE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_10 ON MDM_OWNER.ADDRESS
(POSTAL_CODE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_11 ON MDM_OWNER.ADDRESS
(PHONETIC_ADDRESS_LINE_ONE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_12 ON MDM_OWNER.ADDRESS
(PHONETIC_ADDRESS_LINE_TWO)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_13 ON MDM_OWNER.ADDRESS
(PHONETIC_ADDRESS_LINE_THREE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_14 ON MDM_OWNER.ADDRESS
(PHONETIC_ADDRESS_LINE_FOUR)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_15 ON MDM_OWNER.ADDRESS
(PHONETIC_STREET_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_16 ON MDM_OWNER.ADDRESS
(PHONETIC_COUNTY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_17 ON MDM_OWNER.ADDRESS
(PHONETIC_CITY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_18 ON MDM_OWNER.ADDRESS
(PHONETIC_DISTRICT_ZONE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_19 ON MDM_OWNER.ADDRESS
(STREET_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_2 ON MDM_OWNER.ADDRESS
(ADDRESS_LINE_TWO)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_3 ON MDM_OWNER.ADDRESS
(ADDRESS_LINE_THREE)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_4 ON MDM_OWNER.ADDRESS
(ADDRESS_LINE_FOUR)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_5 ON MDM_OWNER.ADDRESS
(COUNTY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_6 ON MDM_OWNER.ADDRESS
(CITY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_7 ON MDM_OWNER.ADDRESS
(DISTRICT_ZONE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_8 ON MDM_OWNER.ADDRESS
(STATE_PROVINCE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ADDRESS_9 ON MDM_OWNER.ADDRESS
(COUNTRY_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_AUTH_USERROLE_ACCNTRL1 ON MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL
(PROFILE_TYPE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_AUTH_USERROLE_ACCNTRL2 ON MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL
(AUTH_USER_ROLE_REGISTRY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_AUTH_USERROLE_ACCNTRL3 ON MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL
(CONFIG_TXN_REGISTRY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_BATCH_ENTPROCESS_1 ON MDM_OWNER.BATCH_ENTITY_TO_PROCESS
(ENTITY_OBJECT_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_BATCH_ENTPROCESS_2 ON MDM_OWNER.BATCH_ENTITY_TO_PROCESS
(ENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_BATCH_ENTPROCESS_3 ON MDM_OWNER.BATCH_ENTITY_TO_PROCESS
(BATCH_PROPOSED_ACTION_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_BATCH_ENTPROCESS_4 ON MDM_OWNER.BATCH_ENTITY_TO_PROCESS
(BATCH_ACTION_STATUS_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_BATCH_ENTPROCESS_5 ON MDM_OWNER.BATCH_ENTITY_TO_PROCESS
(PROCESS_AFTER_TIMESTAMP)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_BATCH_ENTPROCESS_6 ON MDM_OWNER.BATCH_ENTITY_TO_PROCESS
(PROCESS_BEFORE_TIMESTAMP)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_BATCH_ENTPROCESS_7 ON MDM_OWNER.BATCH_ENTITY_TO_PROCESS
(ENTRY_MADE_BY_SUBSYSTEM_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_CORPORATIONNAMES_1 ON MDM_OWNER.CORPORATIONNAMES
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_CORPORATIONNAMES_2 ON MDM_OWNER.CORPORATIONNAMES
(CORPORATION_NAME_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_CORPORATIONNAMES_3 ON MDM_OWNER.CORPORATIONNAMES
(CORPORATION_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_CORPORATIONNAMES_4 ON MDM_OWNER.CORPORATIONNAMES
(SOURCE_SYSTEM_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_CORPORATIONNAMES_5 ON MDM_OWNER.CORPORATIONNAMES
(PHONETIC_CORPORATION_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ENTITY_GROUP_1 ON MDM_OWNER.ENTITY_GROUP
(GROUP_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ENTITY_GROUP_2 ON MDM_OWNER.ENTITY_GROUP
(GROUP_SUBTYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ENTITY_GROUP_3 ON MDM_OWNER.ENTITY_GROUP
(GROUP_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ENTITY_GROUP_ASSOC_1 ON MDM_OWNER.ENTITY_GROUP_ASSOC
(ENTITY_OBJECT_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ENTITY_GROUP_ASSOC_2 ON MDM_OWNER.ENTITY_GROUP_ASSOC
(ENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ENTITY_GROUP_ASSOC_3 ON MDM_OWNER.ENTITY_GROUP_ASSOC
(ENTITY_GROUP_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_ENTITY_GROUP_ASSOC_4 ON MDM_OWNER.ENTITY_GROUP_ASSOC
(ASSOC_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_INACTIVE_LE_REGISTRY_1 ON MDM_OWNER.INACTIVE_LE_REGISTRY
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_INACTIVE_LE_REGISTRY_2 ON MDM_OWNER.INACTIVE_LE_REGISTRY
(INACTIVATED_TS)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_INACTIVE_LE_REGISTRY_3 ON MDM_OWNER.INACTIVE_LE_REGISTRY
(INACTIVATION_REASON_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LEGALENTITY_1 ON MDM_OWNER.LEGALENTITY
(DISPLAY_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LEGALENTITY_10 ON MDM_OWNER.LEGALENTITY
(KYC_VERIFICATION_FLAG)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LEGALENTITY_11 ON MDM_OWNER.LEGALENTITY
(PHONETIC_DISPLAY_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LEGALENTITY_2 ON MDM_OWNER.LEGALENTITY
(ENTITY_OBJECT_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LEGALENTITY_3 ON MDM_OWNER.LEGALENTITY
(CLASSIFICATION_CODE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LEGALENTITY_4 ON MDM_OWNER.LEGALENTITY
(IMPORTANCE_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LEGALENTITY_5 ON MDM_OWNER.LEGALENTITY
(LE_RATING_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LEGALENTITY_6 ON MDM_OWNER.LEGALENTITY
(STATUS_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LEGALENTITY_7 ON MDM_OWNER.LEGALENTITY
(SOURCE_SYSTEM_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LEGALENTITY_8 ON MDM_OWNER.LEGALENTITY
(ONBOARDING_DATE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LEGALENTITY_9 ON MDM_OWNER.LEGALENTITY
(OFFBOARDING_DATE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_ACCOUNT_ASSOC_1 ON MDM_OWNER.LE_ACCOUNT_ASSOC
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_ACCOUNT_ASSOC_2 ON MDM_OWNER.LE_ACCOUNT_ASSOC
(LE_ROLETYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_ACCOUNT_ASSOC_3 ON MDM_OWNER.LE_ACCOUNT_ASSOC
(ACCOUNT_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_ACCOUNT_ASSOC_4 ON MDM_OWNER.LE_ACCOUNT_ASSOC
(ROLE_ACTIVATION_DATE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_ACCOUNT_ASSOC_5 ON MDM_OWNER.LE_ACCOUNT_ASSOC
(ROLE_DEACTIVATION_DATE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_ACCOUNT_ASSOC_6 ON MDM_OWNER.LE_ACCOUNT_ASSOC
(DEACTIVATION_REASON_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_ACCOUNT_ASSOC_7 ON MDM_OWNER.LE_ACCOUNT_ASSOC
(AGREEMENT_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_ADDRESS_ASSOC_1 ON MDM_OWNER.LE_ADDRESS_ASSOC
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_ADDRESS_ASSOC_2 ON MDM_OWNER.LE_ADDRESS_ASSOC
(ADDRESS_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_ADDRESS_ASSOC_3 ON MDM_OWNER.LE_ADDRESS_ASSOC
(ADDRESS_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_ADDRESS_ASSOC_4 ON MDM_OWNER.LE_ADDRESS_ASSOC
(ADDRESS_SUBTYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_CORPORATION_1 ON MDM_OWNER.LE_CORPORATION
(CLASSIFICATION_CODE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_CORPORATION_2 ON MDM_OWNER.LE_CORPORATION
(INDUSTRY_CODE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_CORPORATION_3 ON MDM_OWNER.LE_CORPORATION
(GOVT_REGISTRATION_DATE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_CORPORATION_4 ON MDM_OWNER.LE_CORPORATION
(COUNTRY_REGISTRATION_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_CORPORATION_5 ON MDM_OWNER.LE_CORPORATION
(NOTPROFIT_FLAG)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_IDENTKYC_REG_1 ON MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY
(IDENTIFICATION_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_IDENTKYC_REG_2 ON MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY
(IDENTIFICATION_NUMBER)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_IDENTKYC_REG_3 ON MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_IDENTKYC_REG_4 ON MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY
(SOURCE_SYSTEM_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PERSON_1 ON MDM_OWNER.LE_PERSON
(PERSON_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PERSON_2 ON MDM_OWNER.LE_PERSON
(COUNTRY_OF_BIRTH__REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PERSON_3 ON MDM_OWNER.LE_PERSON
(COUNTRY_CITIZENSHIP_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PERSON_4 ON MDM_OWNER.LE_PERSON
(COUNTRY_OF_DOMICILE__REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PERSON_5 ON MDM_OWNER.LE_PERSON
(PREFERRED_LANGUAGE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PHONE_ASSOC_1 ON MDM_OWNER.LE_PHONE_ASSOC
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PHONE_ASSOC_2 ON MDM_OWNER.LE_PHONE_ASSOC
(PHONE_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PHONE_ASSOC_3 ON MDM_OWNER.LE_PHONE_ASSOC
(PHONE_SUBTYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PHONE_ASSOC_4 ON MDM_OWNER.LE_PHONE_ASSOC
(PHONE_NUMBER)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PHONE_ASSOC_5 ON MDM_OWNER.LE_PHONE_ASSOC
(PHONE_STANDARDIZED_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PREFERENCES_1 ON MDM_OWNER.LE_PREFERENCES
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PREFERENCES_2 ON MDM_OWNER.LE_PREFERENCES
(PREFERENCE_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PROPERTY_ASSOC_1 ON MDM_OWNER.LE_PROPERTY_ASSOC
(PROPERTY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PROPERTY_ASSOC_2 ON MDM_OWNER.LE_PROPERTY_ASSOC
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_PROPERTY_ASSOC_3 ON MDM_OWNER.LE_PROPERTY_ASSOC
(PROPERTY_LE_RELTYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_SYSTEM_KEYS_REGISTRY_1 ON MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY
(SOURCE_SYSTEM_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_SYSTEM_KEYS_REGISTRY_2 ON MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY
(REFERENCE_ID)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_SYSTEM_KEYS_REGISTRY_3 ON MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_SYSTEM_KEYS_REGISTRY_4 ON MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY
(STATUS_IN_SOURCE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_TO_LE_RELATIONSHIP_1 ON MDM_OWNER.LE_TO_LE_RELATIONSHIP
(FROM_LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_TO_LE_RELATIONSHIP_2 ON MDM_OWNER.LE_TO_LE_RELATIONSHIP
(TO_LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_TO_LE_RELATIONSHIP_3 ON MDM_OWNER.LE_TO_LE_RELATIONSHIP
(LE_RELATIONSHIP_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_TO_LE_RELATIONSHIP_4 ON MDM_OWNER.LE_TO_LE_RELATIONSHIP
(RELATIONSHIP_STATUS_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_VEHICLE_ASSOC_1 ON MDM_OWNER.LE_VEHICLE_ASSOC
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_VEHICLE_ASSOC_2 ON MDM_OWNER.LE_VEHICLE_ASSOC
(LE_ROLETYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_VEHICLE_ASSOC_3 ON MDM_OWNER.LE_VEHICLE_ASSOC
(ACCOUNT_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_VEHICLE_ASSOC_4 ON MDM_OWNER.LE_VEHICLE_ASSOC
(DEACTIVATION_REASON_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_VEHICLE_ASSOC_5 ON MDM_OWNER.LE_VEHICLE_ASSOC
(AGREEMENT_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_LE_VEHICLE_ASSOC_6 ON MDM_OWNER.LE_VEHICLE_ASSOC
(VEHICLE_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_MATCH_CAND_LE_REG_1 ON MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_MATCH_CAND_LE_REG_2 ON MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY
(CANDIDATE_LEGALENTITYIDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_MATCH_CAND_LE_REG_3 ON MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY
(MATCH_PATTERN)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_MATCH_CAND_LE_REG_4 ON MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY
(MATCH_PROPOSED_ACTION_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_MATCH_CAND_LE_REG_5 ON MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY
(MATCH_ACTIONSTATUS_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_MATCH_CAND_LE_REG_6 ON MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY
(MATCH_PERCENTAGE_DESCRIPTION)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_MATCH_MERG_LE_ASSO_1 ON MDM_OWNER.MATCH_MERGED_LE_ASSOC
(SURVIVOR_LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_MATCH_MERG_LE_ASSO_2 ON MDM_OWNER.MATCH_MERGED_LE_ASSOC
(MERGED_LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_MATCH_MERG_LE_ASSO_3 ON MDM_OWNER.MATCH_MERGED_LE_ASSOC
(MERGE_REASON_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_MISCELLANEOUS_INFO_1 ON MDM_OWNER.MISCELLANEOUS_INFO
(ENTITY_OBJECT_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_MISCELLANEOUS_INFO_2 ON MDM_OWNER.MISCELLANEOUS_INFO
(ENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_1 ON MDM_OWNER.PERSONNAMES
(LEGALENTITY_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_10 ON MDM_OWNER.PERSONNAMES
(POPULAR_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_11 ON MDM_OWNER.PERSONNAMES
(SUFFIX_NAME_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_12 ON MDM_OWNER.PERSONNAMES
(SOURCE_SYSTEM_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_13 ON MDM_OWNER.PERSONNAMES
(PHONETIC_NAME_ONE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_14 ON MDM_OWNER.PERSONNAMES
(PHONETIC_NAME_TWO)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_15 ON MDM_OWNER.PERSONNAMES
(PHONETIC_NAME_THREE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_16 ON MDM_OWNER.PERSONNAMES
(PHONETIC_LAST_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_2 ON MDM_OWNER.PERSONNAMES
(PERSONNAME_TYPE_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_3 ON MDM_OWNER.PERSONNAMES
(PREFIX_NAME_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_4 ON MDM_OWNER.PERSONNAMES
(NAME_ONE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_5 ON MDM_OWNER.PERSONNAMES
(NAME_TWO)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_6 ON MDM_OWNER.PERSONNAMES
(NAME_THREE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_7 ON MDM_OWNER.PERSONNAMES
(NAME_FOUR)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_8 ON MDM_OWNER.PERSONNAMES
(LAST_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PERSONNAMES_9 ON MDM_OWNER.PERSONNAMES
(NICK_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PHONE_STANDARDIZED_1 ON MDM_OWNER.PHONE_STANDARDIZED
(ITU_COUNTRY_CALLING_CODE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PHONE_STANDARDIZED_2 ON MDM_OWNER.PHONE_STANDARDIZED
(AREA_CODE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PHONE_STANDARDIZED_3 ON MDM_OWNER.PHONE_STANDARDIZED
(EXCHANGE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PHONE_STANDARDIZED_4 ON MDM_OWNER.PHONE_STANDARDIZED
(PHONE_NUMBER)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PHONE_STANDARDIZED_5 ON MDM_OWNER.PHONE_STANDARDIZED
(EXTENSION)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PROPERTY_1 ON MDM_OWNER.PROPERTY
(PROPERTY_NAME)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_PROPERTY_2 ON MDM_OWNER.PROPERTY
(ADDRESS_IDPK)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ACCOUNT_MDM_STATUS ON MDM_OWNER.REF_ACCOUNT_MDM_STATUS
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ACCOUNT_MDM_STATUS_1 ON MDM_OWNER.REF_ACCOUNT_MDM_STATUS
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ACCOUNT_SOURCE_STAT_1 ON MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ACCOUNT_SOURCE_STAT_2 ON MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ADDRESS_SUBTYPE_1 ON MDM_OWNER.REF_ADDRESS_SUBTYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ADDRESS_SUBTYPE_2 ON MDM_OWNER.REF_ADDRESS_SUBTYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ADDRESS_TYPE_1 ON MDM_OWNER.REF_ADDRESS_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ADDRESS_TYPE_2 ON MDM_OWNER.REF_ADDRESS_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_AGREEMENT_TYPE_1 ON MDM_OWNER.REF_AGREEMENT_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_AGREEMENT_TYPE_2 ON MDM_OWNER.REF_AGREEMENT_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ASSOC_TYPE_1 ON MDM_OWNER.REF_ASSOC_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ASSOC_TYPE_2 ON MDM_OWNER.REF_ASSOC_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_BATCH_ACTION_STATUS_1 ON MDM_OWNER.REF_BATCH_ACTION_STATUS
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_BATCH_ACTION_STATUS_2 ON MDM_OWNER.REF_BATCH_ACTION_STATUS
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_BATCH_PROPOSED_ACTI_1 ON MDM_OWNER.REF_BATCH_PROPOSED_ACTION
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_BATCH_PROPOSED_ACTI_2 ON MDM_OWNER.REF_BATCH_PROPOSED_ACTION
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_BILLING_MODE_TYPE_1 ON MDM_OWNER.REF_BILLING_MODE_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_BILLING_MODE_TYPE_2 ON MDM_OWNER.REF_BILLING_MODE_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_BRANCH_CODE_1 ON MDM_OWNER.REF_BRANCH_CODE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_BRANCH_CODE_2 ON MDM_OWNER.REF_BRANCH_CODE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_CLASSIFICATION_CODE_1 ON MDM_OWNER.REF_CLASSIFICATION_CODE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_CLASSIFICATION_CODE_2 ON MDM_OWNER.REF_CLASSIFICATION_CODE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_CORPORATION_NAME_TY_1 ON MDM_OWNER.REF_CORPORATION_NAME_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_CORPORATION_NAME_TY_2 ON MDM_OWNER.REF_CORPORATION_NAME_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_CORPORATION_TYPE_1 ON MDM_OWNER.REF_CORPORATION_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_CORPORATION_TYPE_2 ON MDM_OWNER.REF_CORPORATION_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_COUNTRY_ISO_1 ON MDM_OWNER.REF_COUNTRY_ISO
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_COUNTRY_ISO_2 ON MDM_OWNER.REF_COUNTRY_ISO
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_CURRENCY_1 ON MDM_OWNER.REF_CURRENCY
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_CURRENCY_2 ON MDM_OWNER.REF_CURRENCY
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_DEACTIVATION_REASON_1 ON MDM_OWNER.REF_DEACTIVATION_REASON
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_DEACTIVATION_REASON_2 ON MDM_OWNER.REF_DEACTIVATION_REASON
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ENTITY_OBJECT_TYPE_1 ON MDM_OWNER.REF_ENTITY_OBJECT_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_ENTITY_OBJECT_TYPE_2 ON MDM_OWNER.REF_ENTITY_OBJECT_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_GENDER_1 ON MDM_OWNER.REF_GENDER
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_GENDER_2 ON MDM_OWNER.REF_GENDER
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_GROUP_SUBTYPE_1 ON MDM_OWNER.REF_GROUP_SUBTYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_GROUP_SUBTYPE_2 ON MDM_OWNER.REF_GROUP_SUBTYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_GROUP_TYPE_1 ON MDM_OWNER.REF_GROUP_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_GROUP_TYPE_2 ON MDM_OWNER.REF_GROUP_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_HIGHEST_EDU_QUAL_1 ON MDM_OWNER.REF_HIGHEST_EDU_QUAL
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_HIGHEST_EDU_QUAL_2 ON MDM_OWNER.REF_HIGHEST_EDU_QUAL
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_IDENTIFICATION_TYPE_1 ON MDM_OWNER.REF_IDENTIFICATION_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_IDENTIFICATION_TYPE_2 ON MDM_OWNER.REF_IDENTIFICATION_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_IMPORTANCE_TYPE_1 ON MDM_OWNER.REF_IMPORTANCE_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_IMPORTANCE_TYPE_2 ON MDM_OWNER.REF_IMPORTANCE_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_INACTIVATION_REASON_1 ON MDM_OWNER.REF_INACTIVATION_REASON
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_INACTIVATION_REASON_2 ON MDM_OWNER.REF_INACTIVATION_REASON
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_INDUSTRY_CODE_1 ON MDM_OWNER.REF_INDUSTRY_CODE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_INDUSTRY_CODE_2 ON MDM_OWNER.REF_INDUSTRY_CODE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_LANGUAGE_CODE_1 ON MDM_OWNER.REF_LANGUAGE_CODE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_LANGUAGE_CODE_2 ON MDM_OWNER.REF_LANGUAGE_CODE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_LE_RATING_1 ON MDM_OWNER.REF_LE_RATING
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_LE_RATING_2 ON MDM_OWNER.REF_LE_RATING
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_LE_RELATIONSHIP_TYP_1 ON MDM_OWNER.REF_LE_RELATIONSHIP_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_LE_RELATIONSHIP_TYP_2 ON MDM_OWNER.REF_LE_RELATIONSHIP_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_LE_ROLETYPE_1 ON MDM_OWNER.REF_LE_ROLETYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_LE_ROLETYPE_2 ON MDM_OWNER.REF_LE_ROLETYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_LOBTYPE_1 ON MDM_OWNER.REF_LOBTYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_LOBTYPE_2 ON MDM_OWNER.REF_LOBTYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_MATCH_ACTIONSTATUS_1 ON MDM_OWNER.REF_MATCH_ACTIONSTATUS
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_MATCH_ACTIONSTATUS_2 ON MDM_OWNER.REF_MATCH_ACTIONSTATUS
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_MATCH_PROPOSED_ACTI_1 ON MDM_OWNER.REF_MATCH_PROPOSED_ACTION
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_MATCH_PROPOSED_ACTI_2 ON MDM_OWNER.REF_MATCH_PROPOSED_ACTION
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_MATCH_RESULT_1 ON MDM_OWNER.REF_MATCH_RESULT
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_MATCH_RESULT_2 ON MDM_OWNER.REF_MATCH_RESULT
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_MERGE_REASON_1 ON MDM_OWNER.REF_MERGE_REASON
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_MERGE_REASON_2 ON MDM_OWNER.REF_MERGE_REASON
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PERSONNAME_TYPE_1 ON MDM_OWNER.REF_PERSONNAME_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PERSONNAME_TYPE_2 ON MDM_OWNER.REF_PERSONNAME_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PERSON_TYPE_1 ON MDM_OWNER.REF_PERSON_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PERSON_TYPE_2 ON MDM_OWNER.REF_PERSON_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PHONE_SUBTYPE_1 ON MDM_OWNER.REF_PHONE_SUBTYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PHONE_SUBTYPE_2 ON MDM_OWNER.REF_PHONE_SUBTYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PHONE_TYPE_1 ON MDM_OWNER.REF_PHONE_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PHONE_TYPE_2 ON MDM_OWNER.REF_PHONE_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PREFERENCE_TYPE_1 ON MDM_OWNER.REF_PREFERENCE_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PREFERENCE_TYPE_2 ON MDM_OWNER.REF_PREFERENCE_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PREFIX_NAME_1 ON MDM_OWNER.REF_PREFIX_NAME
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PREFIX_NAME_2 ON MDM_OWNER.REF_PREFIX_NAME
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PROPERTY_LE_RELTYPE_1 ON MDM_OWNER.REF_PROPERTY_LE_RELTYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_PROPERTY_LE_RELTYPE_2 ON MDM_OWNER.REF_PROPERTY_LE_RELTYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_RELATIONSHIP_STATUS_1 ON MDM_OWNER.REF_RELATIONSHIP_STATUS
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_RELATIONSHIP_STATUS_2 ON MDM_OWNER.REF_RELATIONSHIP_STATUS
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_SOURCE_SYSTEM_1 ON MDM_OWNER.REF_SOURCE_SYSTEM
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_SOURCE_SYSTEM_2 ON MDM_OWNER.REF_SOURCE_SYSTEM
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_STATE_PROVINCE_1 ON MDM_OWNER.REF_STATE_PROVINCE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_STATE_PROVINCE_2 ON MDM_OWNER.REF_STATE_PROVINCE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_STATUS_IN_SOURCE_1 ON MDM_OWNER.REF_STATUS_IN_SOURCE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_STATUS_IN_SOURCE_2 ON MDM_OWNER.REF_STATUS_IN_SOURCE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_STATUS_TYPE_1 ON MDM_OWNER.REF_STATUS_TYPE
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_STATUS_TYPE_2 ON MDM_OWNER.REF_STATUS_TYPE
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_SUFFIX_NAME_1 ON MDM_OWNER.REF_SUFFIX_NAME
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_SUFFIX_NAME_2 ON MDM_OWNER.REF_SUFFIX_NAME
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_TERMINATION_REASON_1 ON MDM_OWNER.REF_TERMINATION_REASON
(KEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_REF_TERMINATION_REASON_2 ON MDM_OWNER.REF_TERMINATION_REASON
(VALUE)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_VEHICLE_1 ON MDM_OWNER.VEHICLE
(VIN_NUMBER)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_VEHICLE_2 ON MDM_OWNER.VEHICLE
(CHASSIS_NUMBER)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_VEHICLE_3 ON MDM_OWNER.VEHICLE
(REGISTRATION_NUMBER)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE INDEX MDM_OWNER.INDX_VEHICLE_4 ON MDM_OWNER.VEHICLE
(COUNTRY_OF_REGISTRATION_REFKEY)
NOLOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LEACCOUNTASSOC__UNIQUEKEY ON MDM_OWNER.LE_ACCOUNT_ASSOC
(LEGALENTITY_IDPK, LE_ROLETYPE_REFKEY, ACCOUNT_IDPK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LEADDRESSASSOC_UNIQKEY ON MDM_OWNER.LE_ADDRESS_ASSOC
(LEGALENTITY_IDPK, ADDRESS_TYPE_REFKEY, ADDRESS_SUBTYPE_REFKEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LEGALENTITY_PK ON MDM_OWNER.LEGALENTITY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LEIDENTKYCREG_UNIQUEKEY ON MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY
(IDENTIFICATION_TYPE_REFKEY, LEGALENTITY_IDPK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LEPHONEASSOC_UNIQUEKEY ON MDM_OWNER.LE_PHONE_ASSOC
(LEGALENTITY_IDPK, PHONE_TYPE_REFKEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LEPREFERENCES_UNIQUEKEY ON MDM_OWNER.LE_PREFERENCES
(LEGALENTITY_IDPK, PREFERENCE_TYPE_REFKEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LEPROPERTYASSOC_UNIQUEKEY ON MDM_OWNER.LE_PROPERTY_ASSOC
(PROPERTY_IDPK, LEGALENTITY_IDPK, PROPERTY_LE_RELTYPE_REFKEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LESYSKEYREG_UNIQUEKEY ON MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY
(SOURCE_SYSTEM_REFKEY, LEGALENTITY_IDPK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LETOLERELATIONSHIP_UNIQUEKEY ON MDM_OWNER.LE_TO_LE_RELATIONSHIP
(FROM_LEGALENTITY_IDPK, TO_LEGALENTITY_IDPK, LE_RELATIONSHIP_TYPE_REFKEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LE_ACCOUNT_ASSOC_PK ON MDM_OWNER.LE_ACCOUNT_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LE_ADDRESS_ASSOC_PK ON MDM_OWNER.LE_ADDRESS_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY_PK ON MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LE_PHONE_ASSOC_PK ON MDM_OWNER.LE_PHONE_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LE_PREFERENCES_PK ON MDM_OWNER.LE_PREFERENCES
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LE_PROPERTY_ASSOC_PK ON MDM_OWNER.LE_PROPERTY_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY_PK ON MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LE_TO_LE_RELATIONSHIP_PK ON MDM_OWNER.LE_TO_LE_RELATIONSHIP
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.LE_VEHICLE_ASSOC_PK ON MDM_OWNER.LE_VEHICLE_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY_PK ON MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.MATCH_MERGED_LE_ASSOC_PK ON MDM_OWNER.MATCH_MERGED_LE_ASSOC
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.MISCELLANEOUS_INFO_PK ON MDM_OWNER.MISCELLANEOUS_INFO
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.PERSONNAMES_PK ON MDM_OWNER.PERSONNAMES
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.PERSONNAMES_UNIQKEY ON MDM_OWNER.PERSONNAMES
(LEGALENTITY_IDPK, PERSONNAME_TYPE_REFKEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.PERSON_PK ON MDM_OWNER.LE_PERSON
(LEGALENTITY_IDPK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.PHONE_STANDARDIZED_PK ON MDM_OWNER.PHONE_STANDARDIZED
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.PROPERTY_PK ON MDM_OWNER.PROPERTY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REFACCSOURCESTATUS_UNIQUEKEY ON MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REFBILLINGMODETYPE_UNIQUEKEY ON MDM_OWNER.REF_BILLING_MODE_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REFCLASSCODE_UNIQUEKEY ON MDM_OWNER.REF_CLASSIFICATION_CODE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REFCORPNAMETYPE_UNIQUEKEY ON MDM_OWNER.REF_CORPORATION_NAME_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REFDEACTREASON_UNIQUEKEY ON MDM_OWNER.REF_DEACTIVATION_REASON
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REFENTITYOBJECTTYPE_UNIQUEKEY ON MDM_OWNER.REF_ENTITY_OBJECT_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REFPROLERELTYPE_UNIQUEKEY ON MDM_OWNER.REF_PROPERTY_LE_RELTYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REFPROPLERELTYPE_PK ON MDM_OWNER.REF_PROPERTY_LE_RELTYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REFRELATIONSHIPST_UNIQUEKEY ON MDM_OWNER.REF_RELATIONSHIP_STATUS
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REFTERMINATEREASON_UNIQUEKEY ON MDM_OWNER.REF_TERMINATION_REASON
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_ACCMDMSTATUS_UNIQUEKEY ON MDM_OWNER.REF_ACCOUNT_MDM_STATUS
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_ACCOUNT_MDM_STATUS_PK ON MDM_OWNER.REF_ACCOUNT_MDM_STATUS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS_PK ON MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_ADDRESS_SUBTYPE_PK ON MDM_OWNER.REF_ADDRESS_SUBTYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_ADDRESS_SUBTYPE_UNIQUEKEY ON MDM_OWNER.REF_ADDRESS_SUBTYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_ADDRESS_TYPE_PK ON MDM_OWNER.REF_ADDRESS_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_ADDRESS_TYPE_UNIQUEKEY ON MDM_OWNER.REF_ADDRESS_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_AGREEMENT_TYPE_PK ON MDM_OWNER.REF_AGREEMENT_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_AGREEMENT_TYPE_UNIQUEKEY ON MDM_OWNER.REF_AGREEMENT_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_ASSOC_TYPE_PK ON MDM_OWNER.REF_ASSOC_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_ASSOC_TYPE_UNIQUEKEY ON MDM_OWNER.REF_ASSOC_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_BATCH_ACTION_STATUS_PK ON MDM_OWNER.REF_BATCH_ACTION_STATUS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_BATCH_PROPOSED_ACTION_PK ON MDM_OWNER.REF_BATCH_PROPOSED_ACTION
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_BILLING_MODE_TYPE_PK ON MDM_OWNER.REF_BILLING_MODE_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_BRANCH_CODE_PK ON MDM_OWNER.REF_BRANCH_CODE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_BRANCH_CODE_UNIQUEKEY ON MDM_OWNER.REF_BRANCH_CODE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_CLASSIFICATION_CODE_PK ON MDM_OWNER.REF_CLASSIFICATION_CODE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_CORPORATION_NAME_TYPE_PK ON MDM_OWNER.REF_CORPORATION_NAME_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_CORPORATION_TYPE_PK ON MDM_OWNER.REF_CORPORATION_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_CORPORATION_TYPE_UNIQUEKEY ON MDM_OWNER.REF_CORPORATION_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_COUNTRY_ISO_PK ON MDM_OWNER.REF_COUNTRY_ISO
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_COUNTRY_ISO_UNIQUEKEY ON MDM_OWNER.REF_COUNTRY_ISO
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_CURRENCY_PK ON MDM_OWNER.REF_CURRENCY
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_CURRENCY_UNIQUEKEY ON MDM_OWNER.REF_CURRENCY
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_DEACTIVATION_REASON_PK ON MDM_OWNER.REF_DEACTIVATION_REASON
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_ENTITY_OBJECT_TYPE_PK ON MDM_OWNER.REF_ENTITY_OBJECT_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_GENDER_PK ON MDM_OWNER.REF_GENDER
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_GENDER_UNIQUEKEY ON MDM_OWNER.REF_GENDER
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_GROUPTYPEUNIQUEKEY ON MDM_OWNER.REF_GROUP_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_GROUP_SUBTYPE_PK ON MDM_OWNER.REF_GROUP_SUBTYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_GROUP_SUBTYPE_UNIQUEKEY ON MDM_OWNER.REF_GROUP_SUBTYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_GROUP_TYPE_PK ON MDM_OWNER.REF_GROUP_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_HIGHEST_EDU_QUAL_PK ON MDM_OWNER.REF_HIGHEST_EDU_QUAL
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_HIGHEST_EDU_QUAL_UNIQUEKEY ON MDM_OWNER.REF_HIGHEST_EDU_QUAL
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_IDENTIFICATION_TYPE_PK ON MDM_OWNER.REF_IDENTIFICATION_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_IDENTIFTYPE_UNIQUEKEY ON MDM_OWNER.REF_IDENTIFICATION_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_IMPORTANCE_TYPE_PK ON MDM_OWNER.REF_IMPORTANCE_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_IMPORTANCE_TYPE_UNIQUEKEY ON MDM_OWNER.REF_IMPORTANCE_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_INACTIVATION_REASON_PK ON MDM_OWNER.REF_INACTIVATION_REASON
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_INACTIVATION_REASON_UKEY ON MDM_OWNER.REF_INACTIVATION_REASON
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_INDUSTRY_CODE_PK ON MDM_OWNER.REF_INDUSTRY_CODE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_INDUSTRY_CODE_UNIQUEKEY ON MDM_OWNER.REF_INDUSTRY_CODE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_LANGUAGE_CODE_PK ON MDM_OWNER.REF_LANGUAGE_CODE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_LANGUAGE_CODE_UNIQUEKEY ON MDM_OWNER.REF_LANGUAGE_CODE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_LERELATIONTYPE_UNIQUEKEY ON MDM_OWNER.REF_LE_RELATIONSHIP_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_LE_RATING_PK ON MDM_OWNER.REF_LE_RATING
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_LE_RATING_UNIQUEKEY ON MDM_OWNER.REF_LE_RATING
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_LE_RELATIONSHIP_TYPE_PK ON MDM_OWNER.REF_LE_RELATIONSHIP_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_LE_ROLETYPE_PK ON MDM_OWNER.REF_LE_ROLETYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_LE_ROLETYPE_UNIQUEKEY ON MDM_OWNER.REF_LE_ROLETYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_LOBTYPE_PK ON MDM_OWNER.REF_LOBTYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_LOBTYPE_UNIQUEKEY ON MDM_OWNER.REF_LOBTYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MATCH_ACTIONSTATUS_PK ON MDM_OWNER.REF_MATCH_ACTIONSTATUS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MATCH_ACTIONSTATUS_UKEY ON MDM_OWNER.REF_MATCH_ACTIONSTATUS
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MATCH_PROPOSED_ACTION_PK ON MDM_OWNER.REF_MATCH_PROPOSED_ACTION
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MATCH_PROPOSED_ACTION_UKEY ON MDM_OWNER.REF_MATCH_PROPOSED_ACTION
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MATCH_RESULT_PK ON MDM_OWNER.REF_MATCH_RESULT
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MATCH_RESULT_UKEY ON MDM_OWNER.REF_MATCH_RESULT
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MATCH_SCORE_PK ON MDM_OWNER.REF_MATCH_SCORE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MATCH_SCORE_UKEY ON MDM_OWNER.REF_MATCH_SCORE
(MATCH_ENTITY_OBJECT_NAME, MATCH_ATTR_PATTERN, MATCH_RESULT_REFKEY, MATCH_PROPOSED_ACTION_REFKEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MATCH_THRESHOLD_PK ON MDM_OWNER.REF_MATCH_THRESHOLD
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MATCH_THRESHOLD_UKEY ON MDM_OWNER.REF_MATCH_THRESHOLD
(ATTR_BLOCK_NAME)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MERGE_REASON_PK ON MDM_OWNER.REF_MERGE_REASON
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_MERGE_REASON_UKEY ON MDM_OWNER.REF_MERGE_REASON
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PERSONNAME_TYPE_PK ON MDM_OWNER.REF_PERSONNAME_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PERSONNAME_TYPE_UNIQUEKEY ON MDM_OWNER.REF_PERSONNAME_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PERSON_TYPE_PK ON MDM_OWNER.REF_PERSON_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PERSON_TYPE_UNIQUEKEY ON MDM_OWNER.REF_PERSON_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PHONE_SUBTYPE_PK ON MDM_OWNER.REF_PHONE_SUBTYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PHONE_SUBTYPE_UNIQUEKEY ON MDM_OWNER.REF_PHONE_SUBTYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PHONE_TYPE_PK ON MDM_OWNER.REF_PHONE_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PHONE_TYPE_UNIQUEKEY ON MDM_OWNER.REF_PHONE_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PREFERENCE_TYPE_PK ON MDM_OWNER.REF_PREFERENCE_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PREFERENCE_TYPE_UNIQUEKEY ON MDM_OWNER.REF_PREFERENCE_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PREFIX_NAME_PK ON MDM_OWNER.REF_PREFIX_NAME
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_PREFIX_NAME_UNIQUEKEY ON MDM_OWNER.REF_PREFIX_NAME
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_RELATIONSHIP_STATUS_PK ON MDM_OWNER.REF_RELATIONSHIP_STATUS
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_SOURCE_SYSTEM_PK ON MDM_OWNER.REF_SOURCE_SYSTEM
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_SOURCE_SYSTEM_UNIQUEKEY ON MDM_OWNER.REF_SOURCE_SYSTEM
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_STATE_PROVINCE_PK ON MDM_OWNER.REF_STATE_PROVINCE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_STATE_PROVINCE_UNIQUEKEY ON MDM_OWNER.REF_STATE_PROVINCE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_STATUSINSOURCE_UNIQUEKEY ON MDM_OWNER.REF_STATUS_IN_SOURCE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_STATUS_IN_SOURCE_PK ON MDM_OWNER.REF_STATUS_IN_SOURCE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_STATUS_TYPE_PK ON MDM_OWNER.REF_STATUS_TYPE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_STATUS_TYPE_UNIQUEKEY ON MDM_OWNER.REF_STATUS_TYPE
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_SUFFIX_NAME_PK ON MDM_OWNER.REF_SUFFIX_NAME
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_SUFFIX_NAME_UNIQUEKEY ON MDM_OWNER.REF_SUFFIX_NAME
(CONFIG_LANGUAGE_CODE_KEY, KEY)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.REF_TERMINATION_REASON_PK ON MDM_OWNER.REF_TERMINATION_REASON
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


--  There is no statement for index MDM_OWNER.SYS_C0012428.
--  The object is created automatically by Oracle when the parent object is created.

--  There is no statement for index MDM_OWNER.SYS_C0012501.
--  The object is created automatically by Oracle when the parent object is created.

--  There is no statement for index MDM_OWNER.SYS_C0012677.
--  The object is created automatically by Oracle when the parent object is created.

CREATE UNIQUE INDEX MDM_OWNER.TXNSERVICE_UNIQUE ON MDM_OWNER.CONFIG_TXN_REGISTRY
(TXNSERVICE_NAME, TXNSERVICE_CLASS, TXNSERVICE_CLASSMETHOD)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.UNIQUESERVICENAME ON MDM_OWNER.CONFIG_TXN_REGISTRY
(TXNSERVICE_NAME)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE UNIQUE INDEX MDM_OWNER.VEHICLE_PK ON MDM_OWNER.VEHICLE
(ID_PK)
LOGGING
TABLESPACE MDM_INDXTS
NOPARALLEL;


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LE_IDENTIFIER_KYC_REGISTRY AFTER INSERT ON MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_IDENTIFIER_KYC_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, IDENTIFICATION_TYPE_REFKEY, IDENTIFICATION_NUMBER, LEGALENTITY_IDPK, DOCUMENT, ISSUED_BY, ID_CONSIDERED_FOR_KYC_FLAG, ISSUED_DATE, SOURCE_SYSTEM_REFKEY, IDENTITY_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.IDENTIFICATION_TYPE_REFKEY, :NEW.IDENTIFICATION_NUMBER, :NEW.LEGALENTITY_IDPK, :NEW.DOCUMENT, :NEW.ISSUED_BY, :NEW.ID_CONSIDERED_FOR_KYC_FLAG, :NEW.ISSUED_DATE, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.IDENTITY_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LE_ADDRESS_ASSOC AFTER INSERT ON MDM_OWNER.LE_ADDRESS_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_ADDRESS_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, ADDRESS_IDPK, ADDRESS_TYPE_REFKEY, ADDRESS_SUBTYPE_REFKEY, PREFERRED_FLAG, SOLICITATION_FLAG ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.ADDRESS_IDPK, :NEW.ADDRESS_TYPE_REFKEY, :NEW.ADDRESS_SUBTYPE_REFKEY, :NEW.PREFERRED_FLAG, :NEW.SOLICITATION_FLAG); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LE_CORPORATION AFTER INSERT ON MDM_OWNER.LE_CORPORATION REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_CORPORATION ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,LEGALENTITY_IDPK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CLASSIFICATION_CODE_REFKEY, INDUSTRY_CODE_REFKEY, GOVT_REGISTRATION_DATE, COUNTRY_REGISTRATION_REFKEY, NOTPROFIT_FLAG ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.LEGALENTITY_IDPK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CLASSIFICATION_CODE_REFKEY, :NEW.INDUSTRY_CODE_REFKEY, :NEW.GOVT_REGISTRATION_DATE, :NEW.COUNTRY_REGISTRATION_REFKEY, :NEW.NOTPROFIT_FLAG); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LE_PERSON AFTER INSERT ON MDM_OWNER.LE_PERSON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PERSON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,LEGALENTITY_IDPK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PERSON_TYPE_REFKEY, GENDER_REFKEY, DATE_OF_BIRTH, COUNTRY_OF_BIRTH__REFKEY, COUNTRY_CITIZENSHIP_REFKEY, COUNTRY_OF_DOMICILE__REFKEY, MARITAL_STATUS, HIGHEST_EDU_QUAL_REFKEY, IS_DECEASED_FLAG, DECEASED_DATE, IS_HANDICAPPED_FLAG, HANDICAPPED_SINCE_DATE, NUMBER_OF_DEPENDENTS, NUMBER_OF_CHILDREN, PREFERRED_LANGUAGE_REFKEY ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.LEGALENTITY_IDPK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.PERSON_TYPE_REFKEY, :NEW.GENDER_REFKEY, :NEW.DATE_OF_BIRTH, :NEW.COUNTRY_OF_BIRTH__REFKEY, :NEW.COUNTRY_CITIZENSHIP_REFKEY, :NEW.COUNTRY_OF_DOMICILE__REFKEY, :NEW.MARITAL_STATUS, :NEW.HIGHEST_EDU_QUAL_REFKEY, :NEW.IS_DECEASED_FLAG, :NEW.DECEASED_DATE, :NEW.IS_HANDICAPPED_FLAG, :NEW.HANDICAPPED_SINCE_DATE, :NEW.NUMBER_OF_DEPENDENTS, :NEW.NUMBER_OF_CHILDREN, :NEW.PREFERRED_LANGUAGE_REFKEY); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LE_PROPERTY_ASSOC AFTER INSERT ON MDM_OWNER.LE_PROPERTY_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PROPERTY_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PROPERTY_IDPK, LEGALENTITY_IDPK, PROPERTY_LE_RELTYPE_REFKEY, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.PROPERTY_IDPK, :NEW.LEGALENTITY_IDPK, :NEW.PROPERTY_LE_RELTYPE_REFKEY, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LE_PHONE_ASSOC AFTER INSERT ON MDM_OWNER.LE_PHONE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PHONE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, PHONE_TYPE_REFKEY, PHONE_SUBTYPE_REFKEY, PREFERRED_FLAG, PHONE_NUMBER, PHONE_STANDARDIZED_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.PHONE_TYPE_REFKEY, :NEW.PHONE_SUBTYPE_REFKEY, :NEW.PREFERRED_FLAG, :NEW.PHONE_NUMBER, :NEW.PHONE_STANDARDIZED_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LE_PREFERENCES AFTER INSERT ON MDM_OWNER.LE_PREFERENCES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PREFERENCES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, PREFERENCE_TYPE_REFKEY, PREF_FLAG, PREF_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.PREFERENCE_TYPE_REFKEY, :NEW.PREF_FLAG, :NEW.PREF_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LE_SYSTEM_KEYS_REGISTRY AFTER INSERT ON MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_SYSTEM_KEYS_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, SOURCE_SYSTEM_REFKEY, REFERENCE_ID, LEGALENTITY_IDPK, STATUS_IN_SOURCE_REFKEY, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.REFERENCE_ID, :NEW.LEGALENTITY_IDPK, :NEW.STATUS_IN_SOURCE_REFKEY, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LE_TO_LE_RELATIONSHIP AFTER INSERT ON MDM_OWNER.LE_TO_LE_RELATIONSHIP REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_TO_LE_RELATIONSHIP ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, FROM_LEGALENTITY_IDPK, TO_LEGALENTITY_IDPK, LE_RELATIONSHIP_TYPE_REFKEY, RELATIONSHIP_STATUS_REFKEY, RELATIONSHIP_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.FROM_LEGALENTITY_IDPK, :NEW.TO_LEGALENTITY_IDPK, :NEW.LE_RELATIONSHIP_TYPE_REFKEY, :NEW.RELATIONSHIP_STATUS_REFKEY, :NEW.RELATIONSHIP_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LE_VEHICLE_ASSOC AFTER INSERT ON MDM_OWNER.LE_VEHICLE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_VEHICLE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, LE_ROLETYPE_REFKEY, ACCOUNT_IDPK, ROLE_ACTIVATION_DATE, ROLE_DEACTIVATION_DATE, DEACTIVATION_REASON_REFKEY, AGREEMENT_TYPE_REFKEY, AGREEMENT_TYPE_DESCRIPTION, VEHICLE_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.LE_ROLETYPE_REFKEY, :NEW.ACCOUNT_IDPK, :NEW.ROLE_ACTIVATION_DATE, :NEW.ROLE_DEACTIVATION_DATE, :NEW.DEACTIVATION_REASON_REFKEY, :NEW.AGREEMENT_TYPE_REFKEY, :NEW.AGREEMENT_TYPE_DESCRIPTION, :NEW.VEHICLE_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_MATCH_CANDIDATE_LE_REGISTRY AFTER INSERT ON MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_MATCH_CANDIDATE_LE_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, CANDIDATE_LEGALENTITYIDPK, MATCH_PATTERN, MATCH_PROPOSED_ACTION_REFKEY, MATCH_ACTIONSTATUS_REFKEY, MATCH_PERCENTAGE_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.CANDIDATE_LEGALENTITYIDPK, :NEW.MATCH_PATTERN, :NEW.MATCH_PROPOSED_ACTION_REFKEY, :NEW.MATCH_ACTIONSTATUS_REFKEY, :NEW.MATCH_PERCENTAGE_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_MATCH_MERGED_LE_ASSOC AFTER INSERT ON MDM_OWNER.MATCH_MERGED_LE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_MATCH_MERGED_LE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, SURVIVOR_LEGALENTITY_IDPK, MERGED_LEGALENTITY_IDPK, MERGE_REASON_REFKEY, COMMENTS ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.SURVIVOR_LEGALENTITY_IDPK, :NEW.MERGED_LEGALENTITY_IDPK, :NEW.MERGE_REASON_REFKEY, :NEW.COMMENTS); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_PHONE_STANDARDIZED AFTER INSERT ON MDM_OWNER.PHONE_STANDARDIZED REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_PHONE_STANDARDIZED ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ITU_COUNTRY_CALLING_CODE, AREA_CODE, EXCHANGE, PHONE_NUMBER, EXTENSION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ITU_COUNTRY_CALLING_CODE, :NEW.AREA_CODE, :NEW.EXCHANGE, :NEW.PHONE_NUMBER, :NEW.EXTENSION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_MISCELLANEOUS_INFO AFTER INSERT ON MDM_OWNER.MISCELLANEOUS_INFO REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_MISCELLANEOUS_INFO ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ENTITY_OBJECT_TYPE_REFKEY, ENTITY_IDPK, NAME1, VALUE1, NAME2, VALUE2, NAME3, VALUE3, NAME4, VALUE4, NAME5, VALUE5, NAME6, VALUE6, NAME7, VALUE7, NAME8, VALUE8, NAME9, VALUE9, NAME10, VALUE10 ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ENTITY_OBJECT_TYPE_REFKEY, :NEW.ENTITY_IDPK, :NEW.NAME1, :NEW.VALUE1, :NEW.NAME2, :NEW.VALUE2, :NEW.NAME3, :NEW.VALUE3, :NEW.NAME4, :NEW.VALUE4, :NEW.NAME5, :NEW.VALUE5, :NEW.NAME6, :NEW.VALUE6, :NEW.NAME7, :NEW.VALUE7, :NEW.NAME8, :NEW.VALUE8, :NEW.NAME9, :NEW.VALUE9, :NEW.NAME10, :NEW.VALUE10); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_PERSONNAMES AFTER INSERT ON MDM_OWNER.PERSONNAMES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_PERSONNAMES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, PERSONNAME_TYPE_REFKEY, PREFIX_NAME_REFKEY, PREFIX_MISC, NAME_ONE, NAME_TWO, NAME_THREE, NAME_FOUR, LAST_NAME, NICK_NAME, POPULAR_NAME, SUFFIX_NAME_REFKEY, SUFFIX_MISC, NAME_STANDARDISED_FLAG, SOURCE_SYSTEM_REFKEY, PHONETIC_NAME_ONE, PHONETIC_NAME_TWO, PHONETIC_NAME_THREE, PHONETIC_LAST_NAME ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.PERSONNAME_TYPE_REFKEY, :NEW.PREFIX_NAME_REFKEY, :NEW.PREFIX_MISC, :NEW.NAME_ONE, :NEW.NAME_TWO, :NEW.NAME_THREE, :NEW.NAME_FOUR, :NEW.LAST_NAME, :NEW.NICK_NAME, :NEW.POPULAR_NAME, :NEW.SUFFIX_NAME_REFKEY, :NEW.SUFFIX_MISC, :NEW.NAME_STANDARDISED_FLAG, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.PHONETIC_NAME_ONE, :NEW.PHONETIC_NAME_TWO, :NEW.PHONETIC_NAME_THREE, :NEW.PHONETIC_LAST_NAME); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_PROPERTY AFTER INSERT ON MDM_OWNER.PROPERTY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_PROPERTY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PROPERTY_NAME, ADDRESS_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.PROPERTY_NAME, :NEW.ADDRESS_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_ACCOUNT_MDM_STATUS AFTER INSERT ON MDM_OWNER.REF_ACCOUNT_MDM_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ACCOUNT_MDM_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_ACCOUNT_SOURCE_STATUS AFTER INSERT ON MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ACCOUNT_SOURCE_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_ADDRESS_SUBTYPE AFTER INSERT ON MDM_OWNER.REF_ADDRESS_SUBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ADDRESS_SUBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_ADDRESS_TYPE AFTER INSERT ON MDM_OWNER.REF_ADDRESS_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ADDRESS_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_AGREEMENT_TYPE AFTER INSERT ON MDM_OWNER.REF_AGREEMENT_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_AGREEMENT_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_BATCH_PROPOSED_ACTION AFTER INSERT ON MDM_OWNER.REF_BATCH_PROPOSED_ACTION REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BATCH_PROPOSED_ACTION ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_ASSOC_TYPE AFTER INSERT ON MDM_OWNER.REF_ASSOC_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ASSOC_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_BATCH_ACTION_STATUS AFTER INSERT ON MDM_OWNER.REF_BATCH_ACTION_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BATCH_ACTION_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_BILLING_MODE_TYPE AFTER INSERT ON MDM_OWNER.REF_BILLING_MODE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BILLING_MODE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_BRANCH_CODE AFTER INSERT ON MDM_OWNER.REF_BRANCH_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BRANCH_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_CLASSIFICATION_CODE AFTER INSERT ON MDM_OWNER.REF_CLASSIFICATION_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CLASSIFICATION_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_CORPORATION_NAME_TYPE AFTER INSERT ON MDM_OWNER.REF_CORPORATION_NAME_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CORPORATION_NAME_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_CORPORATION_TYPE AFTER INSERT ON MDM_OWNER.REF_CORPORATION_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CORPORATION_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_COUNTRY_ISO AFTER INSERT ON MDM_OWNER.REF_COUNTRY_ISO REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_COUNTRY_ISO ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_CURRENCY AFTER INSERT ON MDM_OWNER.REF_CURRENCY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CURRENCY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_ENTITY_OBJECT_TYPE AFTER INSERT ON MDM_OWNER.REF_ENTITY_OBJECT_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ENTITY_OBJECT_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_GENDER AFTER INSERT ON MDM_OWNER.REF_GENDER REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_GENDER ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_DEACTIVATION_REASON AFTER INSERT ON MDM_OWNER.REF_DEACTIVATION_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_DEACTIVATION_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_GROUP_SUBTYPE AFTER INSERT ON MDM_OWNER.REF_GROUP_SUBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_GROUP_SUBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_GROUP_TYPE AFTER INSERT ON MDM_OWNER.REF_GROUP_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_GROUP_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_HIGHEST_EDU_QUAL AFTER INSERT ON MDM_OWNER.REF_HIGHEST_EDU_QUAL REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_HIGHEST_EDU_QUAL ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_IDENTIFICATION_TYPE AFTER INSERT ON MDM_OWNER.REF_IDENTIFICATION_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_IDENTIFICATION_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_IMPORTANCE_TYPE AFTER INSERT ON MDM_OWNER.REF_IMPORTANCE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_IMPORTANCE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_INACTIVATION_REASON AFTER INSERT ON MDM_OWNER.REF_INACTIVATION_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_INACTIVATION_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_INDUSTRY_CODE AFTER INSERT ON MDM_OWNER.REF_INDUSTRY_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_INDUSTRY_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_LE_RELATIONSHIP_TYPE AFTER INSERT ON MDM_OWNER.REF_LE_RELATIONSHIP_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LE_RELATIONSHIP_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_LANGUAGE_CODE AFTER INSERT ON MDM_OWNER.REF_LANGUAGE_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LANGUAGE_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_LE_RATING AFTER INSERT ON MDM_OWNER.REF_LE_RATING REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LE_RATING ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_LE_ROLETYPE AFTER INSERT ON MDM_OWNER.REF_LE_ROLETYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LE_ROLETYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_LOBTYPE AFTER INSERT ON MDM_OWNER.REF_LOBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LOBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_MATCH_ACTIONSTATUS AFTER INSERT ON MDM_OWNER.REF_MATCH_ACTIONSTATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_ACTIONSTATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_MATCH_PROPOSED_ACTION AFTER INSERT ON MDM_OWNER.REF_MATCH_PROPOSED_ACTION REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_PROPOSED_ACTION ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_MATCH_RESULT AFTER INSERT ON MDM_OWNER.REF_MATCH_RESULT REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_RESULT ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_MATCH_SCORE AFTER INSERT ON MDM_OWNER.REF_MATCH_SCORE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_SCORE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, MATCH_ENTITY_OBJECT_NAME, MATCH_ATTR_PATTERN, MATCH_RESULT_REFKEY, MATCH_PROPOSED_ACTION_REFKEY, MATCH_ATTR_PATTERN_DESCR ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.MATCH_ENTITY_OBJECT_NAME, :NEW.MATCH_ATTR_PATTERN, :NEW.MATCH_RESULT_REFKEY, :NEW.MATCH_PROPOSED_ACTION_REFKEY, :NEW.MATCH_ATTR_PATTERN_DESCR); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_MATCH_THRESHOLD AFTER INSERT ON MDM_OWNER.REF_MATCH_THRESHOLD REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_THRESHOLD ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ATTR_BLOCK_NAME, MATCH_THRESHOLD, DECAY_THRESHOLD_IN_DAYS, DECAY_PERCENTAGE, MAX_DECAY_PERCENTAGE ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ATTR_BLOCK_NAME, :NEW.MATCH_THRESHOLD, :NEW.DECAY_THRESHOLD_IN_DAYS, :NEW.DECAY_PERCENTAGE, :NEW.MAX_DECAY_PERCENTAGE); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_PERSONNAME_TYPE AFTER INSERT ON MDM_OWNER.REF_PERSONNAME_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PERSONNAME_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_PERSON_TYPE AFTER INSERT ON MDM_OWNER.REF_PERSON_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PERSON_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_MERGE_REASON AFTER INSERT ON MDM_OWNER.REF_MERGE_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MERGE_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_PHONE_SUBTYPE AFTER INSERT ON MDM_OWNER.REF_PHONE_SUBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PHONE_SUBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_PHONE_TYPE AFTER INSERT ON MDM_OWNER.REF_PHONE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PHONE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_PREFERENCE_TYPE AFTER INSERT ON MDM_OWNER.REF_PREFERENCE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PREFERENCE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_PREFIX_NAME AFTER INSERT ON MDM_OWNER.REF_PREFIX_NAME REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PREFIX_NAME ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_PROPERTY_LE_RELTYPE AFTER INSERT ON MDM_OWNER.REF_PROPERTY_LE_RELTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PROPERTY_LE_RELTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_RELATIONSHIP_STATUS AFTER INSERT ON MDM_OWNER.REF_RELATIONSHIP_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_RELATIONSHIP_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_SOURCE_SYSTEM AFTER INSERT ON MDM_OWNER.REF_SOURCE_SYSTEM REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_SOURCE_SYSTEM ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_STATUS_IN_SOURCE AFTER INSERT ON MDM_OWNER.REF_STATUS_IN_SOURCE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_STATUS_IN_SOURCE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_STATUS_TYPE AFTER INSERT ON MDM_OWNER.REF_STATUS_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_STATUS_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_STATE_PROVINCE AFTER INSERT ON MDM_OWNER.REF_STATE_PROVINCE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_STATE_PROVINCE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION, COUNTRY_ISO_REFKEY ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION, :NEW.COUNTRY_ISO_REFKEY); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_SUFFIX_NAME AFTER INSERT ON MDM_OWNER.REF_SUFFIX_NAME REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_SUFFIX_NAME ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_REF_TERMINATION_REASON AFTER INSERT ON MDM_OWNER.REF_TERMINATION_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_TERMINATION_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_ACCOUNT AFTER UPDATE ON MDM_OWNER.ACCOUNT REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ACCOUNT ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONTRACT_SIGNED_LANG_REFKEY, CURRENCY_REFKEY, BILLING_MODE_TYPE_REFKEY, FREQUENCY_OF_PAYMENT, LOBTYPE_REFKEY, LOB_DESCRIPTION, SOURCE_SYSTEM_REFKEY, SOURCE_ACCOUNT_ID, MANAGEDBY_BU_CODE, MANAGEDBY_BU_ID, BRANCH_CODE_REFKEY, ACCOUNT_NAME, ACCOUNT_NAME2, ACCOUNT_DESCRIPTION, ACCOUNT_SOURCE_STATUS_REFKEY, ACCOUNT_MDM_STATUS_REFKEY, SIGNED_DATE, SIGNED_PLACE, EXECUTED_DATE, TERMINATED_DATE, TERMINATION_REASON_REFKEY ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONTRACT_SIGNED_LANG_REFKEY, :NEW.CURRENCY_REFKEY, :NEW.BILLING_MODE_TYPE_REFKEY, :NEW.FREQUENCY_OF_PAYMENT, :NEW.LOBTYPE_REFKEY, :NEW.LOB_DESCRIPTION, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.SOURCE_ACCOUNT_ID, :NEW.MANAGEDBY_BU_CODE, :NEW.MANAGEDBY_BU_ID, :NEW.BRANCH_CODE_REFKEY, :NEW.ACCOUNT_NAME, :NEW.ACCOUNT_NAME2, :NEW.ACCOUNT_DESCRIPTION, :NEW.ACCOUNT_SOURCE_STATUS_REFKEY, :NEW.ACCOUNT_MDM_STATUS_REFKEY, :NEW.SIGNED_DATE, :NEW.SIGNED_PLACE, :NEW.EXECUTED_DATE, :NEW.TERMINATED_DATE, :NEW.TERMINATION_REASON_REFKEY); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_AUTH_USER_REGISTRY AFTER INSERT ON MDM_OWNER.AUTH_USER_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_USER_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, USER_NAME, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.USER_NAME, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_AUTH_ROLES_REGISTRY AFTER INSERT ON MDM_OWNER.AUTH_ROLES_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_ROLES_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ROLE_NAME, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ROLE_NAME, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_VEHICLE AFTER INSERT ON MDM_OWNER.VEHICLE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_VEHICLE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, VIN_NUMBER, CHASSIS_NUMBER, MAKE, MODEL, YEAR, INTERIOR_COLOR, EXTERIOR_COLOR, REGISTRATION_NUMBER, COUNTRY_OF_REGISTRATION_REFKEY, INSURANCE_ISSUED_BY, INSURANCE_ISSUED_DATE, INSURANCE_EXPIRY_DATE ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.VIN_NUMBER, :NEW.CHASSIS_NUMBER, :NEW.MAKE, :NEW.MODEL, :NEW.YEAR, :NEW.INTERIOR_COLOR, :NEW.EXTERIOR_COLOR, :NEW.REGISTRATION_NUMBER, :NEW.COUNTRY_OF_REGISTRATION_REFKEY, :NEW.INSURANCE_ISSUED_BY, :NEW.INSURANCE_ISSUED_DATE, :NEW.INSURANCE_EXPIRY_DATE); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_ACCOUNT_PHONE_ASSOC AFTER UPDATE ON MDM_OWNER.ACCOUNT_PHONE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ACCOUNT_PHONE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ACCOUNT_IDPK, PHONE_TYPE_REFKEY, PHONE_SUBTYPE_REFKEY, PREFERRED_FLAG, PHONE_NUMBER, PHONE_STANDARDIZED_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ACCOUNT_IDPK, :NEW.PHONE_TYPE_REFKEY, :NEW.PHONE_SUBTYPE_REFKEY, :NEW.PREFERRED_FLAG, :NEW.PHONE_NUMBER, :NEW.PHONE_STANDARDIZED_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_ADDRESS AFTER UPDATE ON MDM_OWNER.ADDRESS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ADDRESS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ADDRESS_LINE_ONE, ADDRESS_LINE_TWO, ADDRESS_LINE_THREE, ADDRESS_LINE_FOUR, STREET_NUMBER, STREET_NAME, HOUSE_NUMBER, BUILDING_NUMBER, COUNTY, CITY, DISTRICT_ZONE, STATE_PROVINCE_REFKEY, COUNTRY_REFKEY, POSTAL_CODE, NEAREST_LANDMARK, BOX_DESIGNATOR, BOX_IDENTIFIER, NEAREST_RAILWAY_STATION, NEAREST_AIRPORT, PHONETIC_ADDRESS_LINE_ONE, PHONETIC_ADDRESS_LINE_TWO, PHONETIC_ADDRESS_LINE_THREE, PHONETIC_ADDRESS_LINE_FOUR, PHONETIC_STREET_NAME, PHONETIC_COUNTY, PHONETIC_CITY, PHONETIC_DISTRICT_ZONE ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ADDRESS_LINE_ONE, :NEW.ADDRESS_LINE_TWO, :NEW.ADDRESS_LINE_THREE, :NEW.ADDRESS_LINE_FOUR, :NEW.STREET_NUMBER, :NEW.STREET_NAME, :NEW.HOUSE_NUMBER, :NEW.BUILDING_NUMBER, :NEW.COUNTY, :NEW.CITY, :NEW.DISTRICT_ZONE, :NEW.STATE_PROVINCE_REFKEY, :NEW.COUNTRY_REFKEY, :NEW.POSTAL_CODE, :NEW.NEAREST_LANDMARK, :NEW.BOX_DESIGNATOR, :NEW.BOX_IDENTIFIER, :NEW.NEAREST_RAILWAY_STATION, :NEW.NEAREST_AIRPORT, :NEW.PHONETIC_ADDRESS_LINE_ONE, :NEW.PHONETIC_ADDRESS_LINE_TWO, :NEW.PHONETIC_ADDRESS_LINE_THREE, :NEW.PHONETIC_ADDRESS_LINE_FOUR, :NEW.PHONETIC_STREET_NAME, :NEW.PHONETIC_COUNTY, :NEW.PHONETIC_CITY, :NEW.PHONETIC_DISTRICT_ZONE); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_ACCOUNT_ADDRESS_ASSOC AFTER UPDATE ON MDM_OWNER.ACCOUNT_ADDRESS_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ACCOUNT_ADDRESS_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ACCOUNT_IDPK, ADDRESS_IDPK, ADDRESS_TYPE_REFKEY, ADDRESS_SUBTYPE_REFKEY, PREFERRED_FLAG, SOLICITATION_FLAG ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ACCOUNT_IDPK, :NEW.ADDRESS_IDPK, :NEW.ADDRESS_TYPE_REFKEY, :NEW.ADDRESS_SUBTYPE_REFKEY, :NEW.PREFERRED_FLAG, :NEW.SOLICITATION_FLAG); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_AUTH_USERROLE_ACCESSCONTROL AFTER UPDATE ON MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_USERROLE_ACCESSCONTROL ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PROFILE_TYPE, AUTH_USER_ROLE_REGISTRY_IDPK, CONFIG_TXN_REGISTRY_IDPK, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.PROFILE_TYPE, :NEW.AUTH_USER_ROLE_REGISTRY_IDPK, :NEW.CONFIG_TXN_REGISTRY_IDPK, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_AUTH_USER_REGISTRY AFTER UPDATE ON MDM_OWNER.AUTH_USER_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_USER_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, USER_NAME, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.USER_NAME, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_AUTH_USER_ROLE_ASSOC AFTER UPDATE ON MDM_OWNER.AUTH_USER_ROLE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_USER_ROLE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, AUTH_USER_REGISTRY_IDPK, AUTH_ROLES_REGISTRY_IDPK, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.AUTH_USER_REGISTRY_IDPK, :NEW.AUTH_ROLES_REGISTRY_IDPK, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_BATCH_ENTITY_TO_PROCESS AFTER UPDATE ON MDM_OWNER.BATCH_ENTITY_TO_PROCESS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_BATCH_ENTITY_TO_PROCESS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ENTITY_OBJECT_TYPE_REFKEY, ENTITY_IDPK, BATCH_PROPOSED_ACTION_REFKEY, BATCH_ACTION_STATUS_REFKEY, PROCESS_AFTER_TIMESTAMP, PROCESS_BEFORE_TIMESTAMP, ENTRY_MADE_BY_SUBSYSTEM_NAME, COMMENTS ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ENTITY_OBJECT_TYPE_REFKEY, :NEW.ENTITY_IDPK, :NEW.BATCH_PROPOSED_ACTION_REFKEY, :NEW.BATCH_ACTION_STATUS_REFKEY, :NEW.PROCESS_AFTER_TIMESTAMP, :NEW.PROCESS_BEFORE_TIMESTAMP, :NEW.ENTRY_MADE_BY_SUBSYSTEM_NAME, :NEW.COMMENTS); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_CONFIG_APP_PROPERTIES AFTER UPDATE ON MDM_OWNER.CONFIG_APP_PROPERTIES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_APP_PROPERTIES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, KEY, VALUE, VALUE_DEFAULT, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.KEY, :NEW.VALUE, :NEW.VALUE_DEFAULT, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_CONFIG_INQUIRY_LEVELS AFTER UPDATE ON MDM_OWNER.CONFIG_INQUIRY_LEVELS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_INQUIRY_LEVELS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, INQUIRY_LEVEL, APPLICABLE_DOBJ, CHILD_DOBJ, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.INQUIRY_LEVEL, :NEW.APPLICABLE_DOBJ, :NEW.CHILD_DOBJ, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_CONFIG_LANGUAGE_CODE AFTER UPDATE ON MDM_OWNER.CONFIG_LANGUAGE_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_LANGUAGE_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_CONFIG_ERRORCODE_REGISTRY AFTER UPDATE ON MDM_OWNER.CONFIG_ERRORCODE_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_ERRORCODE_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CONFIG_LANGUAGE_CODE_KEY, ERROR_CODE, ERROR_MESSAGE, DESCRIPTION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.ERROR_CODE, :NEW.ERROR_MESSAGE, :NEW.DESCRIPTION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_CONFIG_TXN_REGISTRY AFTER UPDATE ON MDM_OWNER.CONFIG_TXN_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_TXN_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, TXNSERVICE_NAME, TXNSERVICE_CLASS, TXNSERVICE_CLASSMETHOD, DESCRIPTION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_TXN_REF_ID ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.TXNSERVICE_NAME, :NEW.TXNSERVICE_CLASS, :NEW.TXNSERVICE_CLASSMETHOD, :NEW.DESCRIPTION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_TXN_REF_ID); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_CORPORATIONNAMES AFTER UPDATE ON MDM_OWNER.CORPORATIONNAMES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CORPORATIONNAMES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, CORPORATION_NAME_TYPE_REFKEY, CORPORATION_NAME, SOURCE_SYSTEM_REFKEY, PHONETIC_CORPORATION_NAME ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.CORPORATION_NAME_TYPE_REFKEY, :NEW.CORPORATION_NAME, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.PHONETIC_CORPORATION_NAME); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_ENTITY_GROUP AFTER UPDATE ON MDM_OWNER.ENTITY_GROUP REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ENTITY_GROUP ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, GROUP_TYPE_REFKEY, GROUP_SUBTYPE_REFKEY, GROUP_NAME, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.GROUP_TYPE_REFKEY, :NEW.GROUP_SUBTYPE_REFKEY, :NEW.GROUP_NAME, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_ENTITY_GROUP_ASSOC AFTER UPDATE ON MDM_OWNER.ENTITY_GROUP_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ENTITY_GROUP_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ENTITY_OBJECT_TYPE_REFKEY, ENTITY_IDPK, ENTITY_GROUP_IDPK, ASSOC_TYPE_REFKEY, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ENTITY_OBJECT_TYPE_REFKEY, :NEW.ENTITY_IDPK, :NEW.ENTITY_GROUP_IDPK, :NEW.ASSOC_TYPE_REFKEY, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_INACTIVE_LE_REGISTRY AFTER UPDATE ON MDM_OWNER.INACTIVE_LE_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_INACTIVE_LE_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, INACTIVATED_TS, INACTIVATION_REASON_REFKEY, COMMENTS ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.INACTIVATED_TS, :NEW.INACTIVATION_REASON_REFKEY, :NEW.COMMENTS); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LEGALENTITY AFTER UPDATE ON MDM_OWNER.LEGALENTITY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LEGALENTITY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, DISPLAY_NAME, ENTITY_OBJECT_TYPE_REFKEY, CLASSIFICATION_CODE_REFKEY, IMPORTANCE_TYPE_REFKEY, LE_RATING_REFKEY, STATUS_TYPE_REFKEY, SOURCE_SYSTEM_REFKEY, ONBOARDING_DATE, OFFBOARDING_DATE, KYC_VERIFICATION_FLAG, DESCRIPTION, PHONETIC_DISPLAY_NAME ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.DISPLAY_NAME, :NEW.ENTITY_OBJECT_TYPE_REFKEY, :NEW.CLASSIFICATION_CODE_REFKEY, :NEW.IMPORTANCE_TYPE_REFKEY, :NEW.LE_RATING_REFKEY, :NEW.STATUS_TYPE_REFKEY, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.ONBOARDING_DATE, :NEW.OFFBOARDING_DATE, :NEW.KYC_VERIFICATION_FLAG, :NEW.DESCRIPTION, :NEW.PHONETIC_DISPLAY_NAME); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LE_CORPORATION AFTER UPDATE ON MDM_OWNER.LE_CORPORATION REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_CORPORATION ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,LEGALENTITY_IDPK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CLASSIFICATION_CODE_REFKEY, INDUSTRY_CODE_REFKEY, GOVT_REGISTRATION_DATE, COUNTRY_REGISTRATION_REFKEY, NOTPROFIT_FLAG ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.LEGALENTITY_IDPK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CLASSIFICATION_CODE_REFKEY, :NEW.INDUSTRY_CODE_REFKEY, :NEW.GOVT_REGISTRATION_DATE, :NEW.COUNTRY_REGISTRATION_REFKEY, :NEW.NOTPROFIT_FLAG); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LE_ACCOUNT_ASSOC AFTER UPDATE ON MDM_OWNER.LE_ACCOUNT_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_ACCOUNT_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, LE_ROLETYPE_REFKEY, ACCOUNT_IDPK, ROLE_ACTIVATION_DATE, ROLE_DEACTIVATION_DATE, DEACTIVATION_REASON_REFKEY, AGREEMENT_TYPE_REFKEY, AGREEMENT_TYPE_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.LE_ROLETYPE_REFKEY, :NEW.ACCOUNT_IDPK, :NEW.ROLE_ACTIVATION_DATE, :NEW.ROLE_DEACTIVATION_DATE, :NEW.DEACTIVATION_REASON_REFKEY, :NEW.AGREEMENT_TYPE_REFKEY, :NEW.AGREEMENT_TYPE_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LE_ADDRESS_ASSOC AFTER UPDATE ON MDM_OWNER.LE_ADDRESS_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_ADDRESS_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, ADDRESS_IDPK, ADDRESS_TYPE_REFKEY, ADDRESS_SUBTYPE_REFKEY, PREFERRED_FLAG, SOLICITATION_FLAG ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.ADDRESS_IDPK, :NEW.ADDRESS_TYPE_REFKEY, :NEW.ADDRESS_SUBTYPE_REFKEY, :NEW.PREFERRED_FLAG, :NEW.SOLICITATION_FLAG); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LE_IDENTIFIER_KYC_REGISTRY AFTER UPDATE ON MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_IDENTIFIER_KYC_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, IDENTIFICATION_TYPE_REFKEY, IDENTIFICATION_NUMBER, LEGALENTITY_IDPK, DOCUMENT, ISSUED_BY, ID_CONSIDERED_FOR_KYC_FLAG, ISSUED_DATE, SOURCE_SYSTEM_REFKEY, IDENTITY_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.IDENTIFICATION_TYPE_REFKEY, :NEW.IDENTIFICATION_NUMBER, :NEW.LEGALENTITY_IDPK, :NEW.DOCUMENT, :NEW.ISSUED_BY, :NEW.ID_CONSIDERED_FOR_KYC_FLAG, :NEW.ISSUED_DATE, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.IDENTITY_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LE_PERSON AFTER UPDATE ON MDM_OWNER.LE_PERSON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PERSON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,LEGALENTITY_IDPK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PERSON_TYPE_REFKEY, GENDER_REFKEY, DATE_OF_BIRTH, COUNTRY_OF_BIRTH__REFKEY, COUNTRY_CITIZENSHIP_REFKEY, COUNTRY_OF_DOMICILE__REFKEY, MARITAL_STATUS, HIGHEST_EDU_QUAL_REFKEY, IS_DECEASED_FLAG, DECEASED_DATE, IS_HANDICAPPED_FLAG, HANDICAPPED_SINCE_DATE, NUMBER_OF_DEPENDENTS, NUMBER_OF_CHILDREN, PREFERRED_LANGUAGE_REFKEY ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.LEGALENTITY_IDPK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.PERSON_TYPE_REFKEY, :NEW.GENDER_REFKEY, :NEW.DATE_OF_BIRTH, :NEW.COUNTRY_OF_BIRTH__REFKEY, :NEW.COUNTRY_CITIZENSHIP_REFKEY, :NEW.COUNTRY_OF_DOMICILE__REFKEY, :NEW.MARITAL_STATUS, :NEW.HIGHEST_EDU_QUAL_REFKEY, :NEW.IS_DECEASED_FLAG, :NEW.DECEASED_DATE, :NEW.IS_HANDICAPPED_FLAG, :NEW.HANDICAPPED_SINCE_DATE, :NEW.NUMBER_OF_DEPENDENTS, :NEW.NUMBER_OF_CHILDREN, :NEW.PREFERRED_LANGUAGE_REFKEY); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LE_PHONE_ASSOC AFTER UPDATE ON MDM_OWNER.LE_PHONE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PHONE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, PHONE_TYPE_REFKEY, PHONE_SUBTYPE_REFKEY, PREFERRED_FLAG, PHONE_NUMBER, PHONE_STANDARDIZED_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.PHONE_TYPE_REFKEY, :NEW.PHONE_SUBTYPE_REFKEY, :NEW.PREFERRED_FLAG, :NEW.PHONE_NUMBER, :NEW.PHONE_STANDARDIZED_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LE_PREFERENCES AFTER UPDATE ON MDM_OWNER.LE_PREFERENCES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PREFERENCES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, PREFERENCE_TYPE_REFKEY, PREF_FLAG, PREF_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.PREFERENCE_TYPE_REFKEY, :NEW.PREF_FLAG, :NEW.PREF_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LE_PROPERTY_ASSOC AFTER UPDATE ON MDM_OWNER.LE_PROPERTY_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PROPERTY_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PROPERTY_IDPK, LEGALENTITY_IDPK, PROPERTY_LE_RELTYPE_REFKEY, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.PROPERTY_IDPK, :NEW.LEGALENTITY_IDPK, :NEW.PROPERTY_LE_RELTYPE_REFKEY, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LE_TO_LE_RELATIONSHIP AFTER UPDATE ON MDM_OWNER.LE_TO_LE_RELATIONSHIP REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_TO_LE_RELATIONSHIP ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, FROM_LEGALENTITY_IDPK, TO_LEGALENTITY_IDPK, LE_RELATIONSHIP_TYPE_REFKEY, RELATIONSHIP_STATUS_REFKEY, RELATIONSHIP_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.FROM_LEGALENTITY_IDPK, :NEW.TO_LEGALENTITY_IDPK, :NEW.LE_RELATIONSHIP_TYPE_REFKEY, :NEW.RELATIONSHIP_STATUS_REFKEY, :NEW.RELATIONSHIP_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LE_VEHICLE_ASSOC AFTER UPDATE ON MDM_OWNER.LE_VEHICLE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_VEHICLE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, LE_ROLETYPE_REFKEY, ACCOUNT_IDPK, ROLE_ACTIVATION_DATE, ROLE_DEACTIVATION_DATE, DEACTIVATION_REASON_REFKEY, AGREEMENT_TYPE_REFKEY, AGREEMENT_TYPE_DESCRIPTION, VEHICLE_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.LE_ROLETYPE_REFKEY, :NEW.ACCOUNT_IDPK, :NEW.ROLE_ACTIVATION_DATE, :NEW.ROLE_DEACTIVATION_DATE, :NEW.DEACTIVATION_REASON_REFKEY, :NEW.AGREEMENT_TYPE_REFKEY, :NEW.AGREEMENT_TYPE_DESCRIPTION, :NEW.VEHICLE_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_LE_SYSTEM_KEYS_REGISTRY AFTER UPDATE ON MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_SYSTEM_KEYS_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, SOURCE_SYSTEM_REFKEY, REFERENCE_ID, LEGALENTITY_IDPK, STATUS_IN_SOURCE_REFKEY, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.REFERENCE_ID, :NEW.LEGALENTITY_IDPK, :NEW.STATUS_IN_SOURCE_REFKEY, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_MATCH_CANDIDATE_LE_REGISTRY AFTER UPDATE ON MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_MATCH_CANDIDATE_LE_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, CANDIDATE_LEGALENTITYIDPK, MATCH_PATTERN, MATCH_PROPOSED_ACTION_REFKEY, MATCH_ACTIONSTATUS_REFKEY, MATCH_PERCENTAGE_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.CANDIDATE_LEGALENTITYIDPK, :NEW.MATCH_PATTERN, :NEW.MATCH_PROPOSED_ACTION_REFKEY, :NEW.MATCH_ACTIONSTATUS_REFKEY, :NEW.MATCH_PERCENTAGE_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_MATCH_MERGED_LE_ASSOC AFTER UPDATE ON MDM_OWNER.MATCH_MERGED_LE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_MATCH_MERGED_LE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, SURVIVOR_LEGALENTITY_IDPK, MERGED_LEGALENTITY_IDPK, MERGE_REASON_REFKEY, COMMENTS ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.SURVIVOR_LEGALENTITY_IDPK, :NEW.MERGED_LEGALENTITY_IDPK, :NEW.MERGE_REASON_REFKEY, :NEW.COMMENTS); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_MISCELLANEOUS_INFO AFTER UPDATE ON MDM_OWNER.MISCELLANEOUS_INFO REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_MISCELLANEOUS_INFO ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ENTITY_OBJECT_TYPE_REFKEY, ENTITY_IDPK, NAME1, VALUE1, NAME2, VALUE2, NAME3, VALUE3, NAME4, VALUE4, NAME5, VALUE5, NAME6, VALUE6, NAME7, VALUE7, NAME8, VALUE8, NAME9, VALUE9, NAME10, VALUE10 ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ENTITY_OBJECT_TYPE_REFKEY, :NEW.ENTITY_IDPK, :NEW.NAME1, :NEW.VALUE1, :NEW.NAME2, :NEW.VALUE2, :NEW.NAME3, :NEW.VALUE3, :NEW.NAME4, :NEW.VALUE4, :NEW.NAME5, :NEW.VALUE5, :NEW.NAME6, :NEW.VALUE6, :NEW.NAME7, :NEW.VALUE7, :NEW.NAME8, :NEW.VALUE8, :NEW.NAME9, :NEW.VALUE9, :NEW.NAME10, :NEW.VALUE10); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_PERSONNAMES AFTER UPDATE ON MDM_OWNER.PERSONNAMES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_PERSONNAMES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, PERSONNAME_TYPE_REFKEY, PREFIX_NAME_REFKEY, PREFIX_MISC, NAME_ONE, NAME_TWO, NAME_THREE, NAME_FOUR, LAST_NAME, NICK_NAME, POPULAR_NAME, SUFFIX_NAME_REFKEY, SUFFIX_MISC, NAME_STANDARDISED_FLAG, SOURCE_SYSTEM_REFKEY, PHONETIC_NAME_ONE, PHONETIC_NAME_TWO, PHONETIC_NAME_THREE, PHONETIC_LAST_NAME ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.PERSONNAME_TYPE_REFKEY, :NEW.PREFIX_NAME_REFKEY, :NEW.PREFIX_MISC, :NEW.NAME_ONE, :NEW.NAME_TWO, :NEW.NAME_THREE, :NEW.NAME_FOUR, :NEW.LAST_NAME, :NEW.NICK_NAME, :NEW.POPULAR_NAME, :NEW.SUFFIX_NAME_REFKEY, :NEW.SUFFIX_MISC, :NEW.NAME_STANDARDISED_FLAG, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.PHONETIC_NAME_ONE, :NEW.PHONETIC_NAME_TWO, :NEW.PHONETIC_NAME_THREE, :NEW.PHONETIC_LAST_NAME); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_ACCOUNT_MDM_STATUS AFTER UPDATE ON MDM_OWNER.REF_ACCOUNT_MDM_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ACCOUNT_MDM_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_PHONE_STANDARDIZED AFTER UPDATE ON MDM_OWNER.PHONE_STANDARDIZED REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_PHONE_STANDARDIZED ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ITU_COUNTRY_CALLING_CODE, AREA_CODE, EXCHANGE, PHONE_NUMBER, EXTENSION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ITU_COUNTRY_CALLING_CODE, :NEW.AREA_CODE, :NEW.EXCHANGE, :NEW.PHONE_NUMBER, :NEW.EXTENSION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_PROPERTY AFTER UPDATE ON MDM_OWNER.PROPERTY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_PROPERTY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PROPERTY_NAME, ADDRESS_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.PROPERTY_NAME, :NEW.ADDRESS_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_ACCOUNT_SOURCE_STATUS AFTER UPDATE ON MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ACCOUNT_SOURCE_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_ADDRESS_SUBTYPE AFTER UPDATE ON MDM_OWNER.REF_ADDRESS_SUBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ADDRESS_SUBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_ADDRESS_TYPE AFTER UPDATE ON MDM_OWNER.REF_ADDRESS_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ADDRESS_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_AGREEMENT_TYPE AFTER UPDATE ON MDM_OWNER.REF_AGREEMENT_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_AGREEMENT_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_ASSOC_TYPE AFTER UPDATE ON MDM_OWNER.REF_ASSOC_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ASSOC_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_BATCH_ACTION_STATUS AFTER UPDATE ON MDM_OWNER.REF_BATCH_ACTION_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BATCH_ACTION_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_BATCH_PROPOSED_ACTION AFTER UPDATE ON MDM_OWNER.REF_BATCH_PROPOSED_ACTION REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BATCH_PROPOSED_ACTION ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_BRANCH_CODE AFTER UPDATE ON MDM_OWNER.REF_BRANCH_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BRANCH_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_CLASSIFICATION_CODE AFTER UPDATE ON MDM_OWNER.REF_CLASSIFICATION_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CLASSIFICATION_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_BILLING_MODE_TYPE AFTER UPDATE ON MDM_OWNER.REF_BILLING_MODE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BILLING_MODE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_CORPORATION_NAME_TYPE AFTER UPDATE ON MDM_OWNER.REF_CORPORATION_NAME_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CORPORATION_NAME_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_CORPORATION_TYPE AFTER UPDATE ON MDM_OWNER.REF_CORPORATION_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CORPORATION_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_COUNTRY_ISO AFTER UPDATE ON MDM_OWNER.REF_COUNTRY_ISO REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_COUNTRY_ISO ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_CURRENCY AFTER UPDATE ON MDM_OWNER.REF_CURRENCY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CURRENCY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_DEACTIVATION_REASON AFTER UPDATE ON MDM_OWNER.REF_DEACTIVATION_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_DEACTIVATION_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_ENTITY_OBJECT_TYPE AFTER UPDATE ON MDM_OWNER.REF_ENTITY_OBJECT_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ENTITY_OBJECT_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_GENDER AFTER UPDATE ON MDM_OWNER.REF_GENDER REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_GENDER ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_HIGHEST_EDU_QUAL AFTER UPDATE ON MDM_OWNER.REF_HIGHEST_EDU_QUAL REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_HIGHEST_EDU_QUAL ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_GROUP_SUBTYPE AFTER UPDATE ON MDM_OWNER.REF_GROUP_SUBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_GROUP_SUBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_GROUP_TYPE AFTER UPDATE ON MDM_OWNER.REF_GROUP_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_GROUP_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_IDENTIFICATION_TYPE AFTER UPDATE ON MDM_OWNER.REF_IDENTIFICATION_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_IDENTIFICATION_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_IMPORTANCE_TYPE AFTER UPDATE ON MDM_OWNER.REF_IMPORTANCE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_IMPORTANCE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_INACTIVATION_REASON AFTER UPDATE ON MDM_OWNER.REF_INACTIVATION_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_INACTIVATION_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_INDUSTRY_CODE AFTER UPDATE ON MDM_OWNER.REF_INDUSTRY_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_INDUSTRY_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_LANGUAGE_CODE AFTER UPDATE ON MDM_OWNER.REF_LANGUAGE_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LANGUAGE_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_LE_RATING AFTER UPDATE ON MDM_OWNER.REF_LE_RATING REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LE_RATING ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_LE_RELATIONSHIP_TYPE AFTER UPDATE ON MDM_OWNER.REF_LE_RELATIONSHIP_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LE_RELATIONSHIP_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_LOBTYPE AFTER UPDATE ON MDM_OWNER.REF_LOBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LOBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_MATCH_ACTIONSTATUS AFTER UPDATE ON MDM_OWNER.REF_MATCH_ACTIONSTATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_ACTIONSTATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_LE_ROLETYPE AFTER UPDATE ON MDM_OWNER.REF_LE_ROLETYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LE_ROLETYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_MATCH_PROPOSED_ACTION AFTER UPDATE ON MDM_OWNER.REF_MATCH_PROPOSED_ACTION REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_PROPOSED_ACTION ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_MATCH_RESULT AFTER UPDATE ON MDM_OWNER.REF_MATCH_RESULT REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_RESULT ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_MATCH_SCORE AFTER UPDATE ON MDM_OWNER.REF_MATCH_SCORE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_SCORE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, MATCH_ENTITY_OBJECT_NAME, MATCH_ATTR_PATTERN, MATCH_RESULT_REFKEY, MATCH_PROPOSED_ACTION_REFKEY, MATCH_ATTR_PATTERN_DESCR ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.MATCH_ENTITY_OBJECT_NAME, :NEW.MATCH_ATTR_PATTERN, :NEW.MATCH_RESULT_REFKEY, :NEW.MATCH_PROPOSED_ACTION_REFKEY, :NEW.MATCH_ATTR_PATTERN_DESCR); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_MATCH_THRESHOLD AFTER UPDATE ON MDM_OWNER.REF_MATCH_THRESHOLD REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_THRESHOLD ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ATTR_BLOCK_NAME, MATCH_THRESHOLD, DECAY_THRESHOLD_IN_DAYS, DECAY_PERCENTAGE, MAX_DECAY_PERCENTAGE ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ATTR_BLOCK_NAME, :NEW.MATCH_THRESHOLD, :NEW.DECAY_THRESHOLD_IN_DAYS, :NEW.DECAY_PERCENTAGE, :NEW.MAX_DECAY_PERCENTAGE); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_MERGE_REASON AFTER UPDATE ON MDM_OWNER.REF_MERGE_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MERGE_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_PERSONNAME_TYPE AFTER UPDATE ON MDM_OWNER.REF_PERSONNAME_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PERSONNAME_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_PERSON_TYPE AFTER UPDATE ON MDM_OWNER.REF_PERSON_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PERSON_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_PHONE_TYPE AFTER UPDATE ON MDM_OWNER.REF_PHONE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PHONE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_PREFERENCE_TYPE AFTER UPDATE ON MDM_OWNER.REF_PREFERENCE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PREFERENCE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_PHONE_SUBTYPE AFTER UPDATE ON MDM_OWNER.REF_PHONE_SUBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PHONE_SUBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_PREFIX_NAME AFTER UPDATE ON MDM_OWNER.REF_PREFIX_NAME REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PREFIX_NAME ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_PROPERTY_LE_RELTYPE AFTER UPDATE ON MDM_OWNER.REF_PROPERTY_LE_RELTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PROPERTY_LE_RELTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_RELATIONSHIP_STATUS AFTER UPDATE ON MDM_OWNER.REF_RELATIONSHIP_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_RELATIONSHIP_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_SOURCE_SYSTEM AFTER UPDATE ON MDM_OWNER.REF_SOURCE_SYSTEM REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_SOURCE_SYSTEM ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_STATE_PROVINCE AFTER UPDATE ON MDM_OWNER.REF_STATE_PROVINCE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_STATE_PROVINCE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION, COUNTRY_ISO_REFKEY ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION, :NEW.COUNTRY_ISO_REFKEY); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_STATUS_IN_SOURCE AFTER UPDATE ON MDM_OWNER.REF_STATUS_IN_SOURCE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_STATUS_IN_SOURCE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_STATUS_TYPE AFTER UPDATE ON MDM_OWNER.REF_STATUS_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_STATUS_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_TERMINATION_REASON AFTER UPDATE ON MDM_OWNER.REF_TERMINATION_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_TERMINATION_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_VEHICLE AFTER UPDATE ON MDM_OWNER.VEHICLE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_VEHICLE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, VIN_NUMBER, CHASSIS_NUMBER, MAKE, MODEL, YEAR, INTERIOR_COLOR, EXTERIOR_COLOR, REGISTRATION_NUMBER, COUNTRY_OF_REGISTRATION_REFKEY, INSURANCE_ISSUED_BY, INSURANCE_ISSUED_DATE, INSURANCE_EXPIRY_DATE ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.VIN_NUMBER, :NEW.CHASSIS_NUMBER, :NEW.MAKE, :NEW.MODEL, :NEW.YEAR, :NEW.INTERIOR_COLOR, :NEW.EXTERIOR_COLOR, :NEW.REGISTRATION_NUMBER, :NEW.COUNTRY_OF_REGISTRATION_REFKEY, :NEW.INSURANCE_ISSUED_BY, :NEW.INSURANCE_ISSUED_DATE, :NEW.INSURANCE_EXPIRY_DATE); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_REF_SUFFIX_NAME AFTER UPDATE ON MDM_OWNER.REF_SUFFIX_NAME REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_SUFFIX_NAME ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.U_AUTH_ROLES_REGISTRY AFTER UPDATE ON MDM_OWNER.AUTH_ROLES_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_ROLES_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ROLE_NAME, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'U', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ROLE_NAME, :NEW.DESCRIPTION ); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_ACCOUNT AFTER DELETE ON MDM_OWNER.ACCOUNT REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ACCOUNT ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONTRACT_SIGNED_LANG_REFKEY, CURRENCY_REFKEY, BILLING_MODE_TYPE_REFKEY, FREQUENCY_OF_PAYMENT, LOBTYPE_REFKEY, LOB_DESCRIPTION, SOURCE_SYSTEM_REFKEY, SOURCE_ACCOUNT_ID, MANAGEDBY_BU_CODE, MANAGEDBY_BU_ID, BRANCH_CODE_REFKEY, ACCOUNT_NAME, ACCOUNT_NAME2, ACCOUNT_DESCRIPTION, ACCOUNT_SOURCE_STATUS_REFKEY, ACCOUNT_MDM_STATUS_REFKEY, SIGNED_DATE, SIGNED_PLACE, EXECUTED_DATE, TERMINATED_DATE, TERMINATION_REASON_REFKEY ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONTRACT_SIGNED_LANG_REFKEY, :OLD.CURRENCY_REFKEY, :OLD.BILLING_MODE_TYPE_REFKEY, :OLD.FREQUENCY_OF_PAYMENT, :OLD.LOBTYPE_REFKEY, :OLD.LOB_DESCRIPTION, :OLD.SOURCE_SYSTEM_REFKEY, :OLD.SOURCE_ACCOUNT_ID, :OLD.MANAGEDBY_BU_CODE, :OLD.MANAGEDBY_BU_ID, :OLD.BRANCH_CODE_REFKEY, :OLD.ACCOUNT_NAME, :OLD.ACCOUNT_NAME2, :OLD.ACCOUNT_DESCRIPTION, :OLD.ACCOUNT_SOURCE_STATUS_REFKEY, :OLD.ACCOUNT_MDM_STATUS_REFKEY, :OLD.SIGNED_DATE, :OLD.SIGNED_PLACE, :OLD.EXECUTED_DATE, :OLD.TERMINATED_DATE, :OLD.TERMINATION_REASON_REFKEY); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_ACCOUNT_ADDRESS_ASSOC AFTER DELETE ON MDM_OWNER.ACCOUNT_ADDRESS_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ACCOUNT_ADDRESS_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ACCOUNT_IDPK, ADDRESS_IDPK, ADDRESS_TYPE_REFKEY, ADDRESS_SUBTYPE_REFKEY, PREFERRED_FLAG, SOLICITATION_FLAG ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.ACCOUNT_IDPK, :OLD.ADDRESS_IDPK, :OLD.ADDRESS_TYPE_REFKEY, :OLD.ADDRESS_SUBTYPE_REFKEY, :OLD.PREFERRED_FLAG, :OLD.SOLICITATION_FLAG); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_ACCOUNT_PHONE_ASSOC AFTER DELETE ON MDM_OWNER.ACCOUNT_PHONE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ACCOUNT_PHONE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ACCOUNT_IDPK, PHONE_TYPE_REFKEY, PHONE_SUBTYPE_REFKEY, PREFERRED_FLAG, PHONE_NUMBER, PHONE_STANDARDIZED_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.ACCOUNT_IDPK, :OLD.PHONE_TYPE_REFKEY, :OLD.PHONE_SUBTYPE_REFKEY, :OLD.PREFERRED_FLAG, :OLD.PHONE_NUMBER, :OLD.PHONE_STANDARDIZED_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_AUTH_USERROLE_ACCESSCONTROL AFTER DELETE ON MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_USERROLE_ACCESSCONTROL ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PROFILE_TYPE, AUTH_USER_ROLE_REGISTRY_IDPK, CONFIG_TXN_REGISTRY_IDPK, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.PROFILE_TYPE, :OLD.AUTH_USER_ROLE_REGISTRY_IDPK, :OLD.CONFIG_TXN_REGISTRY_IDPK, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_AUTH_USER_REGISTRY AFTER DELETE ON MDM_OWNER.AUTH_USER_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_USER_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, USER_NAME, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.USER_NAME, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_ADDRESS AFTER DELETE ON MDM_OWNER.ADDRESS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ADDRESS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ADDRESS_LINE_ONE, ADDRESS_LINE_TWO, ADDRESS_LINE_THREE, ADDRESS_LINE_FOUR, STREET_NUMBER, STREET_NAME, HOUSE_NUMBER, BUILDING_NUMBER, COUNTY, CITY, DISTRICT_ZONE, STATE_PROVINCE_REFKEY, COUNTRY_REFKEY, POSTAL_CODE, NEAREST_LANDMARK, BOX_DESIGNATOR, BOX_IDENTIFIER, NEAREST_RAILWAY_STATION, NEAREST_AIRPORT, PHONETIC_ADDRESS_LINE_ONE, PHONETIC_ADDRESS_LINE_TWO, PHONETIC_ADDRESS_LINE_THREE, PHONETIC_ADDRESS_LINE_FOUR, PHONETIC_STREET_NAME, PHONETIC_COUNTY, PHONETIC_CITY, PHONETIC_DISTRICT_ZONE ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.ADDRESS_LINE_ONE, :OLD.ADDRESS_LINE_TWO, :OLD.ADDRESS_LINE_THREE, :OLD.ADDRESS_LINE_FOUR, :OLD.STREET_NUMBER, :OLD.STREET_NAME, :OLD.HOUSE_NUMBER, :OLD.BUILDING_NUMBER, :OLD.COUNTY, :OLD.CITY, :OLD.DISTRICT_ZONE, :OLD.STATE_PROVINCE_REFKEY, :OLD.COUNTRY_REFKEY, :OLD.POSTAL_CODE, :OLD.NEAREST_LANDMARK, :OLD.BOX_DESIGNATOR, :OLD.BOX_IDENTIFIER, :OLD.NEAREST_RAILWAY_STATION, :OLD.NEAREST_AIRPORT, :OLD.PHONETIC_ADDRESS_LINE_ONE, :OLD.PHONETIC_ADDRESS_LINE_TWO, :OLD.PHONETIC_ADDRESS_LINE_THREE, :OLD.PHONETIC_ADDRESS_LINE_FOUR, :OLD.PHONETIC_STREET_NAME, :OLD.PHONETIC_COUNTY, :OLD.PHONETIC_CITY, :OLD.PHONETIC_DISTRICT_ZONE); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_AUTH_USER_ROLE_ASSOC AFTER DELETE ON MDM_OWNER.AUTH_USER_ROLE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_USER_ROLE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, AUTH_USER_REGISTRY_IDPK, AUTH_ROLES_REGISTRY_IDPK, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.AUTH_USER_REGISTRY_IDPK, :OLD.AUTH_ROLES_REGISTRY_IDPK, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_BATCH_ENTITY_TO_PROCESS AFTER DELETE ON MDM_OWNER.BATCH_ENTITY_TO_PROCESS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_BATCH_ENTITY_TO_PROCESS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ENTITY_OBJECT_TYPE_REFKEY, ENTITY_IDPK, BATCH_PROPOSED_ACTION_REFKEY, BATCH_ACTION_STATUS_REFKEY, PROCESS_AFTER_TIMESTAMP, PROCESS_BEFORE_TIMESTAMP, ENTRY_MADE_BY_SUBSYSTEM_NAME, COMMENTS ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.ENTITY_OBJECT_TYPE_REFKEY, :OLD.ENTITY_IDPK, :OLD.BATCH_PROPOSED_ACTION_REFKEY, :OLD.BATCH_ACTION_STATUS_REFKEY, :OLD.PROCESS_AFTER_TIMESTAMP, :OLD.PROCESS_BEFORE_TIMESTAMP, :OLD.ENTRY_MADE_BY_SUBSYSTEM_NAME, :OLD.COMMENTS); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_CONFIG_APP_PROPERTIES AFTER DELETE ON MDM_OWNER.CONFIG_APP_PROPERTIES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_APP_PROPERTIES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, KEY, VALUE, VALUE_DEFAULT, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.KEY, :OLD.VALUE, :OLD.VALUE_DEFAULT, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_CONFIG_ERRORCODE_REGISTRY AFTER DELETE ON MDM_OWNER.CONFIG_ERRORCODE_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_ERRORCODE_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CONFIG_LANGUAGE_CODE_KEY, ERROR_CODE, ERROR_MESSAGE, DESCRIPTION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.ERROR_CODE, :OLD.ERROR_MESSAGE, :OLD.DESCRIPTION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_CONFIG_INQUIRY_LEVELS AFTER DELETE ON MDM_OWNER.CONFIG_INQUIRY_LEVELS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_INQUIRY_LEVELS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, INQUIRY_LEVEL, APPLICABLE_DOBJ, CHILD_DOBJ, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.INQUIRY_LEVEL, :OLD.APPLICABLE_DOBJ, :OLD.CHILD_DOBJ, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_CONFIG_TXN_REGISTRY AFTER DELETE ON MDM_OWNER.CONFIG_TXN_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_TXN_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, TXNSERVICE_NAME, TXNSERVICE_CLASS, TXNSERVICE_CLASSMETHOD, DESCRIPTION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_TXN_REF_ID ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.TXNSERVICE_NAME, :OLD.TXNSERVICE_CLASS, :OLD.TXNSERVICE_CLASSMETHOD, :OLD.DESCRIPTION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_TXN_REF_ID); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_CORPORATIONNAMES AFTER DELETE ON MDM_OWNER.CORPORATIONNAMES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CORPORATIONNAMES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, CORPORATION_NAME_TYPE_REFKEY, CORPORATION_NAME, SOURCE_SYSTEM_REFKEY, PHONETIC_CORPORATION_NAME ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.LEGALENTITY_IDPK, :OLD.CORPORATION_NAME_TYPE_REFKEY, :OLD.CORPORATION_NAME, :OLD.SOURCE_SYSTEM_REFKEY, :OLD.PHONETIC_CORPORATION_NAME); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_CONFIG_LANGUAGE_CODE AFTER DELETE ON MDM_OWNER.CONFIG_LANGUAGE_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_LANGUAGE_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_ENTITY_GROUP AFTER DELETE ON MDM_OWNER.ENTITY_GROUP REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ENTITY_GROUP ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, GROUP_TYPE_REFKEY, GROUP_SUBTYPE_REFKEY, GROUP_NAME, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.GROUP_TYPE_REFKEY, :OLD.GROUP_SUBTYPE_REFKEY, :OLD.GROUP_NAME, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_ENTITY_GROUP_ASSOC AFTER DELETE ON MDM_OWNER.ENTITY_GROUP_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ENTITY_GROUP_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ENTITY_OBJECT_TYPE_REFKEY, ENTITY_IDPK, ENTITY_GROUP_IDPK, ASSOC_TYPE_REFKEY, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.ENTITY_OBJECT_TYPE_REFKEY, :OLD.ENTITY_IDPK, :OLD.ENTITY_GROUP_IDPK, :OLD.ASSOC_TYPE_REFKEY, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_INACTIVE_LE_REGISTRY AFTER DELETE ON MDM_OWNER.INACTIVE_LE_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_INACTIVE_LE_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, INACTIVATED_TS, INACTIVATION_REASON_REFKEY, COMMENTS ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.LEGALENTITY_IDPK, :OLD.INACTIVATED_TS, :OLD.INACTIVATION_REASON_REFKEY, :OLD.COMMENTS); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LE_ACCOUNT_ASSOC AFTER DELETE ON MDM_OWNER.LE_ACCOUNT_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_ACCOUNT_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, LE_ROLETYPE_REFKEY, ACCOUNT_IDPK, ROLE_ACTIVATION_DATE, ROLE_DEACTIVATION_DATE, DEACTIVATION_REASON_REFKEY, AGREEMENT_TYPE_REFKEY, AGREEMENT_TYPE_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.LEGALENTITY_IDPK, :OLD.LE_ROLETYPE_REFKEY, :OLD.ACCOUNT_IDPK, :OLD.ROLE_ACTIVATION_DATE, :OLD.ROLE_DEACTIVATION_DATE, :OLD.DEACTIVATION_REASON_REFKEY, :OLD.AGREEMENT_TYPE_REFKEY, :OLD.AGREEMENT_TYPE_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LE_ADDRESS_ASSOC AFTER DELETE ON MDM_OWNER.LE_ADDRESS_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_ADDRESS_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, ADDRESS_IDPK, ADDRESS_TYPE_REFKEY, ADDRESS_SUBTYPE_REFKEY, PREFERRED_FLAG, SOLICITATION_FLAG ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.LEGALENTITY_IDPK, :OLD.ADDRESS_IDPK, :OLD.ADDRESS_TYPE_REFKEY, :OLD.ADDRESS_SUBTYPE_REFKEY, :OLD.PREFERRED_FLAG, :OLD.SOLICITATION_FLAG); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LE_CORPORATION AFTER DELETE ON MDM_OWNER.LE_CORPORATION REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_CORPORATION ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,LEGALENTITY_IDPK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CLASSIFICATION_CODE_REFKEY, INDUSTRY_CODE_REFKEY, GOVT_REGISTRATION_DATE, COUNTRY_REGISTRATION_REFKEY, NOTPROFIT_FLAG ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.LEGALENTITY_IDPK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CLASSIFICATION_CODE_REFKEY, :OLD.INDUSTRY_CODE_REFKEY, :OLD.GOVT_REGISTRATION_DATE, :OLD.COUNTRY_REGISTRATION_REFKEY, :OLD.NOTPROFIT_FLAG); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LE_PHONE_ASSOC AFTER DELETE ON MDM_OWNER.LE_PHONE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PHONE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, PHONE_TYPE_REFKEY, PHONE_SUBTYPE_REFKEY, PREFERRED_FLAG, PHONE_NUMBER, PHONE_STANDARDIZED_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.LEGALENTITY_IDPK, :OLD.PHONE_TYPE_REFKEY, :OLD.PHONE_SUBTYPE_REFKEY, :OLD.PREFERRED_FLAG, :OLD.PHONE_NUMBER, :OLD.PHONE_STANDARDIZED_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LE_IDENTIFIER_KYC_REGISTRY AFTER DELETE ON MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_IDENTIFIER_KYC_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, IDENTIFICATION_TYPE_REFKEY, IDENTIFICATION_NUMBER, LEGALENTITY_IDPK, DOCUMENT, ISSUED_BY, ID_CONSIDERED_FOR_KYC_FLAG, ISSUED_DATE, SOURCE_SYSTEM_REFKEY, IDENTITY_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.IDENTIFICATION_TYPE_REFKEY, :OLD.IDENTIFICATION_NUMBER, :OLD.LEGALENTITY_IDPK, :OLD.DOCUMENT, :OLD.ISSUED_BY, :OLD.ID_CONSIDERED_FOR_KYC_FLAG, :OLD.ISSUED_DATE, :OLD.SOURCE_SYSTEM_REFKEY, :OLD.IDENTITY_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LE_PERSON AFTER DELETE ON MDM_OWNER.LE_PERSON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PERSON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,LEGALENTITY_IDPK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PERSON_TYPE_REFKEY, GENDER_REFKEY, DATE_OF_BIRTH, COUNTRY_OF_BIRTH__REFKEY, COUNTRY_CITIZENSHIP_REFKEY, COUNTRY_OF_DOMICILE__REFKEY, MARITAL_STATUS, HIGHEST_EDU_QUAL_REFKEY, IS_DECEASED_FLAG, DECEASED_DATE, IS_HANDICAPPED_FLAG, HANDICAPPED_SINCE_DATE, NUMBER_OF_DEPENDENTS, NUMBER_OF_CHILDREN, PREFERRED_LANGUAGE_REFKEY ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.LEGALENTITY_IDPK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.PERSON_TYPE_REFKEY, :OLD.GENDER_REFKEY, :OLD.DATE_OF_BIRTH, :OLD.COUNTRY_OF_BIRTH__REFKEY, :OLD.COUNTRY_CITIZENSHIP_REFKEY, :OLD.COUNTRY_OF_DOMICILE__REFKEY, :OLD.MARITAL_STATUS, :OLD.HIGHEST_EDU_QUAL_REFKEY, :OLD.IS_DECEASED_FLAG, :OLD.DECEASED_DATE, :OLD.IS_HANDICAPPED_FLAG, :OLD.HANDICAPPED_SINCE_DATE, :OLD.NUMBER_OF_DEPENDENTS, :OLD.NUMBER_OF_CHILDREN, :OLD.PREFERRED_LANGUAGE_REFKEY); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LE_PREFERENCES AFTER DELETE ON MDM_OWNER.LE_PREFERENCES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PREFERENCES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, PREFERENCE_TYPE_REFKEY, PREF_FLAG, PREF_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.LEGALENTITY_IDPK, :OLD.PREFERENCE_TYPE_REFKEY, :OLD.PREF_FLAG, :OLD.PREF_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LE_PROPERTY_ASSOC AFTER DELETE ON MDM_OWNER.LE_PROPERTY_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_PROPERTY_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PROPERTY_IDPK, LEGALENTITY_IDPK, PROPERTY_LE_RELTYPE_REFKEY, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.PROPERTY_IDPK, :OLD.LEGALENTITY_IDPK, :OLD.PROPERTY_LE_RELTYPE_REFKEY, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LE_SYSTEM_KEYS_REGISTRY AFTER DELETE ON MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_SYSTEM_KEYS_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, SOURCE_SYSTEM_REFKEY, REFERENCE_ID, LEGALENTITY_IDPK, STATUS_IN_SOURCE_REFKEY, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.SOURCE_SYSTEM_REFKEY, :OLD.REFERENCE_ID, :OLD.LEGALENTITY_IDPK, :OLD.STATUS_IN_SOURCE_REFKEY, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LE_TO_LE_RELATIONSHIP AFTER DELETE ON MDM_OWNER.LE_TO_LE_RELATIONSHIP REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_TO_LE_RELATIONSHIP ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, FROM_LEGALENTITY_IDPK, TO_LEGALENTITY_IDPK, LE_RELATIONSHIP_TYPE_REFKEY, RELATIONSHIP_STATUS_REFKEY, RELATIONSHIP_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.FROM_LEGALENTITY_IDPK, :OLD.TO_LEGALENTITY_IDPK, :OLD.LE_RELATIONSHIP_TYPE_REFKEY, :OLD.RELATIONSHIP_STATUS_REFKEY, :OLD.RELATIONSHIP_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LE_VEHICLE_ASSOC AFTER DELETE ON MDM_OWNER.LE_VEHICLE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_VEHICLE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, LE_ROLETYPE_REFKEY, ACCOUNT_IDPK, ROLE_ACTIVATION_DATE, ROLE_DEACTIVATION_DATE, DEACTIVATION_REASON_REFKEY, AGREEMENT_TYPE_REFKEY, AGREEMENT_TYPE_DESCRIPTION, VEHICLE_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.LEGALENTITY_IDPK, :OLD.LE_ROLETYPE_REFKEY, :OLD.ACCOUNT_IDPK, :OLD.ROLE_ACTIVATION_DATE, :OLD.ROLE_DEACTIVATION_DATE, :OLD.DEACTIVATION_REASON_REFKEY, :OLD.AGREEMENT_TYPE_REFKEY, :OLD.AGREEMENT_TYPE_DESCRIPTION, :OLD.VEHICLE_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_MATCH_MERGED_LE_ASSOC AFTER DELETE ON MDM_OWNER.MATCH_MERGED_LE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_MATCH_MERGED_LE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, SURVIVOR_LEGALENTITY_IDPK, MERGED_LEGALENTITY_IDPK, MERGE_REASON_REFKEY, COMMENTS ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.SURVIVOR_LEGALENTITY_IDPK, :OLD.MERGED_LEGALENTITY_IDPK, :OLD.MERGE_REASON_REFKEY, :OLD.COMMENTS); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_MISCELLANEOUS_INFO AFTER DELETE ON MDM_OWNER.MISCELLANEOUS_INFO REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_MISCELLANEOUS_INFO ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ENTITY_OBJECT_TYPE_REFKEY, ENTITY_IDPK, NAME1, VALUE1, NAME2, VALUE2, NAME3, VALUE3, NAME4, VALUE4, NAME5, VALUE5, NAME6, VALUE6, NAME7, VALUE7, NAME8, VALUE8, NAME9, VALUE9, NAME10, VALUE10 ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.ENTITY_OBJECT_TYPE_REFKEY, :OLD.ENTITY_IDPK, :OLD.NAME1, :OLD.VALUE1, :OLD.NAME2, :OLD.VALUE2, :OLD.NAME3, :OLD.VALUE3, :OLD.NAME4, :OLD.VALUE4, :OLD.NAME5, :OLD.VALUE5, :OLD.NAME6, :OLD.VALUE6, :OLD.NAME7, :OLD.VALUE7, :OLD.NAME8, :OLD.VALUE8, :OLD.NAME9, :OLD.VALUE9, :OLD.NAME10, :OLD.VALUE10); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_MATCH_CANDIDATE_LE_REGISTRY AFTER DELETE ON MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_MATCH_CANDIDATE_LE_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, CANDIDATE_LEGALENTITYIDPK, MATCH_PATTERN, MATCH_PROPOSED_ACTION_REFKEY, MATCH_ACTIONSTATUS_REFKEY, MATCH_PERCENTAGE_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.LEGALENTITY_IDPK, :OLD.CANDIDATE_LEGALENTITYIDPK, :OLD.MATCH_PATTERN, :OLD.MATCH_PROPOSED_ACTION_REFKEY, :OLD.MATCH_ACTIONSTATUS_REFKEY, :OLD.MATCH_PERCENTAGE_DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_PERSONNAMES AFTER DELETE ON MDM_OWNER.PERSONNAMES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_PERSONNAMES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, PERSONNAME_TYPE_REFKEY, PREFIX_NAME_REFKEY, PREFIX_MISC, NAME_ONE, NAME_TWO, NAME_THREE, NAME_FOUR, LAST_NAME, NICK_NAME, POPULAR_NAME, SUFFIX_NAME_REFKEY, SUFFIX_MISC, NAME_STANDARDISED_FLAG, SOURCE_SYSTEM_REFKEY, PHONETIC_NAME_ONE, PHONETIC_NAME_TWO, PHONETIC_NAME_THREE, PHONETIC_LAST_NAME ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.LEGALENTITY_IDPK, :OLD.PERSONNAME_TYPE_REFKEY, :OLD.PREFIX_NAME_REFKEY, :OLD.PREFIX_MISC, :OLD.NAME_ONE, :OLD.NAME_TWO, :OLD.NAME_THREE, :OLD.NAME_FOUR, :OLD.LAST_NAME, :OLD.NICK_NAME, :OLD.POPULAR_NAME, :OLD.SUFFIX_NAME_REFKEY, :OLD.SUFFIX_MISC, :OLD.NAME_STANDARDISED_FLAG, :OLD.SOURCE_SYSTEM_REFKEY, :OLD.PHONETIC_NAME_ONE, :OLD.PHONETIC_NAME_TWO, :OLD.PHONETIC_NAME_THREE, :OLD.PHONETIC_LAST_NAME); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_PHONE_STANDARDIZED AFTER DELETE ON MDM_OWNER.PHONE_STANDARDIZED REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_PHONE_STANDARDIZED ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ITU_COUNTRY_CALLING_CODE, AREA_CODE, EXCHANGE, PHONE_NUMBER, EXTENSION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.ITU_COUNTRY_CALLING_CODE, :OLD.AREA_CODE, :OLD.EXCHANGE, :OLD.PHONE_NUMBER, :OLD.EXTENSION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_PROPERTY AFTER DELETE ON MDM_OWNER.PROPERTY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_PROPERTY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PROPERTY_NAME, ADDRESS_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.PROPERTY_NAME, :OLD.ADDRESS_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_ACCOUNT_MDM_STATUS AFTER DELETE ON MDM_OWNER.REF_ACCOUNT_MDM_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ACCOUNT_MDM_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_ACCOUNT_SOURCE_STATUS AFTER DELETE ON MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ACCOUNT_SOURCE_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_AGREEMENT_TYPE AFTER DELETE ON MDM_OWNER.REF_AGREEMENT_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_AGREEMENT_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_ADDRESS_SUBTYPE AFTER DELETE ON MDM_OWNER.REF_ADDRESS_SUBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ADDRESS_SUBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_ADDRESS_TYPE AFTER DELETE ON MDM_OWNER.REF_ADDRESS_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ADDRESS_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_ASSOC_TYPE AFTER DELETE ON MDM_OWNER.REF_ASSOC_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ASSOC_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_BATCH_ACTION_STATUS AFTER DELETE ON MDM_OWNER.REF_BATCH_ACTION_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BATCH_ACTION_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_BATCH_PROPOSED_ACTION AFTER DELETE ON MDM_OWNER.REF_BATCH_PROPOSED_ACTION REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BATCH_PROPOSED_ACTION ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_BILLING_MODE_TYPE AFTER DELETE ON MDM_OWNER.REF_BILLING_MODE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BILLING_MODE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_BRANCH_CODE AFTER DELETE ON MDM_OWNER.REF_BRANCH_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_BRANCH_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_CLASSIFICATION_CODE AFTER DELETE ON MDM_OWNER.REF_CLASSIFICATION_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CLASSIFICATION_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_CORPORATION_NAME_TYPE AFTER DELETE ON MDM_OWNER.REF_CORPORATION_NAME_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CORPORATION_NAME_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_COUNTRY_ISO AFTER DELETE ON MDM_OWNER.REF_COUNTRY_ISO REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_COUNTRY_ISO ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_GROUP_SUBTYPE AFTER DELETE ON MDM_OWNER.REF_GROUP_SUBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_GROUP_SUBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_CORPORATION_TYPE AFTER DELETE ON MDM_OWNER.REF_CORPORATION_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CORPORATION_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_GROUP_TYPE AFTER DELETE ON MDM_OWNER.REF_GROUP_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_GROUP_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_HIGHEST_EDU_QUAL AFTER DELETE ON MDM_OWNER.REF_HIGHEST_EDU_QUAL REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_HIGHEST_EDU_QUAL ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_IDENTIFICATION_TYPE AFTER DELETE ON MDM_OWNER.REF_IDENTIFICATION_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_IDENTIFICATION_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_IMPORTANCE_TYPE AFTER DELETE ON MDM_OWNER.REF_IMPORTANCE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_IMPORTANCE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_INACTIVATION_REASON AFTER DELETE ON MDM_OWNER.REF_INACTIVATION_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_INACTIVATION_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_INDUSTRY_CODE AFTER DELETE ON MDM_OWNER.REF_INDUSTRY_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_INDUSTRY_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_LANGUAGE_CODE AFTER DELETE ON MDM_OWNER.REF_LANGUAGE_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LANGUAGE_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_LE_RELATIONSHIP_TYPE AFTER DELETE ON MDM_OWNER.REF_LE_RELATIONSHIP_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LE_RELATIONSHIP_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_LE_ROLETYPE AFTER DELETE ON MDM_OWNER.REF_LE_ROLETYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LE_ROLETYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_LE_RATING AFTER DELETE ON MDM_OWNER.REF_LE_RATING REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LE_RATING ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_LOBTYPE AFTER DELETE ON MDM_OWNER.REF_LOBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_LOBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_MATCH_ACTIONSTATUS AFTER DELETE ON MDM_OWNER.REF_MATCH_ACTIONSTATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_ACTIONSTATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_MATCH_PROPOSED_ACTION AFTER DELETE ON MDM_OWNER.REF_MATCH_PROPOSED_ACTION REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_PROPOSED_ACTION ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_MATCH_RESULT AFTER DELETE ON MDM_OWNER.REF_MATCH_RESULT REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_RESULT ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_MATCH_SCORE AFTER DELETE ON MDM_OWNER.REF_MATCH_SCORE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_SCORE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, MATCH_ENTITY_OBJECT_NAME, MATCH_ATTR_PATTERN, MATCH_RESULT_REFKEY, MATCH_PROPOSED_ACTION_REFKEY, MATCH_ATTR_PATTERN_DESCR ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.MATCH_ENTITY_OBJECT_NAME, :OLD.MATCH_ATTR_PATTERN, :OLD.MATCH_RESULT_REFKEY, :OLD.MATCH_PROPOSED_ACTION_REFKEY, :OLD.MATCH_ATTR_PATTERN_DESCR); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_MATCH_THRESHOLD AFTER DELETE ON MDM_OWNER.REF_MATCH_THRESHOLD REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MATCH_THRESHOLD ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ATTR_BLOCK_NAME, MATCH_THRESHOLD, DECAY_THRESHOLD_IN_DAYS, DECAY_PERCENTAGE, MAX_DECAY_PERCENTAGE ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.ATTR_BLOCK_NAME, :OLD.MATCH_THRESHOLD, :OLD.DECAY_THRESHOLD_IN_DAYS, :OLD.DECAY_PERCENTAGE, :OLD.MAX_DECAY_PERCENTAGE); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_MERGE_REASON AFTER DELETE ON MDM_OWNER.REF_MERGE_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_MERGE_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_PERSON_TYPE AFTER DELETE ON MDM_OWNER.REF_PERSON_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PERSON_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_PHONE_SUBTYPE AFTER DELETE ON MDM_OWNER.REF_PHONE_SUBTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PHONE_SUBTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_PERSONNAME_TYPE AFTER DELETE ON MDM_OWNER.REF_PERSONNAME_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PERSONNAME_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_PHONE_TYPE AFTER DELETE ON MDM_OWNER.REF_PHONE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PHONE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_PREFERENCE_TYPE AFTER DELETE ON MDM_OWNER.REF_PREFERENCE_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PREFERENCE_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_PREFIX_NAME AFTER DELETE ON MDM_OWNER.REF_PREFIX_NAME REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PREFIX_NAME ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_PROPERTY_LE_RELTYPE AFTER DELETE ON MDM_OWNER.REF_PROPERTY_LE_RELTYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_PROPERTY_LE_RELTYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_RELATIONSHIP_STATUS AFTER DELETE ON MDM_OWNER.REF_RELATIONSHIP_STATUS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_RELATIONSHIP_STATUS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_SOURCE_SYSTEM AFTER DELETE ON MDM_OWNER.REF_SOURCE_SYSTEM REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_SOURCE_SYSTEM ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_STATE_PROVINCE AFTER DELETE ON MDM_OWNER.REF_STATE_PROVINCE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_STATE_PROVINCE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION, COUNTRY_ISO_REFKEY ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION, :OLD.COUNTRY_ISO_REFKEY); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_STATUS_TYPE AFTER DELETE ON MDM_OWNER.REF_STATUS_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_STATUS_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_SUFFIX_NAME AFTER DELETE ON MDM_OWNER.REF_SUFFIX_NAME REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_SUFFIX_NAME ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_STATUS_IN_SOURCE AFTER DELETE ON MDM_OWNER.REF_STATUS_IN_SOURCE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_STATUS_IN_SOURCE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_TERMINATION_REASON AFTER DELETE ON MDM_OWNER.REF_TERMINATION_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_TERMINATION_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_VEHICLE AFTER DELETE ON MDM_OWNER.VEHICLE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_VEHICLE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, VIN_NUMBER, CHASSIS_NUMBER, MAKE, MODEL, YEAR, INTERIOR_COLOR, EXTERIOR_COLOR, REGISTRATION_NUMBER, COUNTRY_OF_REGISTRATION_REFKEY, INSURANCE_ISSUED_BY, INSURANCE_ISSUED_DATE, INSURANCE_EXPIRY_DATE ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.VIN_NUMBER, :OLD.CHASSIS_NUMBER, :OLD.MAKE, :OLD.MODEL, :OLD.YEAR, :OLD.INTERIOR_COLOR, :OLD.EXTERIOR_COLOR, :OLD.REGISTRATION_NUMBER, :OLD.COUNTRY_OF_REGISTRATION_REFKEY, :OLD.INSURANCE_ISSUED_BY, :OLD.INSURANCE_ISSUED_DATE, :OLD.INSURANCE_EXPIRY_DATE); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_AUTH_ROLES_REGISTRY AFTER DELETE ON MDM_OWNER.AUTH_ROLES_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_ROLES_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ROLE_NAME, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.ROLE_NAME, :OLD.DESCRIPTION ); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_AUTH_USER_ROLE_ASSOC AFTER INSERT ON MDM_OWNER.AUTH_USER_ROLE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_USER_ROLE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, AUTH_USER_REGISTRY_IDPK, AUTH_ROLES_REGISTRY_IDPK, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.AUTH_USER_REGISTRY_IDPK, :NEW.AUTH_ROLES_REGISTRY_IDPK, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_BATCH_ENTITY_TO_PROCESS AFTER INSERT ON MDM_OWNER.BATCH_ENTITY_TO_PROCESS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_BATCH_ENTITY_TO_PROCESS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ENTITY_OBJECT_TYPE_REFKEY, ENTITY_IDPK, BATCH_PROPOSED_ACTION_REFKEY, BATCH_ACTION_STATUS_REFKEY, PROCESS_AFTER_TIMESTAMP, PROCESS_BEFORE_TIMESTAMP, ENTRY_MADE_BY_SUBSYSTEM_NAME, COMMENTS ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ENTITY_OBJECT_TYPE_REFKEY, :NEW.ENTITY_IDPK, :NEW.BATCH_PROPOSED_ACTION_REFKEY, :NEW.BATCH_ACTION_STATUS_REFKEY, :NEW.PROCESS_AFTER_TIMESTAMP, :NEW.PROCESS_BEFORE_TIMESTAMP, :NEW.ENTRY_MADE_BY_SUBSYSTEM_NAME, :NEW.COMMENTS); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_AUTH_USERROLE_ACCESSCONTROL AFTER INSERT ON MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_AUTH_USERROLE_ACCESSCONTROL ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, PROFILE_TYPE, AUTH_USER_ROLE_REGISTRY_IDPK, CONFIG_TXN_REGISTRY_IDPK, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.PROFILE_TYPE, :NEW.AUTH_USER_ROLE_REGISTRY_IDPK, :NEW.CONFIG_TXN_REGISTRY_IDPK, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_CONFIG_APP_PROPERTIES AFTER INSERT ON MDM_OWNER.CONFIG_APP_PROPERTIES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_APP_PROPERTIES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, KEY, VALUE, VALUE_DEFAULT, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.KEY, :NEW.VALUE, :NEW.VALUE_DEFAULT, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_LEGALENTITY AFTER DELETE ON MDM_OWNER.LEGALENTITY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LEGALENTITY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, DISPLAY_NAME, ENTITY_OBJECT_TYPE_REFKEY, CLASSIFICATION_CODE_REFKEY, IMPORTANCE_TYPE_REFKEY, LE_RATING_REFKEY, STATUS_TYPE_REFKEY, SOURCE_SYSTEM_REFKEY, ONBOARDING_DATE, OFFBOARDING_DATE, KYC_VERIFICATION_FLAG, DESCRIPTION, PHONETIC_DISPLAY_NAME ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.DISPLAY_NAME, :OLD.ENTITY_OBJECT_TYPE_REFKEY, :OLD.CLASSIFICATION_CODE_REFKEY, :OLD.IMPORTANCE_TYPE_REFKEY, :OLD.LE_RATING_REFKEY, :OLD.STATUS_TYPE_REFKEY, :OLD.SOURCE_SYSTEM_REFKEY, :OLD.ONBOARDING_DATE, :OLD.OFFBOARDING_DATE, :OLD.KYC_VERIFICATION_FLAG, :OLD.DESCRIPTION, :OLD.PHONETIC_DISPLAY_NAME); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_CURRENCY AFTER DELETE ON MDM_OWNER.REF_CURRENCY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_CURRENCY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_ENTITY_OBJECT_TYPE AFTER DELETE ON MDM_OWNER.REF_ENTITY_OBJECT_TYPE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_ENTITY_OBJECT_TYPE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_DEACTIVATION_REASON AFTER DELETE ON MDM_OWNER.REF_DEACTIVATION_REASON REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_DEACTIVATION_REASON ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.D_REF_GENDER AFTER DELETE ON MDM_OWNER.REF_GENDER REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_REF_GENDER ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONFIG_LANGUAGE_CODE_KEY, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'D', :OLD.ID_PK, :OLD.VERSION, :OLD.CREATED_TS, :OLD.DELETED_TS, :OLD.UPDATED_TS, :OLD.UPDATED_BY_USER, :OLD.UPDATED_BY_TXN_ID, :OLD.CONFIG_LANGUAGE_CODE_KEY, :OLD.KEY, :OLD.VALUE, :OLD.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_ADDRESS AFTER INSERT ON MDM_OWNER.ADDRESS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ADDRESS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ADDRESS_LINE_ONE, ADDRESS_LINE_TWO, ADDRESS_LINE_THREE, ADDRESS_LINE_FOUR, STREET_NUMBER, STREET_NAME, HOUSE_NUMBER, BUILDING_NUMBER, COUNTY, CITY, DISTRICT_ZONE, STATE_PROVINCE_REFKEY, COUNTRY_REFKEY, POSTAL_CODE, NEAREST_LANDMARK, BOX_DESIGNATOR, BOX_IDENTIFIER, NEAREST_RAILWAY_STATION, NEAREST_AIRPORT, PHONETIC_ADDRESS_LINE_ONE, PHONETIC_ADDRESS_LINE_TWO, PHONETIC_ADDRESS_LINE_THREE, PHONETIC_ADDRESS_LINE_FOUR, PHONETIC_STREET_NAME, PHONETIC_COUNTY, PHONETIC_CITY, PHONETIC_DISTRICT_ZONE ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ADDRESS_LINE_ONE, :NEW.ADDRESS_LINE_TWO, :NEW.ADDRESS_LINE_THREE, :NEW.ADDRESS_LINE_FOUR, :NEW.STREET_NUMBER, :NEW.STREET_NAME, :NEW.HOUSE_NUMBER, :NEW.BUILDING_NUMBER, :NEW.COUNTY, :NEW.CITY, :NEW.DISTRICT_ZONE, :NEW.STATE_PROVINCE_REFKEY, :NEW.COUNTRY_REFKEY, :NEW.POSTAL_CODE, :NEW.NEAREST_LANDMARK, :NEW.BOX_DESIGNATOR, :NEW.BOX_IDENTIFIER, :NEW.NEAREST_RAILWAY_STATION, :NEW.NEAREST_AIRPORT, :NEW.PHONETIC_ADDRESS_LINE_ONE, :NEW.PHONETIC_ADDRESS_LINE_TWO, :NEW.PHONETIC_ADDRESS_LINE_THREE, :NEW.PHONETIC_ADDRESS_LINE_FOUR, :NEW.PHONETIC_STREET_NAME, :NEW.PHONETIC_COUNTY, :NEW.PHONETIC_CITY, :NEW.PHONETIC_DISTRICT_ZONE); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.T_LEGALENTITY
AFTER DELETE OR INSERT OR UPDATE
ON MDM_OWNER.LEGALENTITY 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DISABLE
DECLARE
    EventType CHAR(1);

BEGIN

IF INSERTING THEN
EventType :='I';
ELSIF UPDATING THEN
EventType :='U';
ELSIF DELETING THEN
EventType :='D';
END IF;

INSERT INTO AL_LEGALENTITY (
  AUDITLOG_ID_PK
, AUDITLOG_CREATED_TS
, AUDITLOG_ACTION_CODE
, ID_PK
, VERSION
, CREATED_TS
, DELETED_TS
, UPDATED_TS
, UPDATED_BY_USER
, UPDATED_BY_TXN_ID
, DISPLAY_NAME
, ENTITY_OBJECT_TYPE_REFKEY
, CLASSIFICATION_CODE_REFKEY
, IMPORTANCE_TYPE_REFKEY
, LE_RATING_REFKEY
, STATUS_TYPE_REFKEY
, SOURCE_SYSTEM_REFKEY
, ONBOARDING_DATE
, OFFBOARDING_DATE
, KYC_VERIFICATION_FLAG
, DESCRIPTION
, PHONETIC_DISPLAY_NAME
 ) VALUES
( (select sys_guid() from dual)
, CURRENT_TIMESTAMP
, EventType
, :NEW.ID_PK
, :NEW.VERSION
, :NEW.CREATED_TS
, :NEW.DELETED_TS
, :NEW.UPDATED_TS
, :NEW.UPDATED_BY_USER
, :NEW.UPDATED_BY_TXN_ID
, :NEW.DISPLAY_NAME
, :NEW.ENTITY_OBJECT_TYPE_REFKEY
, :NEW.CLASSIFICATION_CODE_REFKEY
, :NEW.IMPORTANCE_TYPE_REFKEY
, :NEW.LE_RATING_REFKEY
, :NEW.STATUS_TYPE_REFKEY
, :NEW.SOURCE_SYSTEM_REFKEY
, :NEW.ONBOARDING_DATE
, :NEW.OFFBOARDING_DATE
, :NEW.KYC_VERIFICATION_FLAG
, :NEW.DESCRIPTION
, :NEW.PHONETIC_DISPLAY_NAME
);
END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_ACCOUNT AFTER INSERT ON MDM_OWNER.ACCOUNT REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ACCOUNT ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, CONTRACT_SIGNED_LANG_REFKEY, CURRENCY_REFKEY, BILLING_MODE_TYPE_REFKEY, FREQUENCY_OF_PAYMENT, LOBTYPE_REFKEY, LOB_DESCRIPTION, SOURCE_SYSTEM_REFKEY, SOURCE_ACCOUNT_ID, MANAGEDBY_BU_CODE, MANAGEDBY_BU_ID, BRANCH_CODE_REFKEY, ACCOUNT_NAME, ACCOUNT_NAME2, ACCOUNT_DESCRIPTION, ACCOUNT_SOURCE_STATUS_REFKEY, ACCOUNT_MDM_STATUS_REFKEY, SIGNED_DATE, SIGNED_PLACE, EXECUTED_DATE, TERMINATED_DATE, TERMINATION_REASON_REFKEY ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.CONTRACT_SIGNED_LANG_REFKEY, :NEW.CURRENCY_REFKEY, :NEW.BILLING_MODE_TYPE_REFKEY, :NEW.FREQUENCY_OF_PAYMENT, :NEW.LOBTYPE_REFKEY, :NEW.LOB_DESCRIPTION, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.SOURCE_ACCOUNT_ID, :NEW.MANAGEDBY_BU_CODE, :NEW.MANAGEDBY_BU_ID, :NEW.BRANCH_CODE_REFKEY, :NEW.ACCOUNT_NAME, :NEW.ACCOUNT_NAME2, :NEW.ACCOUNT_DESCRIPTION, :NEW.ACCOUNT_SOURCE_STATUS_REFKEY, :NEW.ACCOUNT_MDM_STATUS_REFKEY, :NEW.SIGNED_DATE, :NEW.SIGNED_PLACE, :NEW.EXECUTED_DATE, :NEW.TERMINATED_DATE, :NEW.TERMINATION_REASON_REFKEY); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_ACCOUNT_ADDRESS_ASSOC AFTER INSERT ON MDM_OWNER.ACCOUNT_ADDRESS_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ACCOUNT_ADDRESS_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ACCOUNT_IDPK, ADDRESS_IDPK, ADDRESS_TYPE_REFKEY, ADDRESS_SUBTYPE_REFKEY, PREFERRED_FLAG, SOLICITATION_FLAG ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ACCOUNT_IDPK, :NEW.ADDRESS_IDPK, :NEW.ADDRESS_TYPE_REFKEY, :NEW.ADDRESS_SUBTYPE_REFKEY, :NEW.PREFERRED_FLAG, :NEW.SOLICITATION_FLAG); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_ACCOUNT_PHONE_ASSOC AFTER INSERT ON MDM_OWNER.ACCOUNT_PHONE_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ACCOUNT_PHONE_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ACCOUNT_IDPK, PHONE_TYPE_REFKEY, PHONE_SUBTYPE_REFKEY, PREFERRED_FLAG, PHONE_NUMBER, PHONE_STANDARDIZED_IDPK ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ACCOUNT_IDPK, :NEW.PHONE_TYPE_REFKEY, :NEW.PHONE_SUBTYPE_REFKEY, :NEW.PREFERRED_FLAG, :NEW.PHONE_NUMBER, :NEW.PHONE_STANDARDIZED_IDPK); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_CONFIG_ERRORCODE_REGISTRY AFTER INSERT ON MDM_OWNER.CONFIG_ERRORCODE_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_ERRORCODE_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CONFIG_LANGUAGE_CODE_KEY, ERROR_CODE, ERROR_MESSAGE, DESCRIPTION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CONFIG_LANGUAGE_CODE_KEY, :NEW.ERROR_CODE, :NEW.ERROR_MESSAGE, :NEW.DESCRIPTION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_CONFIG_INQUIRY_LEVELS AFTER INSERT ON MDM_OWNER.CONFIG_INQUIRY_LEVELS REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_INQUIRY_LEVELS ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, INQUIRY_LEVEL, APPLICABLE_DOBJ, CHILD_DOBJ, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.INQUIRY_LEVEL, :NEW.APPLICABLE_DOBJ, :NEW.CHILD_DOBJ, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_CONFIG_LANGUAGE_CODE AFTER INSERT ON MDM_OWNER.CONFIG_LANGUAGE_CODE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_LANGUAGE_CODE ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, KEY, VALUE, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.KEY, :NEW.VALUE, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_CONFIG_TXN_REGISTRY AFTER INSERT ON MDM_OWNER.CONFIG_TXN_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CONFIG_TXN_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, TXNSERVICE_NAME, TXNSERVICE_CLASS, TXNSERVICE_CLASSMETHOD, DESCRIPTION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_TXN_REF_ID ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.TXNSERVICE_NAME, :NEW.TXNSERVICE_CLASS, :NEW.TXNSERVICE_CLASSMETHOD, :NEW.DESCRIPTION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_TXN_REF_ID); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_CORPORATIONNAMES AFTER INSERT ON MDM_OWNER.CORPORATIONNAMES REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_CORPORATIONNAMES ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, CORPORATION_NAME_TYPE_REFKEY, CORPORATION_NAME, SOURCE_SYSTEM_REFKEY, PHONETIC_CORPORATION_NAME ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.CORPORATION_NAME_TYPE_REFKEY, :NEW.CORPORATION_NAME, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.PHONETIC_CORPORATION_NAME); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_ENTITY_GROUP AFTER INSERT ON MDM_OWNER.ENTITY_GROUP REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ENTITY_GROUP ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, GROUP_TYPE_REFKEY, GROUP_SUBTYPE_REFKEY, GROUP_NAME, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.GROUP_TYPE_REFKEY, :NEW.GROUP_SUBTYPE_REFKEY, :NEW.GROUP_NAME, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_ENTITY_GROUP_ASSOC AFTER INSERT ON MDM_OWNER.ENTITY_GROUP_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_ENTITY_GROUP_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, ENTITY_OBJECT_TYPE_REFKEY, ENTITY_IDPK, ENTITY_GROUP_IDPK, ASSOC_TYPE_REFKEY, DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.ENTITY_OBJECT_TYPE_REFKEY, :NEW.ENTITY_IDPK, :NEW.ENTITY_GROUP_IDPK, :NEW.ASSOC_TYPE_REFKEY, :NEW.DESCRIPTION); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_INACTIVE_LE_REGISTRY AFTER INSERT ON MDM_OWNER.INACTIVE_LE_REGISTRY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_INACTIVE_LE_REGISTRY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, INACTIVATED_TS, INACTIVATION_REASON_REFKEY, COMMENTS ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.INACTIVATED_TS, :NEW.INACTIVATION_REASON_REFKEY, :NEW.COMMENTS); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LEGALENTITY AFTER INSERT ON MDM_OWNER.LEGALENTITY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LEGALENTITY ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, DISPLAY_NAME, ENTITY_OBJECT_TYPE_REFKEY, CLASSIFICATION_CODE_REFKEY, IMPORTANCE_TYPE_REFKEY, LE_RATING_REFKEY, STATUS_TYPE_REFKEY, SOURCE_SYSTEM_REFKEY, ONBOARDING_DATE, OFFBOARDING_DATE, KYC_VERIFICATION_FLAG, DESCRIPTION, PHONETIC_DISPLAY_NAME ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.DISPLAY_NAME, :NEW.ENTITY_OBJECT_TYPE_REFKEY, :NEW.CLASSIFICATION_CODE_REFKEY, :NEW.IMPORTANCE_TYPE_REFKEY, :NEW.LE_RATING_REFKEY, :NEW.STATUS_TYPE_REFKEY, :NEW.SOURCE_SYSTEM_REFKEY, :NEW.ONBOARDING_DATE, :NEW.OFFBOARDING_DATE, :NEW.KYC_VERIFICATION_FLAG, :NEW.DESCRIPTION, :NEW.PHONETIC_DISPLAY_NAME); END;
/


CREATE OR REPLACE TRIGGER MDM_OWNER.I_LE_ACCOUNT_ASSOC AFTER INSERT ON MDM_OWNER.LE_ACCOUNT_ASSOC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN INSERT INTO AL_LE_ACCOUNT_ASSOC ( AUDITLOG_ID_PK, AUDITLOG_CREATED_TS, AUDITLOG_ACTION_CODE ,ID_PK, VERSION, CREATED_TS, DELETED_TS, UPDATED_TS, UPDATED_BY_USER, UPDATED_BY_TXN_ID, LEGALENTITY_IDPK, LE_ROLETYPE_REFKEY, ACCOUNT_IDPK, ROLE_ACTIVATION_DATE, ROLE_DEACTIVATION_DATE, DEACTIVATION_REASON_REFKEY, AGREEMENT_TYPE_REFKEY, AGREEMENT_TYPE_DESCRIPTION ) VALUES( (select sys_guid() from dual), CURRENT_TIMESTAMP, 'I', :NEW.ID_PK, :NEW.VERSION, :NEW.CREATED_TS, :NEW.DELETED_TS, :NEW.UPDATED_TS, :NEW.UPDATED_BY_USER, :NEW.UPDATED_BY_TXN_ID, :NEW.LEGALENTITY_IDPK, :NEW.LE_ROLETYPE_REFKEY, :NEW.ACCOUNT_IDPK, :NEW.ROLE_ACTIVATION_DATE, :NEW.ROLE_DEACTIVATION_DATE, :NEW.DEACTIVATION_REASON_REFKEY, :NEW.AGREEMENT_TYPE_REFKEY, :NEW.AGREEMENT_TYPE_DESCRIPTION); END;
/


ALTER TABLE MDM_OWNER.ACCOUNT ADD (
  CONSTRAINT ACCOUNT_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.ACCOUNT_PK);

ALTER TABLE MDM_OWNER.ACCOUNT_ADDRESS_ASSOC ADD (
  CONSTRAINT ACCOUNT_ADDRESS_ASSOC_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.ACCOUNT_ADDRESS_ASSOC_PK,
  CONSTRAINT ACCOUNTADDRESSASSOC_UNIQUEKEY
  UNIQUE (ACCOUNT_IDPK, ADDRESS_IDPK, ADDRESS_TYPE_REFKEY)
  USING INDEX MDM_OWNER.ACCOUNTADDRESSASSOC_UNIQUEKEY);

ALTER TABLE MDM_OWNER.ACCOUNT_PHONE_ASSOC ADD (
  CONSTRAINT ACCOUNT_PHONE_ASSOC_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.ACCOUNT_PHONE_ASSOC_PK,
  CONSTRAINT ACCOUNTPHONEASSOC_UNIQUEKEY
  UNIQUE (ACCOUNT_IDPK, PHONE_TYPE_REFKEY)
  USING INDEX MDM_OWNER.ACCOUNTPHONEASSOC_UNIQUEKEY);

ALTER TABLE MDM_OWNER.ADDRESS ADD (
  CONSTRAINT ADDRESS_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.ADDRESS_PK);

ALTER TABLE MDM_OWNER.AL_ACCOUNT ADD (
  CONSTRAINT AL_ACCOUNT_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_ACCOUNT_PK);

ALTER TABLE MDM_OWNER.AL_ACCOUNT_ADDRESS_ASSOC ADD (
  CONSTRAINT AL_ACCOUNT_ADDRESS_ASSOC_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_ACCOUNT_ADDRESS_ASSOC_PK);

ALTER TABLE MDM_OWNER.AL_ACCOUNT_PHONE_ASSOC ADD (
  CONSTRAINT AL_ACCOUNT_PHONE_ASSOC_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_ACCOUNT_PHONE_ASSOC_PK);

ALTER TABLE MDM_OWNER.AL_ADDRESS ADD (
  CONSTRAINT AL_ADDRESS_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_ADDRESS_PK);

ALTER TABLE MDM_OWNER.AL_AUTH_ROLES_REGISTRY ADD (
  CONSTRAINT AL_AUTH_ROLES_REGISTRY_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_AUTH_ROLES_REGISTRY_PK);

ALTER TABLE MDM_OWNER.AL_AUTH_USERROLE_ACCESSCONTROL ADD (
  CONSTRAINT AL_AUTH_USERROLE_ACCESSCONT_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_AUTH_USERROLE_ACCESSCONT_PK);

ALTER TABLE MDM_OWNER.AL_AUTH_USER_REGISTRY ADD (
  CONSTRAINT AL_AUTH_USER_REGISTRY_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_AUTH_USER_REGISTRY_PK);

ALTER TABLE MDM_OWNER.AL_AUTH_USER_ROLE_ASSOC ADD (
  CONSTRAINT AL_AUTH_USER_ROLE_ASSOC_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_AUTH_USER_ROLE_ASSOC_PK);

ALTER TABLE MDM_OWNER.AL_BATCH_ENTITY_TO_PROCESS ADD (
  CONSTRAINT AL_BATCH_ENTITY_TO_PROCESS_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_BATCH_ENTITY_TO_PROCESS_PK);

ALTER TABLE MDM_OWNER.AL_CONFIG_APP_PROPERTIES ADD (
  CONSTRAINT AL_CONFIG_APP_PROPERTIES_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_CONFIG_APP_PROPERTIES_PK);

ALTER TABLE MDM_OWNER.AL_CONFIG_ERRORCODE_REGISTRY ADD (
  CONSTRAINT AL_CONFIG_ERRCODE_REGISTRY_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_CONFIG_ERRCODE_REGISTRY_PK);

ALTER TABLE MDM_OWNER.AL_CONFIG_INQUIRY_LEVELS ADD (
  CONSTRAINT AL_CONFIG_INQUIRY_LEVELS_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_CONFIG_INQUIRY_LEVELS_PK);

ALTER TABLE MDM_OWNER.AL_CONFIG_LANGUAGE_CODE ADD (
  CONSTRAINT AL_CONFIG_LANGUAGE_CODE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_CONFIG_LANGUAGE_CODE_PK);

ALTER TABLE MDM_OWNER.AL_CONFIG_TXN_REGISTRY ADD (
  CONSTRAINT AL_CONFIG_TXN_REGISTRY_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_CONFIG_TXN_REGISTRY_PK);

ALTER TABLE MDM_OWNER.AL_CORPORATIONNAMES ADD (
  CONSTRAINT AL_CORPORATIONNAMES_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_CORPORATIONNAMES_PK);

ALTER TABLE MDM_OWNER.AL_ENTITY_GROUP ADD (
  CONSTRAINT AL_ENTITY_GROUP_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_ENTITY_GROUP_PK);

ALTER TABLE MDM_OWNER.AL_ENTITY_GROUP_ASSOC ADD (
  CONSTRAINT AL_ENTITY_GROUP_ASSOC_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_ENTITY_GROUP_ASSOC_PK);

ALTER TABLE MDM_OWNER.AL_INACTIVE_LE_REGISTRY ADD (
  CONSTRAINT AL_INACTIVE_LE_REGISTRY_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_INACTIVE_LE_REGISTRY_PK);

ALTER TABLE MDM_OWNER.AL_LEGALENTITY ADD (
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX
    TABLESPACE MDM_INDXTS);

ALTER TABLE MDM_OWNER.AL_LE_ACCOUNT_ASSOC ADD (
  CONSTRAINT AL_LE_ACCOUNT_ASSOC_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_LE_ACCOUNT_ASSOC_PK);

ALTER TABLE MDM_OWNER.AL_LE_ADDRESS_ASSOC ADD (
  CONSTRAINT AL_LE_ADDRESS_ASSOC_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_LE_ADDRESS_ASSOC_PK);

ALTER TABLE MDM_OWNER.AL_LE_CORPORATION ADD (
  CONSTRAINT AL_LE_CORPORATION_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_LE_CORPORATION_PK);

ALTER TABLE MDM_OWNER.AL_LE_IDENTIFIER_KYC_REGISTRY ADD (
  CONSTRAINT AL_LE_IDENTIFIER_KYC_REGIST_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_LE_IDENTIFIER_KYC_REGIST_PK);

ALTER TABLE MDM_OWNER.AL_LE_PERSON ADD (
  CONSTRAINT AL_LE_PERSON_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_LE_PERSON_PK);

ALTER TABLE MDM_OWNER.AL_LE_PHONE_ASSOC ADD (
  CONSTRAINT AL_LE_PHONE_ASSOC_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_LE_PHONE_ASSOC_PK);

ALTER TABLE MDM_OWNER.AL_LE_PREFERENCES ADD (
  CONSTRAINT AL_LE_PREFERENCES_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_LE_PREFERENCES_PK);

ALTER TABLE MDM_OWNER.AL_LE_PROPERTY_ASSOC ADD (
  CONSTRAINT AL_LE_PROPERTY_ASSOC_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_LE_PROPERTY_ASSOC_PK);

ALTER TABLE MDM_OWNER.AL_LE_SYSTEM_KEYS_REGISTRY ADD (
  CONSTRAINT AL_LE_SYSTEM_KEYS_REGISTRY_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_LE_SYSTEM_KEYS_REGISTRY_PK);

ALTER TABLE MDM_OWNER.AL_LE_TO_LE_RELATIONSHIP ADD (
  CONSTRAINT AL_LE_TO_LE_RELATIONSHIP_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_LE_TO_LE_RELATIONSHIP_PK);

ALTER TABLE MDM_OWNER.AL_LE_VEHICLE_ASSOC ADD (
  CONSTRAINT AL_LE_VEHICLE_ASSOC_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_LE_VEHICLE_ASSOC_PK);

ALTER TABLE MDM_OWNER.AL_MATCH_CANDIDATE_LE_REGISTRY ADD (
  CONSTRAINT AL_MATCH_CANDIDATE_LE_REGIS_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_MATCH_CANDIDATE_LE_REGIS_PK);

ALTER TABLE MDM_OWNER.AL_MATCH_MERGED_LE_ASSOC ADD (
  CONSTRAINT AL_MATCH_MERGED_LE_ASSOC_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_MATCH_MERGED_LE_ASSOC_PK);

ALTER TABLE MDM_OWNER.AL_MISCELLANEOUS_INFO ADD (
  CONSTRAINT AL_MISCELLANEOUS_INFO_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_MISCELLANEOUS_INFO_PK);

ALTER TABLE MDM_OWNER.AL_PERSONNAMES ADD (
  CONSTRAINT AL_PERSONNAMES_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_PERSONNAMES_PK);

ALTER TABLE MDM_OWNER.AL_PHONE_STANDARDIZED ADD (
  CONSTRAINT AL_PHONE_STANDARDIZED_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_PHONE_STANDARDIZED_PK);

ALTER TABLE MDM_OWNER.AL_PROPERTY ADD (
  CONSTRAINT AL_PROPERTY_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_PROPERTY_PK);

ALTER TABLE MDM_OWNER.AL_REF_ACCOUNT_MDM_STATUS ADD (
  CONSTRAINT AL_REF_ACCOUNT_MDM_STATUS_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_ACCOUNT_MDM_STATUS_PK);

ALTER TABLE MDM_OWNER.AL_REF_ACCOUNT_SOURCE_STATUS ADD (
  CONSTRAINT AL_REF_ACCOUNT_SOURCE_STATUSPK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_ACCOUNT_SOURCE_STATUSPK);

ALTER TABLE MDM_OWNER.AL_REF_ADDRESS_SUBTYPE ADD (
  CONSTRAINT AL_REF_ADDRESS_SUBTYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_ADDRESS_SUBTYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_ADDRESS_TYPE ADD (
  CONSTRAINT AL_REF_ADDRESS_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_ADDRESS_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_AGREEMENT_TYPE ADD (
  CONSTRAINT AL_REF_AGREEMENT_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_AGREEMENT_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_ASSOC_TYPE ADD (
  CONSTRAINT AL_REF_ASSOC_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_ASSOC_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_BATCH_ACTION_STATUS ADD (
  CONSTRAINT AL_REF_BATCH_ACTION_STATUS_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_BATCH_ACTION_STATUS_PK);

ALTER TABLE MDM_OWNER.AL_REF_BATCH_PROPOSED_ACTION ADD (
  CONSTRAINT AL_REF_BATCH_PROPOSED_ACTIONPK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_BATCH_PROPOSED_ACTIONPK);

ALTER TABLE MDM_OWNER.AL_REF_BILLING_MODE_TYPE ADD (
  CONSTRAINT AL_REF_BILLING_MODE_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_BILLING_MODE_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_BRANCH_CODE ADD (
  CONSTRAINT AL_REF_BRANCH_CODE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_BRANCH_CODE_PK);

ALTER TABLE MDM_OWNER.AL_REF_CLASSIFICATION_CODE ADD (
  CONSTRAINT AL_REF_CLASSIFICATION_CODE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_CLASSIFICATION_CODE_PK);

ALTER TABLE MDM_OWNER.AL_REF_CORPORATION_NAME_TYP ADD (
  CONSTRAINT AL_REF_CORPORATION_NAME_TYP_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_CORPORATION_NAME_TYP_PK);

ALTER TABLE MDM_OWNER.AL_REF_CORPORATION_NAME_TYPE ADD (
  CONSTRAINT AL_REF_CORPORATION_NAME_TYPEPK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_CORPORATION_NAME_TYPEPK);

ALTER TABLE MDM_OWNER.AL_REF_CORPORATION_TYPE ADD (
  CONSTRAINT AL_REF_CORPORATION_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_CORPORATION_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_COUNTRY_ISO ADD (
  CONSTRAINT AL_REF_COUNTRY_ISO_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_COUNTRY_ISO_PK);

ALTER TABLE MDM_OWNER.AL_REF_CURRENCY ADD (
  CONSTRAINT AL_REF_CURRENCY_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_CURRENCY_PK);

ALTER TABLE MDM_OWNER.AL_REF_DEACTIVATION_REASON ADD (
  CONSTRAINT AL_REF_DEACTIVATION_REASON_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_DEACTIVATION_REASON_PK);

ALTER TABLE MDM_OWNER.AL_REF_ENTITY_OBJECT_TYPE ADD (
  CONSTRAINT AL_REF_ENTITY_OBJECT_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_ENTITY_OBJECT_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_GENDER ADD (
  CONSTRAINT AL_REF_GENDER_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_GENDER_PK);

ALTER TABLE MDM_OWNER.AL_REF_GROUP_SUBTYPE ADD (
  CONSTRAINT AL_REF_GROUP_SUBTYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_GROUP_SUBTYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_GROUP_TYPE ADD (
  CONSTRAINT AL_REF_GROUP_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_GROUP_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_HIGHEST_EDU_QUAL ADD (
  CONSTRAINT AL_REF_HIGHEST_EDU_QUAL_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_HIGHEST_EDU_QUAL_PK);

ALTER TABLE MDM_OWNER.AL_REF_IDENTIFICATION_TYPE ADD (
  CONSTRAINT AL_REF_IDENTIFICATION_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_IDENTIFICATION_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_IMPORTANCE_TYPE ADD (
  CONSTRAINT AL_REF_IMPORTANCE_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_IMPORTANCE_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_INACTIVATION_REASON ADD (
  CONSTRAINT AL_REF_INACTIVATION_REASON_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_INACTIVATION_REASON_PK);

ALTER TABLE MDM_OWNER.AL_REF_INDUSTRY_CODE ADD (
  CONSTRAINT AL_REF_INDUSTRY_CODE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_INDUSTRY_CODE_PK);

ALTER TABLE MDM_OWNER.AL_REF_LANGUAGE_CODE ADD (
  CONSTRAINT AL_REF_LANGUAGE_CODE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_LANGUAGE_CODE_PK);

ALTER TABLE MDM_OWNER.AL_REF_LE_RATING ADD (
  CONSTRAINT AL_REF_LE_RATING_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_LE_RATING_PK);

ALTER TABLE MDM_OWNER.AL_REF_LE_RELATIONSHIP_TYPE ADD (
  CONSTRAINT AL_REF_LE_RELATIONSHIP_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_LE_RELATIONSHIP_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_LE_ROLETYPE ADD (
  CONSTRAINT AL_REF_LE_ROLETYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_LE_ROLETYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_LOBTYPE ADD (
  CONSTRAINT AL_REF_LOBTYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_LOBTYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_MATCH_ACTIONSTATUS ADD (
  CONSTRAINT AL_REF_MATCH_ACTIONSTATUS_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_MATCH_ACTIONSTATUS_PK);

ALTER TABLE MDM_OWNER.AL_REF_MATCH_PROPOSED_ACTION ADD (
  CONSTRAINT AL_REF_MATCH_PROPOSED_ACTIONPK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_MATCH_PROPOSED_ACTIONPK);

ALTER TABLE MDM_OWNER.AL_REF_MATCH_RESULT ADD (
  CONSTRAINT AL_REF_MATCH_RESULT_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_MATCH_RESULT_PK);

ALTER TABLE MDM_OWNER.AL_REF_MATCH_SCORE ADD (
  CONSTRAINT AL_REF_MATCH_SCORE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_MATCH_SCORE_PK);

ALTER TABLE MDM_OWNER.AL_REF_MATCH_THRESHOLD ADD (
  CONSTRAINT AL_REF_MATCH_THRESHOLD_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_MATCH_THRESHOLD_PK);

ALTER TABLE MDM_OWNER.AL_REF_MERGE_REASON ADD (
  CONSTRAINT AL_REF_MERGE_REASON_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_MERGE_REASON_PK);

ALTER TABLE MDM_OWNER.AL_REF_PERSONNAME_TYPE ADD (
  CONSTRAINT AL_REF_PERSONNAME_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_PERSONNAME_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_PERSON_TYPE ADD (
  CONSTRAINT AL_REF_PERSON_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_PERSON_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_PHONE_SUBTYPE ADD (
  CONSTRAINT AL_REF_PHONE_SUBTYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_PHONE_SUBTYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_PHONE_TYPE ADD (
  CONSTRAINT AL_REF_PHONE_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_PHONE_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_PREFERENCE_TYPE ADD (
  CONSTRAINT AL_REF_PREFERENCE_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_PREFERENCE_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_PREFIX_NAME ADD (
  CONSTRAINT AL_REF_PREFIX_NAME_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_PREFIX_NAME_PK);

ALTER TABLE MDM_OWNER.AL_REF_PROPERTY_LE_RELTYPE ADD (
  CONSTRAINT AL_REF_PROPERTY_LE_RELTYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_PROPERTY_LE_RELTYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_RELATIONSHIP_STATUS ADD (
  CONSTRAINT AL_REF_RELATIONSHIP_STATUS_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_RELATIONSHIP_STATUS_PK);

ALTER TABLE MDM_OWNER.AL_REF_SOURCE_SYSTEM ADD (
  CONSTRAINT AL_REF_SOURCE_SYSTEM_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_SOURCE_SYSTEM_PK);

ALTER TABLE MDM_OWNER.AL_REF_STATE_PROVINCE ADD (
  CONSTRAINT AL_REF_STATE_PROVINCE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_STATE_PROVINCE_PK);

ALTER TABLE MDM_OWNER.AL_REF_STATUS_IN_SOURCE ADD (
  CONSTRAINT AL_REF_STATUS_IN_SOURCE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_STATUS_IN_SOURCE_PK);

ALTER TABLE MDM_OWNER.AL_REF_STATUS_TYPE ADD (
  CONSTRAINT AL_REF_STATUS_TYPE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_STATUS_TYPE_PK);

ALTER TABLE MDM_OWNER.AL_REF_SUFFIX_NAME ADD (
  CONSTRAINT AL_REF_SUFFIX_NAME_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_SUFFIX_NAME_PK);

ALTER TABLE MDM_OWNER.AL_REF_TERMINATION_REASON ADD (
  CONSTRAINT AL_REF_TERMINATION_REASON_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_REF_TERMINATION_REASON_PK);

ALTER TABLE MDM_OWNER.AL_VEHICLE ADD (
  CONSTRAINT AL_VEHICLE_PK
  PRIMARY KEY
  (AUDITLOG_ID_PK)
  USING INDEX MDM_OWNER.AL_VEHICLE_PK);

ALTER TABLE MDM_OWNER.AUTH_ROLES_REGISTRY ADD (
  CONSTRAINT AUTH_ROLES_REGISTRY_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.AUTH_ROLES_REGISTRY_PK,
  CONSTRAINT AUTH_ROLES_REGISTRY_UNIQUEKEY
  UNIQUE (ROLE_NAME)
  USING INDEX MDM_OWNER.AUTH_ROLES_REGISTRY_UNIQUEKEY);

ALTER TABLE MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL ADD (
  CONSTRAINT AUTH_USERROLE_ACCESSCONTROL_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.AUTH_USERROLE_ACCESSCONTROL_PK,
  UNIQUE (PROFILE_TYPE, AUTH_USER_ROLE_REGISTRY_IDPK, CONFIG_TXN_REGISTRY_IDPK)
  USING INDEX
    TABLESPACE MDM_INDXTS);

ALTER TABLE MDM_OWNER.AUTH_USER_REGISTRY ADD (
  CONSTRAINT AUTH_USER_ROLE_REGISTRY_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.AUTH_USER_ROLE_REGISTRY_PK,
  CONSTRAINT AUTH_USER_ROLE_REGISTRY_UKEY
  UNIQUE (USER_NAME)
  USING INDEX MDM_OWNER.AUTH_USER_ROLE_REGISTRY_UKEY);

ALTER TABLE MDM_OWNER.AUTH_USER_ROLE_ASSOC ADD (
  CONSTRAINT AUTH_USER_ROLE_ASSOC_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.AUTH_USER_ROLE_ASSOC_PK,
  CONSTRAINT AUTH_USER_ROLE_ASSOC_UKEY
  UNIQUE (AUTH_USER_REGISTRY_IDPK, AUTH_ROLES_REGISTRY_IDPK)
  USING INDEX MDM_OWNER.AUTH_USER_ROLE_ASSOC_UKEY);

ALTER TABLE MDM_OWNER.BATCH_ENTITY_TO_PROCESS ADD (
  CONSTRAINT BATCH_ENTITY_TO_PROCESS_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.BATCH_ENTITY_TO_PROCESS_PK);

ALTER TABLE MDM_OWNER.CONFIG_APP_PROPERTIES ADD (
  CONSTRAINT CONFIG_APP_PROPERTIES_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.CONFIG_APP_PROPERTIES_PK,
  CONSTRAINT CONFIG_APPPROP_UNIQUEKEY
  UNIQUE (KEY)
  USING INDEX MDM_OWNER.CONFIG_APPPROP_UNIQUEKEY);

ALTER TABLE MDM_OWNER.CONFIG_ERRORCODE_REGISTRY ADD (
  CONSTRAINT CONFIG_ERRORCODE_REGISTRY_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.CONFIG_ERRORCODE_REGISTRY_PK,
  CONSTRAINT CONFERRCODEREG_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, ERROR_CODE)
  USING INDEX MDM_OWNER.CONFERRCODEREG_UNIQUEKEY);

ALTER TABLE MDM_OWNER.CONFIG_INQUIRY_LEVELS ADD (
  CONSTRAINT CONFIG_INQUIRY_LEVELS_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.CONFIG_INQUIRY_LEVELS_PK,
  CONSTRAINT CONFIGINQLEVELS_UNIQUEKEY
  UNIQUE (INQUIRY_LEVEL, APPLICABLE_DOBJ, CHILD_DOBJ)
  USING INDEX MDM_OWNER.CONFIGINQLEVELS_UNIQUEKEY);

ALTER TABLE MDM_OWNER.CONFIG_LANGUAGE_CODE ADD (
  CONSTRAINT CONFIG_LANGUAGE_CODE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.CONFIG_LANGUAGE_CODE_PK,
  CONSTRAINT CONFIG_LANGCODE_UNIQUEKEY
  UNIQUE (KEY)
  USING INDEX MDM_OWNER.CONFIG_LANGCODE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.CONFIG_TXN_REGISTRY ADD (
  CONSTRAINT CONFIG_TXNREGISTRY_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.CONFIG_APPPROPERTIES_PK,
  CONSTRAINT TXNSERVICE_UNIQUE
  UNIQUE (TXNSERVICE_NAME, TXNSERVICE_CLASS, TXNSERVICE_CLASSMETHOD)
  USING INDEX MDM_OWNER.TXNSERVICE_UNIQUE,
  CONSTRAINT UNIQUESERVICENAME
  UNIQUE (TXNSERVICE_NAME)
  USING INDEX MDM_OWNER.UNIQUESERVICENAME);

ALTER TABLE MDM_OWNER.CORPORATIONNAMES ADD (
  CONSTRAINT CORPORATIONNAMES_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.CORPORATIONNAMES_PK,
  CONSTRAINT CORPORATIONNAMES_UNIQKEY
  UNIQUE (LEGALENTITY_IDPK, CORPORATION_NAME_TYPE_REFKEY)
  USING INDEX MDM_OWNER.CORPORATIONNAMES_UNIQKEY);

ALTER TABLE MDM_OWNER.ENTITY_GROUP ADD (
  CONSTRAINT ENTITY_GROUP_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.ENTITY_GROUP_PK);

ALTER TABLE MDM_OWNER.ENTITY_GROUP_ASSOC ADD (
  CONSTRAINT ENTITY_GROUP_ASSOC_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.ENTITY_GROUP_ASSOC_PK,
  CONSTRAINT ENTITYGROUPASSOC_UNIQUEKEY
  UNIQUE (ENTITY_OBJECT_TYPE_REFKEY, ENTITY_IDPK, ENTITY_GROUP_IDPK, ASSOC_TYPE_REFKEY)
  USING INDEX MDM_OWNER.ENTITYGROUPASSOC_UNIQUEKEY);

ALTER TABLE MDM_OWNER.FACILITYDEMO ADD (
  PRIMARY KEY
  (ID_PK)
  USING INDEX
    TABLESPACE MDM_DATATS);

ALTER TABLE MDM_OWNER.INACTIVE_LE_REGISTRY ADD (
  CONSTRAINT INACTIVE_LE_REGISTRY_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.INACTIVE_LE_REGISTRY_PK);

ALTER TABLE MDM_OWNER.LEGALENTITY ADD (
  CONSTRAINT LEGALENTITY_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.LEGALENTITY_PK);

ALTER TABLE MDM_OWNER.LE_ACCOUNT_ASSOC ADD (
  CONSTRAINT LE_ACCOUNT_ASSOC_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.LE_ACCOUNT_ASSOC_PK,
  CONSTRAINT LEACCOUNTASSOC__UNIQUEKEY
  UNIQUE (LEGALENTITY_IDPK, LE_ROLETYPE_REFKEY, ACCOUNT_IDPK)
  USING INDEX MDM_OWNER.LEACCOUNTASSOC__UNIQUEKEY);

ALTER TABLE MDM_OWNER.LE_ADDRESS_ASSOC ADD (
  CONSTRAINT LE_ADDRESS_ASSOC_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.LE_ADDRESS_ASSOC_PK,
  CONSTRAINT LEADDRESSASSOC_UNIQKEY
  UNIQUE (LEGALENTITY_IDPK, ADDRESS_TYPE_REFKEY, ADDRESS_SUBTYPE_REFKEY)
  USING INDEX MDM_OWNER.LEADDRESSASSOC_UNIQKEY);

ALTER TABLE MDM_OWNER.LE_CORPORATION ADD (
  CONSTRAINT CORPORATION_PK
  PRIMARY KEY
  (LEGALENTITY_IDPK)
  USING INDEX MDM_OWNER.CORPORATION_PK);

ALTER TABLE MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY ADD (
  CONSTRAINT LE_IDENTIFIER_KYC_REGISTRY_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.LE_IDENTIFIER_KYC_REGISTRY_PK,
  CONSTRAINT LEIDENTKYCREG_UNIQUEKEY
  UNIQUE (IDENTIFICATION_TYPE_REFKEY, LEGALENTITY_IDPK)
  USING INDEX MDM_OWNER.LEIDENTKYCREG_UNIQUEKEY);

ALTER TABLE MDM_OWNER.LE_PERSON ADD (
  CONSTRAINT PERSON_PK
  PRIMARY KEY
  (LEGALENTITY_IDPK)
  USING INDEX MDM_OWNER.PERSON_PK);

ALTER TABLE MDM_OWNER.LE_PHONE_ASSOC ADD (
  CONSTRAINT LE_PHONE_ASSOC_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.LE_PHONE_ASSOC_PK,
  CONSTRAINT LEPHONEASSOC_UNIQUEKEY
  UNIQUE (LEGALENTITY_IDPK, PHONE_TYPE_REFKEY)
  USING INDEX MDM_OWNER.LEPHONEASSOC_UNIQUEKEY);

ALTER TABLE MDM_OWNER.LE_PREFERENCES ADD (
  CONSTRAINT LE_PREFERENCES_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.LE_PREFERENCES_PK,
  CONSTRAINT LEPREFERENCES_UNIQUEKEY
  UNIQUE (LEGALENTITY_IDPK, PREFERENCE_TYPE_REFKEY)
  USING INDEX MDM_OWNER.LEPREFERENCES_UNIQUEKEY);

ALTER TABLE MDM_OWNER.LE_PROPERTY_ASSOC ADD (
  CONSTRAINT LE_PROPERTY_ASSOC_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.LE_PROPERTY_ASSOC_PK,
  CONSTRAINT LEPROPERTYASSOC_UNIQUEKEY
  UNIQUE (PROPERTY_IDPK, LEGALENTITY_IDPK, PROPERTY_LE_RELTYPE_REFKEY)
  USING INDEX MDM_OWNER.LEPROPERTYASSOC_UNIQUEKEY);

ALTER TABLE MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY ADD (
  CONSTRAINT LE_SYSTEM_KEYS_REGISTRY_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.LE_SYSTEM_KEYS_REGISTRY_PK,
  CONSTRAINT LESYSKEYREG_UNIQUEKEY
  UNIQUE (SOURCE_SYSTEM_REFKEY, LEGALENTITY_IDPK)
  USING INDEX MDM_OWNER.LESYSKEYREG_UNIQUEKEY);

ALTER TABLE MDM_OWNER.LE_TO_LE_RELATIONSHIP ADD (
  CONSTRAINT LE_TO_LE_RELATIONSHIP_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.LE_TO_LE_RELATIONSHIP_PK,
  CONSTRAINT LETOLERELATIONSHIP_UNIQUEKEY
  UNIQUE (FROM_LEGALENTITY_IDPK, TO_LEGALENTITY_IDPK, LE_RELATIONSHIP_TYPE_REFKEY)
  USING INDEX MDM_OWNER.LETOLERELATIONSHIP_UNIQUEKEY);

ALTER TABLE MDM_OWNER.LE_VEHICLE_ASSOC ADD (
  CONSTRAINT LE_VEHICLE_ASSOC_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.LE_VEHICLE_ASSOC_PK);

ALTER TABLE MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY ADD (
  CONSTRAINT MATCH_CANDIDATE_LE_REGISTRY_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.MATCH_CANDIDATE_LE_REGISTRY_PK);

ALTER TABLE MDM_OWNER.MATCH_MERGED_LE_ASSOC ADD (
  CONSTRAINT MATCH_MERGED_LE_ASSOC_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.MATCH_MERGED_LE_ASSOC_PK);

ALTER TABLE MDM_OWNER.MISCELLANEOUS_INFO ADD (
  CONSTRAINT MISCELLANEOUS_INFO_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.MISCELLANEOUS_INFO_PK);

ALTER TABLE MDM_OWNER.PERSONNAMES ADD (
  CONSTRAINT PERSONNAMES_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.PERSONNAMES_PK,
  CONSTRAINT PERSONNAMES_UNIQKEY
  UNIQUE (LEGALENTITY_IDPK, PERSONNAME_TYPE_REFKEY)
  USING INDEX MDM_OWNER.PERSONNAMES_UNIQKEY);

ALTER TABLE MDM_OWNER.PHONE_STANDARDIZED ADD (
  CONSTRAINT PHONE_STANDARDIZED_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.PHONE_STANDARDIZED_PK);

ALTER TABLE MDM_OWNER.PROPERTY ADD (
  CONSTRAINT PROPERTY_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.PROPERTY_PK);

ALTER TABLE MDM_OWNER.REF_ACCOUNT_MDM_STATUS ADD (
  CONSTRAINT REF_ACCOUNT_MDM_STATUS_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_ACCOUNT_MDM_STATUS_PK,
  CONSTRAINT REF_ACCMDMSTATUS_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_ACCMDMSTATUS_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS ADD (
  CONSTRAINT REF_ACCOUNT_SOURCE_STATUS_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_ACCOUNT_SOURCE_STATUS_PK,
  CONSTRAINT REFACCSOURCESTATUS_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REFACCSOURCESTATUS_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_ADDRESS_SUBTYPE ADD (
  CONSTRAINT REF_ADDRESS_SUBTYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_ADDRESS_SUBTYPE_PK,
  CONSTRAINT REF_ADDRESS_SUBTYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_ADDRESS_SUBTYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_ADDRESS_TYPE ADD (
  CONSTRAINT REF_ADDRESS_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_ADDRESS_TYPE_PK,
  CONSTRAINT REF_ADDRESS_TYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_ADDRESS_TYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_AGREEMENT_TYPE ADD (
  CONSTRAINT REF_AGREEMENT_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_AGREEMENT_TYPE_PK,
  CONSTRAINT REF_AGREEMENT_TYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_AGREEMENT_TYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_ASSOC_TYPE ADD (
  CONSTRAINT REF_ASSOC_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_ASSOC_TYPE_PK,
  CONSTRAINT REF_ASSOC_TYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_ASSOC_TYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_BATCH_ACTION_STATUS ADD (
  CONSTRAINT REF_BATCH_ACTION_STATUS_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_BATCH_ACTION_STATUS_PK);

ALTER TABLE MDM_OWNER.REF_BATCH_PROPOSED_ACTION ADD (
  CONSTRAINT REF_BATCH_PROPOSED_ACTION_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_BATCH_PROPOSED_ACTION_PK);

ALTER TABLE MDM_OWNER.REF_BILLING_MODE_TYPE ADD (
  CONSTRAINT REF_BILLING_MODE_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_BILLING_MODE_TYPE_PK,
  CONSTRAINT REFBILLINGMODETYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REFBILLINGMODETYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_BRANCH_CODE ADD (
  CONSTRAINT REF_BRANCH_CODE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_BRANCH_CODE_PK,
  CONSTRAINT REF_BRANCH_CODE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_BRANCH_CODE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_CLASSIFICATION_CODE ADD (
  CONSTRAINT REF_CLASSIFICATION_CODE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_CLASSIFICATION_CODE_PK,
  CONSTRAINT REFCLASSCODE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REFCLASSCODE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_CORPORATION_NAME_TYPE ADD (
  CONSTRAINT REF_CORPORATION_NAME_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_CORPORATION_NAME_TYPE_PK,
  CONSTRAINT REFCORPNAMETYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REFCORPNAMETYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_CORPORATION_TYPE ADD (
  CONSTRAINT REF_CORPORATION_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_CORPORATION_TYPE_PK,
  CONSTRAINT REF_CORPORATION_TYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_CORPORATION_TYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_COUNTRY_ISO ADD (
  CONSTRAINT REF_COUNTRY_ISO_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_COUNTRY_ISO_PK,
  CONSTRAINT REF_COUNTRY_ISO_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_COUNTRY_ISO_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_CURRENCY ADD (
  CONSTRAINT REF_CURRENCY_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_CURRENCY_PK,
  CONSTRAINT REF_CURRENCY_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_CURRENCY_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_DEACTIVATION_REASON ADD (
  CONSTRAINT REF_DEACTIVATION_REASON_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_DEACTIVATION_REASON_PK,
  CONSTRAINT REFDEACTREASON_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REFDEACTREASON_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_ENTITY_OBJECT_TYPE ADD (
  CONSTRAINT REF_ENTITY_OBJECT_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_ENTITY_OBJECT_TYPE_PK,
  CONSTRAINT REFENTITYOBJECTTYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REFENTITYOBJECTTYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_GENDER ADD (
  CONSTRAINT REF_GENDER_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_GENDER_PK,
  CONSTRAINT REF_GENDER_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_GENDER_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_GROUP_SUBTYPE ADD (
  CONSTRAINT REF_GROUP_SUBTYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_GROUP_SUBTYPE_PK,
  CONSTRAINT REF_GROUP_SUBTYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_GROUP_SUBTYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_GROUP_TYPE ADD (
  CONSTRAINT REF_GROUP_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_GROUP_TYPE_PK,
  CONSTRAINT REF_GROUPTYPEUNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_GROUPTYPEUNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_HIGHEST_EDU_QUAL ADD (
  CONSTRAINT REF_HIGHEST_EDU_QUAL_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_HIGHEST_EDU_QUAL_PK,
  CONSTRAINT REF_HIGHEST_EDU_QUAL_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_HIGHEST_EDU_QUAL_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_IDENTIFICATION_TYPE ADD (
  CONSTRAINT REF_IDENTIFICATION_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_IDENTIFICATION_TYPE_PK,
  CONSTRAINT REF_IDENTIFTYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_IDENTIFTYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_IMPORTANCE_TYPE ADD (
  CONSTRAINT REF_IMPORTANCE_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_IMPORTANCE_TYPE_PK,
  CONSTRAINT REF_IMPORTANCE_TYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_IMPORTANCE_TYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_INACTIVATION_REASON ADD (
  CONSTRAINT REF_INACTIVATION_REASON_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_INACTIVATION_REASON_PK,
  CONSTRAINT REF_INACTIVATION_REASON_UKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_INACTIVATION_REASON_UKEY);

ALTER TABLE MDM_OWNER.REF_INDUSTRY_CODE ADD (
  CONSTRAINT REF_INDUSTRY_CODE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_INDUSTRY_CODE_PK,
  CONSTRAINT REF_INDUSTRY_CODE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_INDUSTRY_CODE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_LANGUAGE_CODE ADD (
  CONSTRAINT REF_LANGUAGE_CODE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_LANGUAGE_CODE_PK,
  CONSTRAINT REF_LANGUAGE_CODE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_LANGUAGE_CODE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_LE_RATING ADD (
  CONSTRAINT REF_LE_RATING_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_LE_RATING_PK,
  CONSTRAINT REF_LE_RATING_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_LE_RATING_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_LE_RELATIONSHIP_TYPE ADD (
  CONSTRAINT REF_LE_RELATIONSHIP_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_LE_RELATIONSHIP_TYPE_PK,
  CONSTRAINT REF_LERELATIONTYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_LERELATIONTYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_LE_ROLETYPE ADD (
  CONSTRAINT REF_LE_ROLETYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_LE_ROLETYPE_PK,
  CONSTRAINT REF_LE_ROLETYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_LE_ROLETYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_LOBTYPE ADD (
  CONSTRAINT REF_LOBTYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_LOBTYPE_PK,
  CONSTRAINT REF_LOBTYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_LOBTYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_MATCH_ACTIONSTATUS ADD (
  CONSTRAINT REF_MATCH_ACTIONSTATUS_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_MATCH_ACTIONSTATUS_PK,
  CONSTRAINT REF_MATCH_ACTIONSTATUS_UKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_MATCH_ACTIONSTATUS_UKEY);

ALTER TABLE MDM_OWNER.REF_MATCH_PROPOSED_ACTION ADD (
  CONSTRAINT REF_MATCH_PROPOSED_ACTION_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_MATCH_PROPOSED_ACTION_PK,
  CONSTRAINT REF_MATCH_PROPOSED_ACTION_UKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_MATCH_PROPOSED_ACTION_UKEY);

ALTER TABLE MDM_OWNER.REF_MATCH_RESULT ADD (
  CONSTRAINT REF_MATCH_RESULT_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_MATCH_RESULT_PK,
  CONSTRAINT REF_MATCH_RESULT_UKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_MATCH_RESULT_UKEY);

ALTER TABLE MDM_OWNER.REF_MATCH_SCORE ADD (
  CONSTRAINT REF_MATCH_SCORE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_MATCH_SCORE_PK,
  CONSTRAINT REF_MATCH_SCORE_UKEY
  UNIQUE (MATCH_ENTITY_OBJECT_NAME, MATCH_ATTR_PATTERN, MATCH_RESULT_REFKEY, MATCH_PROPOSED_ACTION_REFKEY)
  USING INDEX MDM_OWNER.REF_MATCH_SCORE_UKEY);

ALTER TABLE MDM_OWNER.REF_MATCH_THRESHOLD ADD (
  CONSTRAINT REF_MATCH_THRESHOLD_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_MATCH_THRESHOLD_PK,
  CONSTRAINT REF_MATCH_THRESHOLD_UKEY
  UNIQUE (ATTR_BLOCK_NAME)
  USING INDEX MDM_OWNER.REF_MATCH_THRESHOLD_UKEY);

ALTER TABLE MDM_OWNER.REF_MERGE_REASON ADD (
  CONSTRAINT REF_MERGE_REASON_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_MERGE_REASON_PK,
  CONSTRAINT REF_MERGE_REASON_UKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_MERGE_REASON_UKEY);

ALTER TABLE MDM_OWNER.REF_PERSONNAME_TYPE ADD (
  CONSTRAINT REF_PERSONNAME_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_PERSONNAME_TYPE_PK,
  CONSTRAINT REF_PERSONNAME_TYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_PERSONNAME_TYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_PERSON_TYPE ADD (
  CONSTRAINT REF_PERSON_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_PERSON_TYPE_PK,
  CONSTRAINT REF_PERSON_TYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_PERSON_TYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_PHONE_SUBTYPE ADD (
  CONSTRAINT REF_PHONE_SUBTYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_PHONE_SUBTYPE_PK,
  CONSTRAINT REF_PHONE_SUBTYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_PHONE_SUBTYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_PHONE_TYPE ADD (
  CONSTRAINT REF_PHONE_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_PHONE_TYPE_PK,
  CONSTRAINT REF_PHONE_TYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_PHONE_TYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_PREFERENCE_TYPE ADD (
  CONSTRAINT REF_PREFERENCE_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_PREFERENCE_TYPE_PK,
  CONSTRAINT REF_PREFERENCETYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_PREFERENCE_TYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_PREFIX_NAME ADD (
  CONSTRAINT REF_PREFIX_NAME_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_PREFIX_NAME_PK,
  CONSTRAINT REF_PREFIX_NAME_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_PREFIX_NAME_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_PROPERTY_LE_RELTYPE ADD (
  CONSTRAINT REF_PROPERTY_LE_RELTYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REFPROPLERELTYPE_PK);

ALTER TABLE MDM_OWNER.REF_RELATIONSHIP_STATUS ADD (
  CONSTRAINT REF_RELATIONSHIP_STATUS_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_RELATIONSHIP_STATUS_PK,
  CONSTRAINT REFRELATIONSHIPST_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REFRELATIONSHIPST_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_SOURCE_SYSTEM ADD (
  CONSTRAINT REF_SOURCE_SYSTEM_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_SOURCE_SYSTEM_PK,
  CONSTRAINT REF_SOURCE_SYSTEM_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_SOURCE_SYSTEM_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_STATE_PROVINCE ADD (
  CONSTRAINT REF_STATE_PROVINCE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_STATE_PROVINCE_PK,
  CONSTRAINT REF_STATE_PROVINCE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_STATE_PROVINCE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_STATUS_IN_SOURCE ADD (
  CONSTRAINT REF_STATUS_IN_SOURCE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_STATUS_IN_SOURCE_PK,
  CONSTRAINT REF_STATUSINSOURCE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_STATUSINSOURCE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_STATUS_TYPE ADD (
  CONSTRAINT REF_STATUS_TYPE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_STATUS_TYPE_PK,
  CONSTRAINT REF_STATUS_TYPE_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_STATUS_TYPE_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_SUFFIX_NAME ADD (
  CONSTRAINT REF_SUFFIX_NAME_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_SUFFIX_NAME_PK,
  CONSTRAINT REF_SUFFIX_NAME_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REF_SUFFIX_NAME_UNIQUEKEY);

ALTER TABLE MDM_OWNER.REF_TERMINATION_REASON ADD (
  CONSTRAINT REF_TERMINATION_REASON_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.REF_TERMINATION_REASON_PK,
  CONSTRAINT REFTERMINATEREASON_UNIQUEKEY
  UNIQUE (CONFIG_LANGUAGE_CODE_KEY, KEY)
  USING INDEX MDM_OWNER.REFTERMINATEREASON_UNIQUEKEY);

ALTER TABLE MDM_OWNER.VEHICLE ADD (
  CONSTRAINT VEHICLE_PK
  PRIMARY KEY
  (ID_PK)
  USING INDEX MDM_OWNER.VEHICLE_PK);

  
  COMMIT;
  
  
  